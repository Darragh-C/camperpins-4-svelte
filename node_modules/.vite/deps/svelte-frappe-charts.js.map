{
  "version": 3,
  "sources": ["../../frappe-charts/node_modules/style-inject/dist/style-inject.es.js", "../../frappe-charts/src/js/utils/dom.js", "../../frappe-charts/src/js/utils/constants.js", "../../frappe-charts/src/js/utils/helpers.js", "../../frappe-charts/src/js/utils/draw-utils.js", "../../frappe-charts/src/js/utils/colors.js", "../../frappe-charts/src/js/utils/draw.js", "../../frappe-charts/src/js/utils/animate.js", "../../frappe-charts/src/js/utils/animation.js", "../../frappe-charts/src/js/utils/export.js", "../../frappe-charts/src/js/utils/date-utils.js", "../../frappe-charts/src/js/objects/ChartComponents.js", "../../frappe-charts/src/js/utils/intervals.js", "../../frappe-charts/src/js/utils/axis-chart-utils.js", "../../frappe-charts/src/js/chart.js", "../../frappe-charts/src/js/objects/SvgTip.js", "../../frappe-charts/src/css/chartsCss.js", "../../frappe-charts/src/js/charts/BaseChart.js", "../../frappe-charts/src/js/charts/AggregationChart.js", "../../frappe-charts/src/js/charts/PercentageChart.js", "../../frappe-charts/src/js/charts/PieChart.js", "../../frappe-charts/src/js/charts/Heatmap.js", "../../frappe-charts/src/js/charts/AxisChart.js", "../../frappe-charts/src/js/charts/DonutChart.js", "../../svelte-frappe-charts/src/components/base.svelte", "../../svelte-frappe-charts/src/index.js"],
  "sourcesContent": ["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n", "export function $(expr, con) {\n\treturn typeof expr === \"string\"? (con || document).querySelector(expr) : expr || null;\n}\n\nexport function findNodeIndex(node)\n{\n\tvar i = 0;\n\twhile (node.previousSibling) {\n\t\tnode = node.previousSibling;\n\t\ti++;\n\t}\n\treturn i;\n}\n\n$.create = (tag, o) => {\n\tvar element = document.createElement(tag);\n\n\tfor (var i in o) {\n\t\tvar val = o[i];\n\n\t\tif (i === \"inside\") {\n\t\t\t$(val).appendChild(element);\n\t\t}\n\t\telse if (i === \"around\") {\n\t\t\tvar ref = $(val);\n\t\t\tref.parentNode.insertBefore(element, ref);\n\t\t\telement.appendChild(ref);\n\n\t\t} else if (i === \"styles\") {\n\t\t\tif(typeof val === \"object\") {\n\t\t\t\tObject.keys(val).map(prop => {\n\t\t\t\t\telement.style[prop] = val[prop];\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (i in element ) {\n\t\t\telement[i] = val;\n\t\t}\n\t\telse {\n\t\t\telement.setAttribute(i, val);\n\t\t}\n\t}\n\n\treturn element;\n};\n\nexport function getOffset(element) {\n\tlet rect = element.getBoundingClientRect();\n\treturn {\n\t\t// https://stackoverflow.com/a/7436602/6495043\n\t\t// rect.top varies with scroll, so we add whatever has been\n\t\t// scrolled to it to get absolute distance from actual page top\n\t\ttop: rect.top + (document.documentElement.scrollTop || document.body.scrollTop),\n\t\tleft: rect.left + (document.documentElement.scrollLeft || document.body.scrollLeft)\n\t};\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n// an element's offsetParent property will return null whenever it, or any of its parents,\n// is hidden via the display style property.\nexport function isHidden(el) {\n\treturn (el.offsetParent === null);\n}\n\nexport function isElementInViewport(el) {\n\t// Although straightforward: https://stackoverflow.com/a/7557433/6495043\n\tvar rect = el.getBoundingClientRect();\n\n\treturn (\n\t\trect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */\n\t);\n}\n\nexport function getElementContentWidth(element) {\n\tvar styles = window.getComputedStyle(element);\n\tvar padding = parseFloat(styles.paddingLeft) +\n\t\tparseFloat(styles.paddingRight);\n\n\treturn element.clientWidth - padding;\n}\n\nexport function bind(element, o){\n\tif (element) {\n\t\tfor (var event in o) {\n\t\t\tvar callback = o[event];\n\n\t\t\tevent.split(/\\s+/).forEach(function (event) {\n\t\t\t\telement.addEventListener(event, callback);\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport function unbind(element, o){\n\tif (element) {\n\t\tfor (var event in o) {\n\t\t\tvar callback = o[event];\n\n\t\t\tevent.split(/\\s+/).forEach(function(event) {\n\t\t\t\telement.removeEventListener(event, callback);\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport function fire(target, type, properties) {\n\tvar evt = document.createEvent(\"HTMLEvents\");\n\n\tevt.initEvent(type, true, true );\n\n\tfor (var j in properties) {\n\t\tevt[j] = properties[j];\n\t}\n\n\treturn target.dispatchEvent(evt);\n}\n\n// https://css-tricks.com/snippets/javascript/loop-queryselectorall-matches/\nexport function forEachNode(nodeList, callback, scope) {\n\tif(!nodeList) return;\n\tfor (var i = 0; i < nodeList.length; i++) {\n\t\tcallback.call(scope, nodeList[i], i);\n\t}\n}\n\nexport function activate($parent, $child, commonClass, activeClass='active', index = -1) {\n\tlet $children = $parent.querySelectorAll(`.${commonClass}.${activeClass}`);\n\n\tforEachNode($children, (node, i) => {\n\t\tif(index >= 0 && i <= index) return;\n\t\tnode.classList.remove(activeClass);\n\t});\n\n\t$child.classList.add(activeClass);\n}\n", "export const ALL_CHART_TYPES = ['line', 'scatter', 'bar', 'percentage', 'heatmap', 'pie'];\n\nexport const COMPATIBLE_CHARTS = {\n\tbar: ['line', 'scatter', 'percentage', 'pie'],\n\tline: ['scatter', 'bar', 'percentage', 'pie'],\n\tpie: ['line', 'scatter', 'percentage', 'bar'],\n\tpercentage: ['bar', 'line', 'scatter', 'pie'],\n\theatmap: []\n};\n\nexport const DATA_COLOR_DIVISIONS = {\n\tbar: 'datasets',\n\tline: 'datasets',\n\tpie: 'labels',\n\tpercentage: 'labels',\n\theatmap: HEATMAP_DISTRIBUTION_SIZE\n};\n\nexport const BASE_MEASURES = {\n\tmargins: {\n\t\ttop: 10,\n\t\tbottom: 10,\n\t\tleft: 20,\n\t\tright: 20\n\t},\n\tpaddings: {\n\t\ttop: 20,\n\t\tbottom: 40,\n\t\tleft: 30,\n\t\tright: 10\n\t},\n\n\tbaseHeight: 240,\n\ttitleHeight: 20,\n\tlegendHeight: 30,\n\n\ttitleFontSize: 12,\n};\n\nexport function getTopOffset(m) {\n\treturn m.titleHeight + m.margins.top + m.paddings.top;\n}\n\nexport function getLeftOffset(m) {\n\treturn m.margins.left + m.paddings.left;\n}\n\nexport function getExtraHeight(m) {\n\tlet totalExtraHeight = m.margins.top + m.margins.bottom\n\t\t+ m.paddings.top + m.paddings.bottom\n\t\t+ m.titleHeight + m.legendHeight;\n\treturn totalExtraHeight;\n}\n\nexport function getExtraWidth(m) {\n\tlet totalExtraWidth = m.margins.left + m.margins.right\n\t\t+ m.paddings.left + m.paddings.right;\n\n\treturn totalExtraWidth;\n}\n\nexport const INIT_CHART_UPDATE_TIMEOUT = 700;\nexport const CHART_POST_ANIMATE_TIMEOUT = 400;\n\nexport const DEFAULT_AXIS_CHART_TYPE = 'line';\nexport const AXIS_DATASET_CHART_TYPES = ['line', 'bar'];\n\nexport const AXIS_LEGEND_BAR_SIZE = 100;\n\nexport const BAR_CHART_SPACE_RATIO = 0.5;\nexport const MIN_BAR_PERCENT_HEIGHT = 0.00;\n\nexport const LINE_CHART_DOT_SIZE = 4;\nexport const DOT_OVERLAY_SIZE_INCR = 4;\n\nexport const PERCENTAGE_BAR_DEFAULT_HEIGHT = 20;\nexport const PERCENTAGE_BAR_DEFAULT_DEPTH = 2;\n\n// Fixed 5-color theme,\n// More colors are difficult to parse visually\nexport const HEATMAP_DISTRIBUTION_SIZE = 5;\n\nexport const HEATMAP_SQUARE_SIZE = 10;\nexport const HEATMAP_GUTTER_SIZE = 2;\n\nexport const DEFAULT_CHAR_WIDTH = 7;\n\nexport const TOOLTIP_POINTER_TRIANGLE_HEIGHT = 5;\n\nconst DEFAULT_CHART_COLORS = ['light-blue', 'blue', 'violet', 'red', 'orange',\n\t'yellow', 'green', 'light-green', 'purple', 'magenta', 'light-grey', 'dark-grey'];\nconst HEATMAP_COLORS_GREEN = ['#ebedf0', '#c6e48b', '#7bc96f', '#239a3b', '#196127'];\nexport const HEATMAP_COLORS_BLUE = ['#ebedf0', '#c0ddf9', '#73b3f3', '#3886e1', '#17459e'];\nexport const HEATMAP_COLORS_YELLOW = ['#ebedf0', '#fdf436', '#ffc700', '#ff9100', '#06001c'];\n\nexport const DEFAULT_COLORS = {\n\tbar: DEFAULT_CHART_COLORS,\n\tline: DEFAULT_CHART_COLORS,\n\tpie: DEFAULT_CHART_COLORS,\n\tpercentage: DEFAULT_CHART_COLORS,\n\theatmap: HEATMAP_COLORS_GREEN,\n\tdonut: DEFAULT_CHART_COLORS\n};\n\n// Universal constants\nexport const ANGLE_RATIO = Math.PI / 180;\nexport const FULL_ANGLE = 360;\n", "import { ANGLE_RATIO } from './constants';\n\n/**\n * Returns the value of a number upto 2 decimal places.\n * @param {Number} d Any number\n */\nexport function floatTwo(d) {\n\treturn parseFloat(d.toFixed(2));\n}\n\n/**\n * Returns whether or not two given arrays are equal.\n * @param {Array} arr1 First array\n * @param {Array} arr2 Second array\n */\nexport function arraysEqual(arr1, arr2) {\n\tif(arr1.length !== arr2.length) return false;\n\tlet areEqual = true;\n\tarr1.map((d, i) => {\n\t\tif(arr2[i] !== d) areEqual = false;\n\t});\n\treturn areEqual;\n}\n\n/**\n * Shuffles array in place. ES6 version\n * @param {Array} array An array containing the items.\n */\nexport function shuffle(array) {\n\t// Awesomeness: https://bost.ocks.org/mike/shuffle/\n\t// https://stackoverflow.com/a/2450976/6495043\n\t// https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array?noredirect=1&lq=1\n\n\tfor (let i = array.length - 1; i > 0; i--) {\n\t\tlet j = Math.floor(Math.random() * (i + 1));\n\t\t[array[i], array[j]] = [array[j], array[i]];\n\t}\n\n\treturn array;\n}\n\n/**\n * Fill an array with extra points\n * @param {Array} array Array\n * @param {Number} count number of filler elements\n * @param {Object} element element to fill with\n * @param {Boolean} start fill at start?\n */\nexport function fillArray(array, count, element, start=false) {\n\tif(!element) {\n\t\telement = start ? array[0] : array[array.length - 1];\n\t}\n\tlet fillerArray = new Array(Math.abs(count)).fill(element);\n\tarray = start ? fillerArray.concat(array) : array.concat(fillerArray);\n\treturn array;\n}\n\n/**\n * Returns pixel width of string.\n * @param {String} string\n * @param {Number} charWidth Width of single char in pixels\n */\nexport function getStringWidth(string, charWidth) {\n\treturn (string+\"\").length * charWidth;\n}\n\nexport function bindChange(obj, getFn, setFn) {\n\treturn new Proxy(obj, {\n\t\tset: function(target, prop, value) {\n\t\t\tsetFn();\n\t\t\treturn Reflect.set(target, prop, value);\n\t\t},\n\t\tget: function(target, prop) {\n\t\t\tgetFn();\n\t\t\treturn Reflect.get(target, prop);\n\t\t}\n\t});\n}\n\n// https://stackoverflow.com/a/29325222\nexport function getRandomBias(min, max, bias, influence) {\n\tconst range = max - min;\n\tconst biasValue = range * bias + min;\n\tvar rnd = Math.random() * range + min,\t\t// random in range\n\t\tmix = Math.random() * influence;\t\t// random mixer\n\treturn rnd * (1 - mix) + biasValue * mix;\t// mix full range and bias\n}\n\nexport function getPositionByAngle(angle, radius) {\n\treturn {\n\t\tx: Math.sin(angle * ANGLE_RATIO) * radius,\n\t\ty: Math.cos(angle * ANGLE_RATIO) * radius,\n\t};\n}\n\n/**\n * Check if a number is valid for svg attributes\n * @param {object} candidate Candidate to test\n * @param {Boolean} nonNegative flag to treat negative number as invalid\n */\nexport function isValidNumber(candidate, nonNegative=false) {\n\tif (Number.isNaN(candidate)) return false;\n\telse if (candidate === undefined) return false;\n\telse if (!Number.isFinite(candidate)) return false;\n\telse if (nonNegative && candidate < 0) return false;\n\telse return true;\n}\n\n/**\n * Round a number to the closes precision, max max precision 4\n * @param {Number} d Any Number\n */\nexport function round(d) {\n\t// https://floating-point-gui.de/\n\t// https://www.jacklmoore.com/notes/rounding-in-javascript/\n\treturn Number(Math.round(d + 'e4') + 'e-4');\n}\n\n/**\n * Creates a deep clone of an object\n * @param {Object} candidate Any Object\n */\n export function deepClone(candidate) {\n\tlet cloned, value, key;\n  \n\tif (candidate instanceof Date) {\n\t  return new Date(candidate.getTime());\n\t}\n  \n\tif (typeof candidate !== \"object\" || candidate === null) {\n\t  return candidate;\n\t}\n  \n\tcloned = Array.isArray(candidate) ? [] : {};\n  \n\tfor (key in candidate) {\n\t  value = candidate[key];\n  \n\t  cloned[key] = deepClone(value);\n\t}\n  \n\treturn cloned;\n  }", "import { fillArray } from './helpers';\n\nexport function getBarHeightAndYAttr(yTop, zeroLine) {\n\tlet height, y;\n\tif (yTop <= zeroLine) {\n\t\theight = zeroLine - yTop;\n\t\ty = yTop;\n\t} else {\n\t\theight = yTop - zeroLine;\n\t\ty = zeroLine;\n\t}\n\n\treturn [height, y];\n}\n\nexport function equilizeNoOfElements(array1, array2,\n\textraCount = array2.length - array1.length) {\n\n\t// Doesn't work if either has zero elements.\n\tif(extraCount > 0) {\n\t\tarray1 = fillArray(array1, extraCount);\n\t} else {\n\t\tarray2 = fillArray(array2, extraCount);\n\t}\n\treturn [array1, array2];\n}\n\nexport function truncateString(txt, len) {\n\tif (!txt) {\n\t\treturn;\n\t}\n\tif (txt.length > len) {\n\t\treturn txt.slice(0, len-3) + '...';\n\t} else {\n\t\treturn txt;\n\t}\n}\n\nexport function shortenLargeNumber(label) {\n\tlet number;\n\tif (typeof label === 'number') number = label;\n\telse if (typeof label === 'string') {\n\t\tnumber = Number(label);\n\t\tif (Number.isNaN(number)) return label;\n\t}\n\n\t// Using absolute since log wont work for negative numbers\n\tlet p = Math.floor(Math.log10(Math.abs(number)));\n\tif (p <= 2) return number; // Return as is for a 3 digit number of less\n\tlet\tl = Math.floor(p / 3);\n\tlet shortened = (Math.pow(10, p - l * 3) * +(number / Math.pow(10, p)).toFixed(1));\n\n\t// Correct for floating point error upto 2 decimal places\n\treturn Math.round(shortened*100)/100 + ' ' + ['', 'K', 'M', 'B', 'T'][l];\n}\n\n// cubic bezier curve calculation (from example by François Romain)\nexport function getSplineCurvePointsStr(xList, yList) {\n\n\tlet points=[];\n\tfor(let i=0;i<xList.length;i++){\n\t\tpoints.push([xList[i], yList[i]]);\n\t}\n\n\tlet smoothing = 0.2;\n\tlet line = (pointA, pointB) => {\n\t\tlet lengthX = pointB[0] - pointA[0];\n\t\tlet lengthY = pointB[1] - pointA[1];\n\t\treturn {\n\t\t\tlength: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\n\t\t\tangle: Math.atan2(lengthY, lengthX)\n\t\t};\n\t};\n    \n\tlet controlPoint = (current, previous, next, reverse) => {\n\t\tlet p = previous || current;\n\t\tlet n = next || current;\n\t\tlet o = line(p, n);\n\t\tlet angle = o.angle + (reverse ? Math.PI : 0);\n\t\tlet length = o.length * smoothing;\n\t\tlet x = current[0] + Math.cos(angle) * length;\n\t\tlet y = current[1] + Math.sin(angle) * length;\n\t\treturn [x, y];\n\t};\n    \n\tlet bezierCommand = (point, i, a) => {\n\t\tlet cps = controlPoint(a[i - 1], a[i - 2], point);\n\t\tlet cpe = controlPoint(point, a[i - 1], a[i + 1], true);\n\t\treturn `C ${cps[0]},${cps[1]} ${cpe[0]},${cpe[1]} ${point[0]},${point[1]}`;\n\t};\n    \n\tlet pointStr = (points, command) => {\n\t\treturn points.reduce((acc, point, i, a) => i === 0\n\t\t\t? `${point[0]},${point[1]}`\n\t\t\t: `${acc} ${command(point, i, a)}`, '');\n\t};\n    \n\treturn pointStr(points, bezierCommand);\n}\n", "const PRESET_COLOR_MAP = {\n\t'light-blue': '#7cd6fd',\n\t'blue': '#5e64ff',\n\t'violet': '#743ee2',\n\t'red': '#ff5858',\n\t'orange': '#ffa00a',\n\t'yellow': '#feef72',\n\t'green': '#28a745',\n\t'light-green': '#98d85b',\n\t'purple': '#b554ff',\n\t'magenta': '#ffa3ef',\n\t'black': '#36114C',\n\t'grey': '#bdd3e6',\n\t'light-grey': '#f0f4f7',\n\t'dark-grey': '#b8c2cc'\n};\n\nfunction limitColor(r){\n\tif (r > 255) return 255;\n\telse if (r < 0) return 0;\n\treturn r;\n}\n\nexport function lightenDarkenColor(color, amt) {\n\tlet col = getColor(color);\n\tlet usePound = false;\n\tif (col[0] == \"#\") {\n\t\tcol = col.slice(1);\n\t\tusePound = true;\n\t}\n\tlet num = parseInt(col,16);\n\tlet r = limitColor((num >> 16) + amt);\n\tlet b = limitColor(((num >> 8) & 0x00FF) + amt);\n\tlet g = limitColor((num & 0x0000FF) + amt);\n\treturn (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\n\nexport function isValidColor(string) {\n\t// https://stackoverflow.com/a/32685393\n\tlet HEX_RE = /(^\\s*)(#)((?:[A-Fa-f0-9]{3}){1,2})$/i;\n\tlet RGB_RE = /(^\\s*)(rgb|hsl)(a?)[(]\\s*([\\d.]+\\s*%?)\\s*,\\s*([\\d.]+\\s*%?)\\s*,\\s*([\\d.]+\\s*%?)\\s*(?:,\\s*([\\d.]+)\\s*)?[)]$/i;\n\treturn HEX_RE.test(string) || RGB_RE.test(string);\n}\n\nexport const getColor = (color) => {\n\t// When RGB color, convert to hexadecimal (alpha value is omitted)\n\tif((/rgb[a]{0,1}\\([\\d, ]+\\)/gim).test(color)) {\n\t\treturn (/\\D+(\\d*)\\D+(\\d*)\\D+(\\d*)/gim).exec(color)\n\t\t\t.map((x, i) => (i !== 0 ? Number(x).toString(16) : '#'))\n\t\t\t.reduce((c, ch) => `${c}${ch}`);\n\t}\n\treturn PRESET_COLOR_MAP[color] || color;\n};\n", "import { getBarHeightAndYAttr, truncateString, shortenLargeNumber, getSplineCurvePointsStr } from './draw-utils';\nimport { getStringWidth, isValidNumber } from './helpers';\nimport { DOT_OVERLAY_SIZE_INCR, PERCENTAGE_BAR_DEFAULT_DEPTH } from './constants';\nimport { lightenDarkenColor } from './colors';\n\nexport const AXIS_TICK_LENGTH = 6;\nconst LABEL_MARGIN = 4;\nconst LABEL_MAX_CHARS = 15;\nexport const FONT_SIZE = 10;\nconst BASE_LINE_COLOR = '#dadada';\nconst FONT_FILL = '#555b51';\n\nfunction $(expr, con) {\n\treturn typeof expr === \"string\"? (con || document).querySelector(expr) : expr || null;\n}\n\nexport function createSVG(tag, o) {\n\tvar element = document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n\n\tfor (var i in o) {\n\t\tvar val = o[i];\n\n\t\tif (i === \"inside\") {\n\t\t\t$(val).appendChild(element);\n\t\t}\n\t\telse if (i === \"around\") {\n\t\t\tvar ref = $(val);\n\t\t\tref.parentNode.insertBefore(element, ref);\n\t\t\telement.appendChild(ref);\n\n\t\t} else if (i === \"styles\") {\n\t\t\tif(typeof val === \"object\") {\n\t\t\t\tObject.keys(val).map(prop => {\n\t\t\t\t\telement.style[prop] = val[prop];\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tif(i === \"className\") { i = \"class\"; }\n\t\t\tif(i === \"innerHTML\") {\n\t\t\t\telement['textContent'] = val;\n\t\t\t} else {\n\t\t\t\telement.setAttribute(i, val);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction renderVerticalGradient(svgDefElem, gradientId) {\n\treturn createSVG('linearGradient', {\n\t\tinside: svgDefElem,\n\t\tid: gradientId,\n\t\tx1: 0,\n\t\tx2: 0,\n\t\ty1: 0,\n\t\ty2: 1\n\t});\n}\n\nfunction setGradientStop(gradElem, offset, color, opacity) {\n\treturn createSVG('stop', {\n\t\t'inside': gradElem,\n\t\t'style': `stop-color: ${color}`,\n\t\t'offset': offset,\n\t\t'stop-opacity': opacity\n\t});\n}\n\nexport function makeSVGContainer(parent, className, width, height) {\n\treturn createSVG('svg', {\n\t\tclassName: className,\n\t\tinside: parent,\n\t\twidth: width,\n\t\theight: height\n\t});\n}\n\nexport function makeSVGDefs(svgContainer) {\n\treturn createSVG('defs', {\n\t\tinside: svgContainer,\n\t});\n}\n\nexport function makeSVGGroup(className, transform='', parent=undefined) {\n\tlet args = {\n\t\tclassName: className,\n\t\ttransform: transform\n\t};\n\tif(parent) args.inside = parent;\n\treturn createSVG('g', args);\n}\n\nexport function wrapInSVGGroup(elements, className='') {\n\tlet g = createSVG('g', {\n\t\tclassName: className\n\t});\n\telements.forEach(e => g.appendChild(e));\n\treturn g;\n}\n\nexport function makePath(pathStr, className='', stroke='none', fill='none', strokeWidth=2) {\n\treturn createSVG('path', {\n\t\tclassName: className,\n\t\td: pathStr,\n\t\tstyles: {\n\t\t\tstroke: stroke,\n\t\t\tfill: fill,\n\t\t\t'stroke-width': strokeWidth\n\t\t}\n\t});\n}\n\nexport function makeArcPathStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, arcEndY] = [center.x + endPosition.x, center.y + endPosition.y];\n\treturn `M${center.x} ${center.y}\n\t\tL${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY} z`;\n}\n\nexport function makeCircleStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, midArc, arcEndY] = [center.x + endPosition.x, center.y * 2, center.y + endPosition.y];\n\treturn `M${center.x} ${center.y}\n\t\tL${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${midArc} z\n\t\tL${arcStartX} ${midArc}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY} z`;\n}\n\nexport function makeArcStrokePathStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, arcEndY] = [center.x + endPosition.x, center.y + endPosition.y];\n\n\treturn `M${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY}`;\n}\n\nexport function makeStrokeCircleStr(startPosition, endPosition, center, radius, clockWise=1, largeArc=0){\n\tlet [arcStartX, arcStartY] = [center.x + startPosition.x, center.y + startPosition.y];\n\tlet [arcEndX, midArc, arcEndY] = [center.x + endPosition.x, radius * 2 + arcStartY, center.y + startPosition.y];\n\n\treturn `M${arcStartX} ${arcStartY}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${midArc}\n\t\tM${arcStartX} ${midArc}\n\t\tA ${radius} ${radius} 0 ${largeArc} ${clockWise ? 1 : 0}\n\t\t${arcEndX} ${arcEndY}`;\n}\n\nexport function makeGradient(svgDefElem, color, lighter = false) {\n\tlet gradientId ='path-fill-gradient' + '-' + color + '-' +(lighter ? 'lighter' : 'default');\n\tlet gradientDef = renderVerticalGradient(svgDefElem, gradientId);\n\tlet opacities = [1, 0.6, 0.2];\n\tif(lighter) {\n\t\topacities = [0.4, 0.2, 0];\n\t}\n\n\tsetGradientStop(gradientDef, \"0%\", color, opacities[0]);\n\tsetGradientStop(gradientDef, \"50%\", color, opacities[1]);\n\tsetGradientStop(gradientDef, \"100%\", color, opacities[2]);\n\n\treturn gradientId;\n}\n\nexport function percentageBar(x, y, width, height,\n\tdepth=PERCENTAGE_BAR_DEFAULT_DEPTH, fill='none') {\n\n\tlet args = {\n\t\tclassName: 'percentage-bar',\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height,\n\t\tfill: fill,\n\t\tstyles: {\n\t\t\t'stroke': lightenDarkenColor(fill, -25),\n\t\t\t// Diabolically good: https://stackoverflow.com/a/9000859\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray\n\t\t\t'stroke-dasharray': `0, ${height + width}, ${width}, ${height}`,\n\t\t\t'stroke-width': depth\n\t\t},\n\t};\n\n\treturn createSVG(\"rect\", args);\n}\n\nexport function heatSquare(className, x, y, size, radius, fill='none', data={}) {\n\tlet args = {\n\t\tclassName: className,\n\t\tx: x,\n\t\ty: y,\n\t\twidth: size,\n\t\theight: size,\n\t\trx: radius,\n\t\tfill: fill\n\t};\n\n\tObject.keys(data).map(key => {\n\t\targs[key] = data[key];\n\t});\n\n\treturn createSVG(\"rect\", args);\n}\n\nexport function legendBar(x, y, size, fill='none', label, truncate=false) {\n\tlabel = truncate ? truncateString(label, LABEL_MAX_CHARS) : label;\n\n\tlet args = {\n\t\tclassName: 'legend-bar',\n\t\tx: 0,\n\t\ty: 0,\n\t\twidth: size,\n\t\theight: '2px',\n\t\tfill: fill\n\t};\n\tlet text = createSVG('text', {\n\t\tclassName: 'legend-dataset-text',\n\t\tx: 0,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE * 2) + 'px',\n\t\t'font-size': (FONT_SIZE * 1.2) + 'px',\n\t\t'text-anchor': 'start',\n\t\tfill: FONT_FILL,\n\t\tinnerHTML: label\n\t});\n\n\tlet group = createSVG('g', {\n\t\ttransform: `translate(${x}, ${y})`\n\t});\n\tgroup.appendChild(createSVG(\"rect\", args));\n\tgroup.appendChild(text);\n\n\treturn group;\n}\n\nexport function legendDot(x, y, size, fill='none', label, truncate=false) {\n\tlabel = truncate ? truncateString(label, LABEL_MAX_CHARS) : label;\n\n\tlet args = {\n\t\tclassName: 'legend-dot',\n\t\tcx: 0,\n\t\tcy: 0,\n\t\tr: size,\n\t\tfill: fill\n\t};\n\tlet text = createSVG('text', {\n\t\tclassName: 'legend-dataset-text',\n\t\tx: 0,\n\t\ty: 0,\n\t\tdx: (FONT_SIZE) + 'px',\n\t\tdy: (FONT_SIZE/3) + 'px',\n\t\t'font-size': (FONT_SIZE * 1.2) + 'px',\n\t\t'text-anchor': 'start',\n\t\tfill: FONT_FILL,\n\t\tinnerHTML: label\n\t});\n\n\tlet group = createSVG('g', {\n\t\ttransform: `translate(${x}, ${y})`\n\t});\n\tgroup.appendChild(createSVG(\"circle\", args));\n\tgroup.appendChild(text);\n\n\treturn group;\n}\n\nexport function makeText(className, x, y, content, options = {}) {\n\tlet fontSize = options.fontSize || FONT_SIZE;\n\tlet dy = options.dy !== undefined ? options.dy : (fontSize / 2);\n\tlet fill = options.fill || FONT_FILL;\n\tlet textAnchor = options.textAnchor || 'start';\n\treturn createSVG('text', {\n\t\tclassName: className,\n\t\tx: x,\n\t\ty: y,\n\t\tdy: dy + 'px',\n\t\t'font-size': fontSize + 'px',\n\t\tfill: fill,\n\t\t'text-anchor': textAnchor,\n\t\tinnerHTML: content\n\t});\n}\n\nfunction makeVertLine(x, label, y1, y2, options={}) {\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tlet l = createSVG('line', {\n\t\tclassName: 'line-vertical ' + options.className,\n\t\tx1: 0,\n\t\tx2: 0,\n\t\ty1: y1,\n\t\ty2: y2,\n\t\tstyles: {\n\t\t\tstroke: options.stroke\n\t\t}\n\t});\n\n\tlet text = createSVG('text', {\n\t\tx: 0,\n\t\ty: y1 > y2 ? y1 + LABEL_MARGIN : y1 - LABEL_MARGIN - FONT_SIZE,\n\t\tdy: FONT_SIZE + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'middle',\n\t\tinnerHTML: label + \"\"\n\t});\n\n\tlet line = createSVG('g', {\n\t\ttransform: `translate(${ x }, 0)`\n\t});\n\n\tline.appendChild(l);\n\tline.appendChild(text);\n\n\treturn line;\n}\n\nfunction makeHoriLine(y, label, x1, x2, options={}) {\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.lineType) options.lineType = '';\n\tif (options.shortenNumbers) label = shortenLargeNumber(label);\n\n\tlet className = 'line-horizontal ' + options.className +\n\t\t(options.lineType === \"dashed\" ? \"dashed\": \"\");\n\n\tlet l = createSVG('line', {\n\t\tclassName: className,\n\t\tx1: x1,\n\t\tx2: x2,\n\t\ty1: 0,\n\t\ty2: 0,\n\t\tstyles: {\n\t\t\tstroke: options.stroke\n\t\t}\n\t});\n\n\tlet text = createSVG('text', {\n\t\tx: x1 < x2 ? x1 - LABEL_MARGIN : x1 + LABEL_MARGIN,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / 2 - 2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': x1 < x2 ? 'end' : 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet line = createSVG('g', {\n\t\ttransform: `translate(0, ${y})`,\n\t\t'stroke-opacity': 1\n\t});\n\n\tif(text === 0 || text === '0') {\n\t\tline.style.stroke = \"rgba(27, 31, 35, 0.6)\";\n\t}\n\n\tline.appendChild(l);\n\tline.appendChild(text);\n\n\treturn line;\n}\n\nexport function yLine(y, label, width, options={}) {\n\tif (!isValidNumber(y)) y = 0;\n\n\tif(!options.pos) options.pos = 'left';\n\tif(!options.offset) options.offset = 0;\n\tif(!options.mode) options.mode = 'span';\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.className) options.className = '';\n\n\tlet x1 = -1 * AXIS_TICK_LENGTH;\n\tlet x2 = options.mode === 'span' ? width + AXIS_TICK_LENGTH : 0;\n\n\tif(options.mode === 'tick' && options.pos === 'right') {\n\t\tx1 = width + AXIS_TICK_LENGTH;\n\t\tx2 = width;\n\t}\n\n\t// let offset = options.pos === 'left' ? -1 * options.offset : options.offset;\n\n\tx1 += options.offset;\n\tx2 += options.offset;\n\n\treturn makeHoriLine(y, label, x1, x2, {\n\t\tstroke: options.stroke,\n\t\tclassName: options.className,\n\t\tlineType: options.lineType,\n\t\tshortenNumbers: options.shortenNumbers\n\t});\n}\n\nexport function xLine(x, label, height, options={}) {\n\tif (!isValidNumber(x)) x = 0;\n\n\tif(!options.pos) options.pos = 'bottom';\n\tif(!options.offset) options.offset = 0;\n\tif(!options.mode) options.mode = 'span';\n\tif(!options.stroke) options.stroke = BASE_LINE_COLOR;\n\tif(!options.className) options.className = '';\n\n\t// Draw X axis line in span/tick mode with optional label\n\t//                        \ty2(span)\n\t// \t\t\t\t\t\t|\n\t// \t\t\t\t\t\t|\n\t//\t\t\t\tx line\t|\n\t//\t\t\t\t\t\t|\n\t// \t\t\t\t\t   \t|\n\t// ---------------------+-- y2(tick)\n\t//\t\t\t\t\t\t|\n\t//\t\t\t\t\t\t\ty1\n\n\tlet y1 = height + AXIS_TICK_LENGTH;\n\tlet y2 = options.mode === 'span' ? -1 * AXIS_TICK_LENGTH : height;\n\n\tif(options.mode === 'tick' && options.pos === 'top') {\n\t\t// top axis ticks\n\t\ty1 = -1 * AXIS_TICK_LENGTH;\n\t\ty2 = 0;\n\t}\n\n\treturn makeVertLine(x, label, y1, y2, {\n\t\tstroke: options.stroke,\n\t\tclassName: options.className,\n\t\tlineType: options.lineType\n\t});\n}\n\nexport function yMarker(y, label, width, options={}) {\n\tif(!options.labelPos) options.labelPos = 'right';\n\tlet x = options.labelPos === 'left' ? LABEL_MARGIN\n\t\t: width - getStringWidth(label, 5) - LABEL_MARGIN;\n\n\tlet labelSvg = createSVG('text', {\n\t\tclassName: 'chart-label',\n\t\tx: x,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / -2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet line = makeHoriLine(y, '', 0, width, {\n\t\tstroke: options.stroke || BASE_LINE_COLOR,\n\t\tclassName: options.className || '',\n\t\tlineType: options.lineType\n\t});\n\n\tline.appendChild(labelSvg);\n\n\treturn line;\n}\n\nexport function yRegion(y1, y2, width, label, options={}) {\n\t// return a group\n\tlet height = y1 - y2;\n\n\tlet rect = createSVG('rect', {\n\t\tclassName: `bar mini`, // remove class\n\t\tstyles: {\n\t\t\tfill: `rgba(228, 234, 239, 0.49)`,\n\t\t\tstroke: BASE_LINE_COLOR,\n\t\t\t'stroke-dasharray': `${width}, ${height}`\n\t\t},\n\t\t// 'data-point-index': index,\n\t\tx: 0,\n\t\ty: 0,\n\t\twidth: width,\n\t\theight: height\n\t});\n\n\tif(!options.labelPos) options.labelPos = 'right';\n\tlet x = options.labelPos === 'left' ? LABEL_MARGIN\n\t\t: width - getStringWidth(label+\"\", 4.5) - LABEL_MARGIN;\n\n\tlet labelSvg = createSVG('text', {\n\t\tclassName: 'chart-label',\n\t\tx: x,\n\t\ty: 0,\n\t\tdy: (FONT_SIZE / -2) + 'px',\n\t\t'font-size': FONT_SIZE + 'px',\n\t\t'text-anchor': 'start',\n\t\tinnerHTML: label+\"\"\n\t});\n\n\tlet region = createSVG('g', {\n\t\ttransform: `translate(0, ${y2})`\n\t});\n\n\tregion.appendChild(rect);\n\tregion.appendChild(labelSvg);\n\n\treturn region;\n}\n\nexport function datasetBar(x, yTop, width, color, label='', index=0, offset=0, meta={}) {\n\tlet [height, y] = getBarHeightAndYAttr(yTop, meta.zeroLine);\n\ty -= offset;\n\n\tif(height === 0) {\n\t\theight = meta.minHeight;\n\t\ty -= meta.minHeight;\n\t}\n\n\t// Preprocess numbers to avoid svg building errors\n\tif (!isValidNumber(x)) x = 0;\n\tif (!isValidNumber(y)) y = 0;\n\tif (!isValidNumber(height, true)) height = 0;\n\tif (!isValidNumber(width, true)) width = 0;\n\n\tlet rect = createSVG('rect', {\n\t\tclassName: `bar mini`,\n\t\tstyle: `fill: ${color}`,\n\t\t'data-point-index': index,\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height\n\t});\n\n\tlabel += \"\";\n\n\tif(!label && !label.length) {\n\t\treturn rect;\n\t} else {\n\t\trect.setAttribute('y', 0);\n\t\trect.setAttribute('x', 0);\n\t\tlet text = createSVG('text', {\n\t\t\tclassName: 'data-point-value',\n\t\t\tx: width/2,\n\t\t\ty: 0,\n\t\t\tdy: (FONT_SIZE / 2 * -1) + 'px',\n\t\t\t'font-size': FONT_SIZE + 'px',\n\t\t\t'text-anchor': 'middle',\n\t\t\tinnerHTML: label\n\t\t});\n\n\t\tlet group = createSVG('g', {\n\t\t\t'data-point-index': index,\n\t\t\ttransform: `translate(${x}, ${y})`\n\t\t});\n\t\tgroup.appendChild(rect);\n\t\tgroup.appendChild(text);\n\n\t\treturn group;\n\t}\n}\n\nexport function datasetDot(x, y, radius, color, label='', index=0) {\n\tlet dot = createSVG('circle', {\n\t\tstyle: `fill: ${color}`,\n\t\t'data-point-index': index,\n\t\tcx: x,\n\t\tcy: y,\n\t\tr: radius\n\t});\n\n\tlabel += \"\";\n\n\tif(!label && !label.length) {\n\t\treturn dot;\n\t} else {\n\t\tdot.setAttribute('cy', 0);\n\t\tdot.setAttribute('cx', 0);\n\n\t\tlet text = createSVG('text', {\n\t\t\tclassName: 'data-point-value',\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tdy: (FONT_SIZE / 2 * -1 - radius) + 'px',\n\t\t\t'font-size': FONT_SIZE + 'px',\n\t\t\t'text-anchor': 'middle',\n\t\t\tinnerHTML: label\n\t\t});\n\n\t\tlet group = createSVG('g', {\n\t\t\t'data-point-index': index,\n\t\t\ttransform: `translate(${x}, ${y})`\n\t\t});\n\t\tgroup.appendChild(dot);\n\t\tgroup.appendChild(text);\n\n\t\treturn group;\n\t}\n}\n\nexport function getPaths(xList, yList, color, options={}, meta={}) {\n\tlet pointsList = yList.map((y, i) => (xList[i] + ',' + y));\n\tlet pointsStr = pointsList.join(\"L\");\n\n\t// Spline\n\tif (options.spline)\n\t\tpointsStr = getSplineCurvePointsStr(xList, yList);\n\n\tlet path = makePath(\"M\"+pointsStr, 'line-graph-path', color);\n\n\t// HeatLine\n\tif(options.heatline) {\n\t\tlet gradient_id = makeGradient(meta.svgDefs, color);\n\t\tpath.style.stroke = `url(#${gradient_id})`;\n\t}\n\n\tlet paths = {\n\t\tpath: path\n\t};\n\n\t// Region\n\tif(options.regionFill) {\n\t\tlet gradient_id_region = makeGradient(meta.svgDefs, color, true);\n\n\t\tlet pathStr = \"M\" + `${xList[0]},${meta.zeroLine}L` + pointsStr + `L${xList.slice(-1)[0]},${meta.zeroLine}`;\n\t\tpaths.region = makePath(pathStr, `region-fill`, 'none', `url(#${gradient_id_region})`);\n\t}\n\n\treturn paths;\n}\n\nexport let makeOverlay = {\n\t'bar': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'rect') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\toverlay.style.fill = '#000000';\n\t\toverlay.style.opacity = '0.4';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t},\n\n\t'dot': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\tlet radius = unit.getAttribute('r');\n\t\tlet fill = unit.getAttribute('fill');\n\t\toverlay.setAttribute('r', parseInt(radius) + DOT_OVERLAY_SIZE_INCR);\n\t\toverlay.setAttribute('fill', fill);\n\t\toverlay.style.opacity = '0.6';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t},\n\n\t'heat_square': (unit) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet overlay = unit.cloneNode();\n\t\tlet radius = unit.getAttribute('r');\n\t\tlet fill = unit.getAttribute('fill');\n\t\toverlay.setAttribute('r', parseInt(radius) + DOT_OVERLAY_SIZE_INCR);\n\t\toverlay.setAttribute('fill', fill);\n\t\toverlay.style.opacity = '0.6';\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t\treturn overlay;\n\t}\n};\n\nexport let updateOverlay = {\n\t'bar': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'rect') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['x', 'y', 'width', 'height'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n\n\t'dot': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['cx', 'cy'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n\n\t'heat_square': (unit, overlay) => {\n\t\tlet transformValue;\n\t\tif(unit.nodeName !== 'circle') {\n\t\t\ttransformValue = unit.getAttribute('transform');\n\t\t\tunit = unit.childNodes[0];\n\t\t}\n\t\tlet attributes = ['cx', 'cy'];\n\t\tObject.values(unit.attributes)\n\t\t\t.filter(attr => attributes.includes(attr.name) && attr.specified)\n\t\t\t.map(attr => {\n\t\t\t\toverlay.setAttribute(attr.name, attr.nodeValue);\n\t\t\t});\n\n\t\tif(transformValue) {\n\t\t\toverlay.setAttribute('transform', transformValue);\n\t\t}\n\t},\n};\n", "import { getBarHeightAndYAttr, getSplineCurvePointsStr } from './draw-utils';\n\nexport const UNIT_ANIM_DUR = 350;\nexport const PATH_ANIM_DUR = 350;\nexport const MARKER_LINE_ANIM_DUR = UNIT_ANIM_DUR;\nexport const REPLACE_ALL_NEW_DUR = 250;\n\nexport const STD_EASING = 'easein';\n\nexport function translate(unit, oldCoord, newCoord, duration) {\n\tlet old = typeof oldCoord === 'string' ? oldCoord : oldCoord.join(', ');\n\treturn [\n\t\tunit,\n\t\t{transform: newCoord.join(', ')},\n\t\tduration,\n\t\tSTD_EASING,\n\t\t\"translate\",\n\t\t{transform: old}\n\t];\n}\n\nexport function translateVertLine(xLine, newX, oldX) {\n\treturn translate(xLine, [oldX, 0], [newX, 0], MARKER_LINE_ANIM_DUR);\n}\n\nexport function translateHoriLine(yLine, newY, oldY) {\n\treturn translate(yLine, [0, oldY], [0, newY], MARKER_LINE_ANIM_DUR);\n}\n\nexport function animateRegion(rectGroup, newY1, newY2, oldY2) {\n\tlet newHeight = newY1 - newY2;\n\tlet rect = rectGroup.childNodes[0];\n\tlet width = rect.getAttribute(\"width\");\n\tlet rectAnim = [\n\t\trect,\n\t\t{ height: newHeight, 'stroke-dasharray': `${width}, ${newHeight}` },\n\t\tMARKER_LINE_ANIM_DUR,\n\t\tSTD_EASING\n\t];\n\n\tlet groupAnim = translate(rectGroup, [0, oldY2], [0, newY2], MARKER_LINE_ANIM_DUR);\n\treturn [rectAnim, groupAnim];\n}\n\nexport function animateBar(bar, x, yTop, width, offset=0, meta={}) {\n\tlet [height, y] = getBarHeightAndYAttr(yTop, meta.zeroLine);\n\ty -= offset;\n\tif(bar.nodeName !== 'rect') {\n\t\tlet rect = bar.childNodes[0];\n\t\tlet rectAnim = [\n\t\t\trect,\n\t\t\t{width: width, height: height},\n\t\t\tUNIT_ANIM_DUR,\n\t\t\tSTD_EASING\n\t\t];\n\n\t\tlet oldCoordStr = bar.getAttribute(\"transform\").split(\"(\")[1].slice(0, -1);\n\t\tlet groupAnim = translate(bar, oldCoordStr, [x, y], MARKER_LINE_ANIM_DUR);\n\t\treturn [rectAnim, groupAnim];\n\t} else {\n\t\treturn [[bar, {width: width, height: height, x: x, y: y}, UNIT_ANIM_DUR, STD_EASING]];\n\t}\n\t// bar.animate({height: args.newHeight, y: yTop}, UNIT_ANIM_DUR, mina.easein);\n}\n\nexport function animateDot(dot, x, y) {\n\tif(dot.nodeName !== 'circle') {\n\t\tlet oldCoordStr = dot.getAttribute(\"transform\").split(\"(\")[1].slice(0, -1);\n\t\tlet groupAnim = translate(dot, oldCoordStr, [x, y], MARKER_LINE_ANIM_DUR);\n\t\treturn [groupAnim];\n\t} else {\n\t\treturn [[dot, {cx: x, cy: y}, UNIT_ANIM_DUR, STD_EASING]];\n\t}\n\t// dot.animate({cy: yTop}, UNIT_ANIM_DUR, mina.easein);\n}\n\nexport function animatePath(paths, newXList, newYList, zeroLine, spline) {\n\tlet pathComponents = [];\n\tlet pointsStr = newYList.map((y, i) => (newXList[i] + ',' + y)).join(\"L\");\n\n\tif (spline)\n\t\tpointsStr = getSplineCurvePointsStr(newXList, newYList);\n\n\tconst animPath = [paths.path, {d:\"M\" + pointsStr}, PATH_ANIM_DUR, STD_EASING];\n\tpathComponents.push(animPath);\n\n\tif(paths.region) {\n\t\tlet regStartPt = `${newXList[0]},${zeroLine}L`;\n\t\tlet regEndPt = `L${newXList.slice(-1)[0]}, ${zeroLine}`;\n\n\t\tconst animRegion = [\n\t\t\tpaths.region,\n\t\t\t{d:\"M\" + regStartPt + pointsStr + regEndPt},\n\t\t\tPATH_ANIM_DUR,\n\t\t\tSTD_EASING\n\t\t];\n\t\tpathComponents.push(animRegion);\n\t}\n\n\treturn pathComponents;\n}\n\nexport function animatePathStr(oldPath, pathStr) {\n\treturn [oldPath, {d: pathStr}, UNIT_ANIM_DUR, STD_EASING];\n}\n", "// Leveraging SMIL Animations\n\nimport { REPLACE_ALL_NEW_DUR } from './animate';\n\nconst EASING = {\n\tease: \"0.25 0.1 0.25 1\",\n\tlinear: \"0 0 1 1\",\n\t// easein: \"0.42 0 1 1\",\n\teasein: \"0.1 0.8 0.2 1\",\n\teaseout: \"0 0 0.58 1\",\n\teaseinout: \"0.42 0 0.58 1\"\n};\n\nfunction animateSVGElement(element, props, dur, easingType=\"linear\", type=undefined, oldValues={}) {\n\n\tlet animElement = element.cloneNode(true);\n\tlet newElement = element.cloneNode(true);\n\n\tfor(var attributeName in props) {\n\t\tlet animateElement;\n\t\tif(attributeName === 'transform') {\n\t\t\tanimateElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animateTransform\");\n\t\t} else {\n\t\t\tanimateElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animate\");\n\t\t}\n\t\tlet currentValue = oldValues[attributeName] || element.getAttribute(attributeName);\n\t\tlet value = props[attributeName];\n\n\t\tlet animAttr = {\n\t\t\tattributeName: attributeName,\n\t\t\tfrom: currentValue,\n\t\t\tto: value,\n\t\t\tbegin: \"0s\",\n\t\t\tdur: dur/1000 + \"s\",\n\t\t\tvalues: currentValue + \";\" + value,\n\t\t\tkeySplines: EASING[easingType],\n\t\t\tkeyTimes: \"0;1\",\n\t\t\tcalcMode: \"spline\",\n\t\t\tfill: 'freeze'\n\t\t};\n\n\t\tif(type) {\n\t\t\tanimAttr[\"type\"] = type;\n\t\t}\n\n\t\tfor (var i in animAttr) {\n\t\t\tanimateElement.setAttribute(i, animAttr[i]);\n\t\t}\n\n\t\tanimElement.appendChild(animateElement);\n\n\t\tif(type) {\n\t\t\tnewElement.setAttribute(attributeName, `translate(${value})`);\n\t\t} else {\n\t\t\tnewElement.setAttribute(attributeName, value);\n\t\t}\n\t}\n\n\treturn [animElement, newElement];\n}\n\nexport function transform(element, style) { // eslint-disable-line no-unused-vars\n\telement.style.transform = style;\n\telement.style.webkitTransform = style;\n\telement.style.msTransform = style;\n\telement.style.mozTransform = style;\n\telement.style.oTransform = style;\n}\n\nfunction animateSVG(svgContainer, elements) {\n\tlet newElements = [];\n\tlet animElements = [];\n\n\telements.map(element => {\n\t\tlet unit = element[0];\n\t\tlet parent = unit.parentNode;\n\n\t\tlet animElement, newElement;\n\n\t\telement[0] = unit;\n\t\t[animElement, newElement] = animateSVGElement(...element);\n\n\t\tnewElements.push(newElement);\n\t\tanimElements.push([animElement, parent]);\n\t\t\n\t\tif (parent) {\n\t\t\tparent.replaceChild(animElement, unit);\n\t\t}\n\t});\n\n\tlet animSvg = svgContainer.cloneNode(true);\n\n\tanimElements.map((animElement, i) => {\n\t\tif (animElement[1]) {\n\t\t\tanimElement[1].replaceChild(newElements[i], animElement[0]);\n\t\t\telements[i][0] = newElements[i];\n\t\t}\n\t});\n\n\treturn animSvg;\n}\n\nexport function runSMILAnimation(parent, svgElement, elementsToAnimate) {\n\tif(elementsToAnimate.length === 0) return;\n\n\tlet animSvgElement = animateSVG(svgElement, elementsToAnimate);\n\tif(svgElement.parentNode == parent) {\n\t\tparent.removeChild(svgElement);\n\t\tparent.appendChild(animSvgElement);\n\n\t}\n\n\t// Replace the new svgElement (data has already been replaced)\n\tsetTimeout(() => {\n\t\tif(animSvgElement.parentNode == parent) {\n\t\t\tparent.removeChild(animSvgElement);\n\t\t\tparent.appendChild(svgElement);\n\t\t}\n\t}, REPLACE_ALL_NEW_DUR);\n}\n", "import { $ } from '../utils/dom';\nimport { CSSTEXT } from '../../css/chartsCss';\n\nexport function downloadFile(filename, data) {\n\tvar a = document.createElement('a');\n\ta.style = \"display: none\";\n\tvar blob = new Blob(data, {type: \"image/svg+xml; charset=utf-8\"});\n\tvar url = window.URL.createObjectURL(blob);\n\ta.href = url;\n\ta.download = filename;\n\tdocument.body.appendChild(a);\n\ta.click();\n\tsetTimeout(function(){\n\t\tdocument.body.removeChild(a);\n\t\twindow.URL.revokeObjectURL(url);\n\t}, 300);\n}\n\nexport function prepareForExport(svg) {\n\tlet clone = svg.cloneNode(true);\n\tclone.classList.add('chart-container');\n\tclone.setAttribute('xmlns', \"http://www.w3.org/2000/svg\");\n\tclone.setAttribute('xmlns:xlink', \"http://www.w3.org/1999/xlink\");\n\tlet styleEl = $.create('style', {\n\t\t'innerHTML': CSSTEXT\n\t});\n\tclone.insertBefore(styleEl, clone.firstChild);\n\n\tlet container = $.create('div');\n\tcontainer.appendChild(clone);\n\n\treturn container.innerHTML;\n}\n", "// Playing around with dates\n\nexport const NO_OF_YEAR_MONTHS = 12;\nexport const NO_OF_DAYS_IN_WEEK = 7;\nexport const DAYS_IN_YEAR = 375;\nexport const NO_OF_MILLIS = 1000;\nexport const SEC_IN_DAY = 86400;\n\nexport const MONTH_NAMES = [\"January\", \"February\", \"March\", \"April\", \"May\",\n\t\"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nexport const MONTH_NAMES_SHORT = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n\t\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nexport const DAY_NAMES_SHORT = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nexport const DAY_NAMES = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n\t\"Thursday\", \"Friday\", \"Saturday\"];\n\n// https://stackoverflow.com/a/11252167/6495043\nfunction treatAsUtc(date) {\n\tlet result = new Date(date);\n\tresult.setMinutes(result.getMinutes() - result.getTimezoneOffset());\n\treturn result;\n}\n\nexport function getYyyyMmDd(date) {\n\tlet dd = date.getDate();\n\tlet mm = date.getMonth() + 1; // getMonth() is zero-based\n\treturn [\n\t\tdate.getFullYear(),\n\t\t(mm>9 ? '' : '0') + mm,\n\t\t(dd>9 ? '' : '0') + dd\n\t].join('-');\n}\n\nexport function clone(date) {\n\treturn new Date(date.getTime());\n}\n\nexport function timestampSec(date) {\n\treturn date.getTime()/NO_OF_MILLIS;\n}\n\nexport function timestampToMidnight(timestamp, roundAhead = false) {\n\tlet midnightTs = Math.floor(timestamp - (timestamp % SEC_IN_DAY));\n\tif(roundAhead) {\n\t\treturn midnightTs + SEC_IN_DAY;\n\t}\n\treturn midnightTs;\n}\n\n// export function getMonthsBetween(startDate, endDate) {}\n\nexport function getWeeksBetween(startDate, endDate) {\n\tlet weekStartDate = setDayToSunday(startDate);\n\treturn Math.ceil(getDaysBetween(weekStartDate, endDate) / NO_OF_DAYS_IN_WEEK);\n}\n\nexport function getDaysBetween(startDate, endDate) {\n\tlet millisecondsPerDay = SEC_IN_DAY * NO_OF_MILLIS;\n\treturn (treatAsUtc(endDate) - treatAsUtc(startDate)) / millisecondsPerDay;\n}\n\nexport function areInSameMonth(startDate, endDate) {\n\treturn startDate.getMonth() === endDate.getMonth()\n\t\t&& startDate.getFullYear() === endDate.getFullYear();\n}\n\nexport function getMonthName(i, short=false) {\n\tlet monthName = MONTH_NAMES[i];\n\treturn short ? monthName.slice(0, 3) : monthName;\n}\n\nexport function getLastDateInMonth (month, year) {\n\treturn new Date(year, month + 1, 0); // 0: last day in previous month\n}\n\n// mutates\nexport function setDayToSunday(date) {\n\tlet newDate = clone(date);\n\tconst day = newDate.getDay();\n\tif(day !== 0) {\n\t\taddDays(newDate, (-1) * day);\n\t}\n\treturn newDate;\n}\n\n// mutates\nexport function addDays(date, numberOfDays) {\n\tdate.setDate(date.getDate() + numberOfDays);\n}\n", "import { makeSVGGroup } from '../utils/draw';\nimport { makeText, makePath, xLine, yLine, yMarker, yRegion, datasetBar, datasetDot, percentageBar, getPaths, heatSquare } from '../utils/draw';\nimport { equilizeNoOfElements } from '../utils/draw-utils';\nimport { translateHoriLine, translateVertLine, animateRegion, animateBar,\n\tanimateDot, animatePath, animatePathStr } from '../utils/animate';\nimport { getMonthName } from '../utils/date-utils';\n\nclass ChartComponent {\n\tconstructor({\n\t\tlayerClass = '',\n\t\tlayerTransform = '',\n\t\tconstants,\n\n\t\tgetData,\n\t\tmakeElements,\n\t\tanimateElements\n\t}) {\n\t\tthis.layerTransform = layerTransform;\n\t\tthis.constants = constants;\n\n\t\tthis.makeElements = makeElements;\n\t\tthis.getData = getData;\n\n\t\tthis.animateElements = animateElements;\n\n\t\tthis.store = [];\n\t\tthis.labels = [];\n\n\t\tthis.layerClass = layerClass;\n\t\tthis.layerClass = typeof(this.layerClass) === 'function'\n\t\t\t? this.layerClass() : this.layerClass;\n\n\t\tthis.refresh();\n\t}\n\n\trefresh(data) {\n\t\tthis.data = data || this.getData();\n\t}\n\n\tsetup(parent) {\n\t\tthis.layer = makeSVGGroup(this.layerClass, this.layerTransform, parent);\n\t}\n\n\tmake() {\n\t\tthis.render(this.data);\n\t\tthis.oldData = this.data;\n\t}\n\n\trender(data) {\n\t\tthis.store = this.makeElements(data);\n\n\t\tthis.layer.textContent = '';\n\t\tthis.store.forEach(element => {\n\t\t\tthis.layer.appendChild(element);\n\t\t});\n\t\tthis.labels.forEach(element => {\n\t\t\tthis.layer.appendChild(element);\n\t\t});\n\t}\n\n\tupdate(animate = true) {\n\t\tthis.refresh();\n\t\tlet animateElements = [];\n\t\tif(animate) {\n\t\t\tanimateElements = this.animateElements(this.data) || [];\n\t\t}\n\t\treturn animateElements;\n\t}\n}\n\nlet componentConfigs = {\n\tdonutSlices: {\n\t\tlayerClass: 'donut-slices',\n\t\tmakeElements(data) {\n\t\t\treturn data.sliceStrings.map((s, i) => {\n\t\t\t\tlet slice = makePath(s, 'donut-path', data.colors[i], 'none', data.strokeWidth);\n\t\t\t\tslice.style.transition = 'transform .3s;';\n\t\t\t\treturn slice;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\treturn this.store.map((slice, i) => animatePathStr(slice, newData.sliceStrings[i]));\n\t\t},\n\t},\n\tpieSlices: {\n\t\tlayerClass: 'pie-slices',\n\t\tmakeElements(data) {\n\t\t\treturn data.sliceStrings.map((s, i) =>{\n\t\t\t\tlet slice = makePath(s, 'pie-path', 'none', data.colors[i]);\n\t\t\t\tslice.style.transition = 'transform .3s;';\n\t\t\t\treturn slice;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\treturn this.store.map((slice, i) =>\n\t\t\t\tanimatePathStr(slice, newData.sliceStrings[i])\n\t\t\t);\n\t\t}\n\t},\n\tpercentageBars: {\n\t\tlayerClass: 'percentage-bars',\n\t\tmakeElements(data) {\n\t\t\treturn data.xPositions.map((x, i) =>{\n\t\t\t\tlet y = 0;\n\t\t\t\tlet bar = percentageBar(x, y, data.widths[i],\n\t\t\t\t\tthis.constants.barHeight, this.constants.barDepth, data.colors[i]);\n\t\t\t\treturn bar;\n\t\t\t});\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tif(newData) return [];\n\t\t}\n\t},\n\tyAxis: {\n\t\tlayerClass: 'y axis',\n\t\tmakeElements(data) {\n\t\t\treturn data.positions.map((position, i) =>\n\t\t\t\tyLine(position, data.labels[i], this.constants.width,\n\t\t\t\t\t{mode: this.constants.mode, pos: this.constants.pos, shortenNumbers: this.constants.shortenNumbers})\n\t\t\t);\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tlet newPos = newData.positions;\n\t\t\tlet newLabels = newData.labels;\n\t\t\tlet oldPos = this.oldData.positions;\n\t\t\tlet oldLabels = this.oldData.labels;\n\n\t\t\t[oldPos, newPos] = equilizeNoOfElements(oldPos, newPos);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\tpositions: oldPos,\n\t\t\t\tlabels: newLabels\n\t\t\t});\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateHoriLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\txAxis: {\n\t\tlayerClass: 'x axis',\n\t\tmakeElements(data) {\n\t\t\treturn data.positions.map((position, i) =>\n\t\t\t\txLine(position, data.calcLabels[i], this.constants.height,\n\t\t\t\t\t{mode: this.constants.mode, pos: this.constants.pos})\n\t\t\t);\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tlet newPos = newData.positions;\n\t\t\tlet newLabels = newData.calcLabels;\n\t\t\tlet oldPos = this.oldData.positions;\n\t\t\tlet oldLabels = this.oldData.calcLabels;\n\n\t\t\t[oldPos, newPos] = equilizeNoOfElements(oldPos, newPos);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\tpositions: oldPos,\n\t\t\t\tcalcLabels: newLabels\n\t\t\t});\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateVertLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\tyMarkers: {\n\t\tlayerClass: 'y-markers',\n\t\tmakeElements(data) {\n\t\t\treturn data.map(m =>\n\t\t\t\tyMarker(m.position, m.label, this.constants.width,\n\t\t\t\t\t{labelPos: m.options.labelPos, mode: 'span', lineType: 'dashed'})\n\t\t\t);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\t[this.oldData, newData] = equilizeNoOfElements(this.oldData, newData);\n\n\t\t\tlet newPos = newData.map(d => d.position);\n\t\t\tlet newLabels = newData.map(d => d.label);\n\t\t\tlet newOptions = newData.map(d => d.options);\n\n\t\t\tlet oldPos = this.oldData.map(d => d.position);\n\n\t\t\tthis.render(oldPos.map((pos, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tposition: oldPos[i],\n\t\t\t\t\tlabel: newLabels[i],\n\t\t\t\t\toptions: newOptions[i]\n\t\t\t\t};\n\t\t\t}));\n\n\t\t\treturn this.store.map((line, i) => {\n\t\t\t\treturn translateHoriLine(\n\t\t\t\t\tline, newPos[i], oldPos[i]\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\tyRegions: {\n\t\tlayerClass: 'y-regions',\n\t\tmakeElements(data) {\n\t\t\treturn data.map(r =>\n\t\t\t\tyRegion(r.startPos, r.endPos, this.constants.width,\n\t\t\t\t\tr.label, {labelPos: r.options.labelPos})\n\t\t\t);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\t[this.oldData, newData] = equilizeNoOfElements(this.oldData, newData);\n\n\t\t\tlet newPos = newData.map(d => d.endPos);\n\t\t\tlet newLabels = newData.map(d => d.label);\n\t\t\tlet newStarts = newData.map(d => d.startPos);\n\t\t\tlet newOptions = newData.map(d => d.options);\n\n\t\t\tlet oldPos = this.oldData.map(d => d.endPos);\n\t\t\tlet oldStarts = this.oldData.map(d => d.startPos);\n\n\t\t\tthis.render(oldPos.map((pos, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tstartPos: oldStarts[i],\n\t\t\t\t\tendPos: oldPos[i],\n\t\t\t\t\tlabel: newLabels[i],\n\t\t\t\t\toptions: newOptions[i]\n\t\t\t\t};\n\t\t\t}));\n\n\t\t\tlet animateElements = [];\n\n\t\t\tthis.store.map((rectGroup, i) => {\n\t\t\t\tanimateElements = animateElements.concat(animateRegion(\n\t\t\t\t\trectGroup, newStarts[i], newPos[i], oldPos[i]\n\t\t\t\t));\n\t\t\t});\n\n\t\t\treturn animateElements;\n\t\t}\n\t},\n\n\theatDomain: {\n\t\tlayerClass: function() { return 'heat-domain domain-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet {index, colWidth, rowHeight, squareSize, radius, xTranslate} = this.constants;\n\t\t\tlet monthNameHeight = -12;\n\t\t\tlet x = xTranslate, y = 0;\n\n\t\t\tthis.serializedSubDomains = [];\n\n\t\t\tdata.cols.map((week, weekNo) => {\n\t\t\t\tif(weekNo === 1) {\n\t\t\t\t\tthis.labels.push(\n\t\t\t\t\t\tmakeText('domain-name', x, monthNameHeight, getMonthName(index, true).toUpperCase(),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfontSize: 9\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tweek.map((day, i) => {\n\t\t\t\t\tif(day.fill) {\n\t\t\t\t\t\tlet data = {\n\t\t\t\t\t\t\t'data-date': day.yyyyMmDd,\n\t\t\t\t\t\t\t'data-value': day.dataValue,\n\t\t\t\t\t\t\t'data-day': i\n\t\t\t\t\t\t};\n\t\t\t\t\t\tlet square = heatSquare('day', x, y, squareSize, radius, day.fill, data);\n\t\t\t\t\t\tthis.serializedSubDomains.push(square);\n\t\t\t\t\t}\n\t\t\t\t\ty += rowHeight;\n\t\t\t\t});\n\t\t\t\ty = 0;\n\t\t\t\tx += colWidth;\n\t\t\t});\n\n\t\t\treturn this.serializedSubDomains;\n\t\t},\n\n\t\tanimateElements(newData) {\n\t\t\tif(newData) return [];\n\t\t}\n\t},\n\n\tbarGraph: {\n\t\tlayerClass: function() { return 'dataset-units dataset-bars dataset-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet c = this.constants;\n\t\t\tthis.unitType = 'bar';\n\t\t\tthis.units = data.yPositions.map((y, j) => {\n\t\t\t\treturn datasetBar(\n\t\t\t\t\tdata.xPositions[j],\n\t\t\t\t\ty,\n\t\t\t\t\tdata.barWidth,\n\t\t\t\t\tc.color,\n\t\t\t\t\tdata.labels[j],\n\t\t\t\t\tj,\n\t\t\t\t\tdata.offsets[j],\n\t\t\t\t\t{\n\t\t\t\t\t\tzeroLine: data.zeroLine,\n\t\t\t\t\t\tbarsWidth: data.barsWidth,\n\t\t\t\t\t\tminHeight: c.minHeight\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn this.units;\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\tlet newXPos = newData.xPositions;\n\t\t\tlet newYPos = newData.yPositions;\n\t\t\tlet newOffsets = newData.offsets;\n\t\t\tlet newLabels = newData.labels;\n\n\t\t\tlet oldXPos = this.oldData.xPositions;\n\t\t\tlet oldYPos = this.oldData.yPositions;\n\t\t\tlet oldOffsets = this.oldData.offsets;\n\t\t\tlet oldLabels = this.oldData.labels;\n\n\t\t\t[oldXPos, newXPos] = equilizeNoOfElements(oldXPos, newXPos);\n\t\t\t[oldYPos, newYPos] = equilizeNoOfElements(oldYPos, newYPos);\n\t\t\t[oldOffsets, newOffsets] = equilizeNoOfElements(oldOffsets, newOffsets);\n\t\t\t[oldLabels, newLabels] = equilizeNoOfElements(oldLabels, newLabels);\n\n\t\t\tthis.render({\n\t\t\t\txPositions: oldXPos,\n\t\t\t\tyPositions: oldYPos,\n\t\t\t\toffsets: oldOffsets,\n\t\t\t\tlabels: newLabels,\n\n\t\t\t\tzeroLine: this.oldData.zeroLine,\n\t\t\t\tbarsWidth: this.oldData.barsWidth,\n\t\t\t\tbarWidth: this.oldData.barWidth,\n\t\t\t});\n\n\t\t\tlet animateElements = [];\n\n\t\t\tthis.store.map((bar, i) => {\n\t\t\t\tanimateElements = animateElements.concat(animateBar(\n\t\t\t\t\tbar, newXPos[i], newYPos[i], newData.barWidth, newOffsets[i],\n\t\t\t\t\t{zeroLine: newData.zeroLine}\n\t\t\t\t));\n\t\t\t});\n\n\t\t\treturn animateElements;\n\t\t}\n\t},\n\n\tlineGraph: {\n\t\tlayerClass: function() { return 'dataset-units dataset-line dataset-' + this.constants.index; },\n\t\tmakeElements(data) {\n\t\t\tlet c = this.constants;\n\t\t\tthis.unitType = 'dot';\n\t\t\tthis.paths = {};\n\t\t\tif(!c.hideLine) {\n\t\t\t\tthis.paths = getPaths(\n\t\t\t\t\tdata.xPositions,\n\t\t\t\t\tdata.yPositions,\n\t\t\t\t\tc.color,\n\t\t\t\t\t{\n\t\t\t\t\t\theatline: c.heatline,\n\t\t\t\t\t\tregionFill: c.regionFill,\n\t\t\t\t\t\tspline: c.spline\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tsvgDefs: c.svgDefs,\n\t\t\t\t\t\tzeroLine: data.zeroLine\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.units = [];\n\t\t\tif(!c.hideDots) {\n\t\t\t\tthis.units = data.yPositions.map((y, j) => {\n\t\t\t\t\treturn datasetDot(\n\t\t\t\t\t\tdata.xPositions[j],\n\t\t\t\t\t\ty,\n\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\tc.color,\n\t\t\t\t\t\t(c.valuesOverPoints ? data.values[j] : ''),\n\t\t\t\t\t\tj\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn Object.values(this.paths).concat(this.units);\n\t\t},\n\t\tanimateElements(newData) {\n\t\t\tlet newXPos = newData.xPositions;\n\t\t\tlet newYPos = newData.yPositions;\n\t\t\tlet newValues = newData.values;\n\n\t\t\tlet oldXPos = this.oldData.xPositions;\n\t\t\tlet oldYPos = this.oldData.yPositions;\n\t\t\tlet oldValues = this.oldData.values;\n\n\t\t\t[oldXPos, newXPos] = equilizeNoOfElements(oldXPos, newXPos);\n\t\t\t[oldYPos, newYPos] = equilizeNoOfElements(oldYPos, newYPos);\n\t\t\t[oldValues, newValues] = equilizeNoOfElements(oldValues, newValues);\n\n\t\t\tthis.render({\n\t\t\t\txPositions: oldXPos,\n\t\t\t\tyPositions: oldYPos,\n\t\t\t\tvalues: newValues,\n\n\t\t\t\tzeroLine: this.oldData.zeroLine,\n\t\t\t\tradius: this.oldData.radius,\n\t\t\t});\n\n\t\t\tlet animateElements = [];\n\n\t\t\tif(Object.keys(this.paths).length) {\n\t\t\t\tanimateElements = animateElements.concat(animatePath(\n\t\t\t\t\tthis.paths, newXPos, newYPos, newData.zeroLine, this.constants.spline));\n\t\t\t}\n\n\t\t\tif(this.units.length) {\n\t\t\t\tthis.units.map((dot, i) => {\n\t\t\t\t\tanimateElements = animateElements.concat(animateDot(\n\t\t\t\t\t\tdot, newXPos[i], newYPos[i]));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn animateElements;\n\t\t}\n\t}\n};\n\nexport function getComponent(name, constants, getData) {\n\tlet keys = Object.keys(componentConfigs).filter(k => name.includes(k));\n\tlet config = componentConfigs[keys[0]];\n\tObject.assign(config, {\n\t\tconstants: constants,\n\t\tgetData: getData\n\t});\n\treturn new ChartComponent(config);\n}\n", "import { floatTwo } from './helpers';\n\nfunction normalize(x) {\n\t// Calculates mantissa and exponent of a number\n\t// Returns normalized number and exponent\n\t// https://stackoverflow.com/q/9383593/6495043\n\n\tif(x===0) {\n\t\treturn [0, 0];\n\t}\n\tif(isNaN(x)) {\n\t\treturn {mantissa: -6755399441055744, exponent: 972};\n\t}\n\tvar sig = x > 0 ? 1 : -1;\n\tif(!isFinite(x)) {\n\t\treturn {mantissa: sig * 4503599627370496, exponent: 972};\n\t}\n\n\tx = Math.abs(x);\n\tvar exp = Math.floor(Math.log10(x));\n\tvar man = x/Math.pow(10, exp);\n\n\treturn [sig * man, exp];\n}\n\nfunction getChartRangeIntervals(max, min=0) {\n\tlet upperBound = Math.ceil(max);\n\tlet lowerBound = Math.floor(min);\n\tlet range = upperBound - lowerBound;\n\n\tlet noOfParts = range;\n\tlet partSize = 1;\n\n\t// To avoid too many partitions\n\tif(range > 5) {\n\t\tif(range % 2 !== 0) {\n\t\t\tupperBound++;\n\t\t\t// Recalc range\n\t\t\trange = upperBound - lowerBound;\n\t\t}\n\t\tnoOfParts = range/2;\n\t\tpartSize = 2;\n\t}\n\n\t// Special case: 1 and 2\n\tif(range <= 2) {\n\t\tnoOfParts = 4;\n\t\tpartSize = range/noOfParts;\n\t}\n\n\t// Special case: 0\n\tif(range === 0) {\n\t\tnoOfParts = 5;\n\t\tpartSize = 1;\n\t}\n\n\tlet intervals = [];\n\tfor(var i = 0; i <= noOfParts; i++){\n\t\tintervals.push(lowerBound + partSize * i);\n\t}\n\treturn intervals;\n}\n\nfunction getChartIntervals(maxValue, minValue=0) {\n\tlet [normalMaxValue, exponent] = normalize(maxValue);\n\tlet normalMinValue = minValue ? minValue/Math.pow(10, exponent): 0;\n\n\t// Allow only 7 significant digits\n\tnormalMaxValue = normalMaxValue.toFixed(6);\n\n\tlet intervals = getChartRangeIntervals(normalMaxValue, normalMinValue);\n\tintervals = intervals.map(value => value * Math.pow(10, exponent));\n\treturn intervals;\n}\n\nexport function calcChartIntervals(values, withMinimum=false) {\n\t//*** Where the magic happens ***\n\n\t// Calculates best-fit y intervals from given values\n\t// and returns the interval array\n\n\tlet maxValue = Math.max(...values);\n\tlet minValue = Math.min(...values);\n\n\t// Exponent to be used for pretty print\n\tlet exponent = 0, intervals = []; // eslint-disable-line no-unused-vars\n\n\tfunction getPositiveFirstIntervals(maxValue, absMinValue) {\n\t\tlet intervals = getChartIntervals(maxValue);\n\n\t\tlet intervalSize = intervals[1] - intervals[0];\n\n\t\t// Then unshift the negative values\n\t\tlet value = 0;\n\t\tfor(var i = 1; value < absMinValue; i++) {\n\t\t\tvalue += intervalSize;\n\t\t\tintervals.unshift((-1) * value);\n\t\t}\n\t\treturn intervals;\n\t}\n\n\t// CASE I: Both non-negative\n\n\tif(maxValue >= 0 && minValue >= 0) {\n\t\texponent = normalize(maxValue)[1];\n\t\tif(!withMinimum) {\n\t\t\tintervals = getChartIntervals(maxValue);\n\t\t} else {\n\t\t\tintervals = getChartIntervals(maxValue, minValue);\n\t\t}\n\t}\n\n\t// CASE II: Only minValue negative\n\n\telse if(maxValue > 0 && minValue < 0) {\n\t\t// `withMinimum` irrelevant in this case,\n\t\t// We'll be handling both sides of zero separately\n\t\t// (both starting from zero)\n\t\t// Because ceil() and floor() behave differently\n\t\t// in those two regions\n\n\t\tlet absMinValue = Math.abs(minValue);\n\n\t\tif(maxValue >= absMinValue) {\n\t\t\texponent = normalize(maxValue)[1];\n\t\t\tintervals = getPositiveFirstIntervals(maxValue, absMinValue);\n\t\t} else {\n\t\t\t// Mirror: maxValue => absMinValue, then change sign\n\t\t\texponent = normalize(absMinValue)[1];\n\t\t\tlet posIntervals = getPositiveFirstIntervals(absMinValue, maxValue);\n\t\t\tintervals = posIntervals.reverse().map(d => d * (-1));\n\t\t}\n\n\t}\n\n\t// CASE III: Both non-positive\n\n\telse if(maxValue <= 0 && minValue <= 0) {\n\t\t// Mirrored Case I:\n\t\t// Work with positives, then reverse the sign and array\n\n\t\tlet pseudoMaxValue = Math.abs(minValue);\n\t\tlet pseudoMinValue = Math.abs(maxValue);\n\n\t\texponent = normalize(pseudoMaxValue)[1];\n\t\tif(!withMinimum) {\n\t\t\tintervals = getChartIntervals(pseudoMaxValue);\n\t\t} else {\n\t\t\tintervals = getChartIntervals(pseudoMaxValue, pseudoMinValue);\n\t\t}\n\n\t\tintervals = intervals.reverse().map(d => d * (-1));\n\t}\n\n\treturn intervals;\n}\n\nexport function getZeroIndex(yPts) {\n\tlet zeroIndex;\n\tlet interval = getIntervalSize(yPts);\n\tif(yPts.indexOf(0) >= 0) {\n\t\t// the range has a given zero\n\t\t// zero-line on the chart\n\t\tzeroIndex = yPts.indexOf(0);\n\t} else if(yPts[0] > 0) {\n\t\t// Minimum value is positive\n\t\t// zero-line is off the chart: below\n\t\tlet min = yPts[0];\n\t\tzeroIndex = (-1) * min / interval;\n\t} else {\n\t\t// Maximum value is negative\n\t\t// zero-line is off the chart: above\n\t\tlet max = yPts[yPts.length - 1];\n\t\tzeroIndex = (-1) * max / interval + (yPts.length - 1);\n\t}\n\treturn zeroIndex;\n}\n\nexport function getRealIntervals(max, noOfIntervals, min = 0, asc = 1) {\n\tlet range = max - min;\n\tlet part = range * 1.0 / noOfIntervals;\n\tlet intervals = [];\n\n\tfor(var i = 0; i <= noOfIntervals; i++) {\n\t\tintervals.push(min + part * i);\n\t}\n\n\treturn asc ? intervals : intervals.reverse();\n}\n\nexport function getIntervalSize(orderedArray) {\n\treturn orderedArray[1] - orderedArray[0];\n}\n\nexport function getValueRange(orderedArray) {\n\treturn orderedArray[orderedArray.length-1] - orderedArray[0];\n}\n\nexport function scale(val, yAxis) {\n\treturn floatTwo(yAxis.zeroLine - val * yAxis.scaleMultiplier);\n}\n\nexport function isInRange(val, min, max) {\n\treturn val > min && val < max;\n}\n\nexport function isInRange2D(coord, minCoord, maxCoord) {\n\treturn isInRange(coord[0], minCoord[0], maxCoord[0])\n\t\t&& isInRange(coord[1], minCoord[1], maxCoord[1]);\n}\n\nexport function getClosestInArray(goal, arr, index = false) {\n\tlet closest = arr.reduce(function(prev, curr) {\n\t\treturn (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev);\n\t}, []);\n\n\treturn index ? arr.indexOf(closest) : closest;\n}\n\nexport function calcDistribution(values, distributionSize) {\n\t// Assume non-negative values,\n\t// implying distribution minimum at zero\n\n\tlet dataMaxValue = Math.max(...values);\n\n\tlet distributionStep = 1 / (distributionSize - 1);\n\tlet distribution = [];\n\n\tfor(var i = 0; i < distributionSize; i++) {\n\t\tlet checkpoint = dataMaxValue * (distributionStep * i);\n\t\tdistribution.push(checkpoint);\n\t}\n\n\treturn distribution;\n}\n\nexport function getMaxCheckpoint(value, distribution) {\n\treturn distribution.filter(d => d < value).length;\n}\n", "import { fillArray } from '../utils/helpers';\nimport { DEFAULT_AXIS_CHART_TYPE, AXIS_DATASET_CHART_TYPES, DEFAULT_CHAR_WIDTH } from '../utils/constants';\n\nexport function dataPrep(data, type) {\n\tdata.labels = data.labels || [];\n\n\tlet datasetLength = data.labels.length;\n\n\t// Datasets\n\tlet datasets = data.datasets;\n\tlet zeroArray = new Array(datasetLength).fill(0);\n\tif(!datasets) {\n\t\t// default\n\t\tdatasets = [{\n\t\t\tvalues: zeroArray\n\t\t}];\n\t}\n\n\tdatasets.map(d=> {\n\t\t// Set values\n\t\tif(!d.values) {\n\t\t\td.values = zeroArray;\n\t\t} else {\n\t\t\t// Check for non values\n\t\t\tlet vals = d.values;\n\t\t\tvals = vals.map(val => (!isNaN(val) ? val : 0));\n\n\t\t\t// Trim or extend\n\t\t\tif(vals.length > datasetLength) {\n\t\t\t\tvals = vals.slice(0, datasetLength);\n\t\t\t} else {\n\t\t\t\tvals = fillArray(vals, datasetLength - vals.length, 0);\n\t\t\t}\n\t\t\td.values = vals;\n\t\t}\n\n\t\t// Set type\n\t\tif(!d.chartType ) {\n\t\t\tif(!AXIS_DATASET_CHART_TYPES.includes(type)) type === DEFAULT_AXIS_CHART_TYPE;\n\t\t\td.chartType = type;\n\t\t}\n\n\t});\n\n\t// Markers\n\n\t// Regions\n\t// data.yRegions = data.yRegions || [];\n\tif(data.yRegions) {\n\t\tdata.yRegions.map(d => {\n\t\t\tif(d.end < d.start) {\n\t\t\t\t[d.start, d.end] = [d.end, d.start];\n\t\t\t}\n\t\t});\n\t}\n\n\treturn data;\n}\n\nexport function zeroDataPrep(realData) {\n\tlet datasetLength = realData.labels.length;\n\tlet zeroArray = new Array(datasetLength).fill(0);\n\n\tlet zeroData = {\n\t\tlabels: realData.labels.slice(0, -1),\n\t\tdatasets: realData.datasets.map(d => {\n\t\t\treturn {\n\t\t\t\tname: '',\n\t\t\t\tvalues: zeroArray.slice(0, -1),\n\t\t\t\tchartType: d.chartType\n\t\t\t};\n\t\t}),\n\t};\n\n\tif(realData.yMarkers) {\n\t\tzeroData.yMarkers = [\n\t\t\t{\n\t\t\t\tvalue: 0,\n\t\t\t\tlabel: ''\n\t\t\t}\n\t\t];\n\t}\n\n\tif(realData.yRegions) {\n\t\tzeroData.yRegions = [\n\t\t\t{\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t\tlabel: ''\n\t\t\t}\n\t\t];\n\t}\n\n\treturn zeroData;\n}\n\nexport function getShortenedLabels(chartWidth, labels=[], isSeries=true) {\n\tlet allowedSpace = chartWidth / labels.length;\n\tif(allowedSpace <= 0) allowedSpace = 1;\n\tlet allowedLetters = allowedSpace / DEFAULT_CHAR_WIDTH;\n\n\tlet seriesMultiple;\n\tif(isSeries) {\n\t\t// Find the maximum label length for spacing calculations\n\t\tlet maxLabelLength = Math.max(...labels.map(label => label.length));\n\t\tseriesMultiple = Math.ceil(maxLabelLength/allowedLetters);\n\t}\n\n\tlet calcLabels = labels.map((label, i) => {\n\t\tlabel += \"\";\n\t\tif(label.length > allowedLetters) {\n\n\t\t\tif(!isSeries) {\n\t\t\t\tif(allowedLetters-3 > 0) {\n\t\t\t\t\tlabel = label.slice(0, allowedLetters-3) + \" ...\";\n\t\t\t\t} else {\n\t\t\t\t\tlabel = label.slice(0, allowedLetters) + '..';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(i % seriesMultiple !== 0) {\n\t\t\t\t\tlabel = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn label;\n\t});\n\n\treturn calcLabels;\n}\n", "import '../css/charts.scss';\n\n// import MultiAxisChart from './charts/MultiAxisChart';\nimport PercentageChart from './charts/PercentageChart';\nimport PieChart from './charts/PieChart';\nimport Heatmap from './charts/Heatmap';\nimport AxisChart from './charts/AxisChart';\nimport DonutChart from './charts/DonutChart';\n\nconst chartTypes = {\n\tbar: AxisChart,\n\tline: AxisChart,\n\t// multiaxis: MultiAxisChart,\n\tpercentage: PercentageChart,\n\theatmap: Heatmap,\n\tpie: PieChart,\n\tdonut: DonutChart,\n};\n\nfunction getChartByType(chartType = 'line', parent, options) {\n\tif (chartType === 'axis-mixed') {\n\t\toptions.type = 'line';\n\t\treturn new AxisChart(parent, options);\n\t}\n\n\tif (!chartTypes[chartType]) {\n\t\tconsole.error(\"Undefined chart type: \" + chartType);\n\t\treturn;\n\t}\n\n\treturn new chartTypes[chartType](parent, options);\n}\n\nclass Chart {\n\tconstructor(parent, options) {\n\t\treturn getChartByType(options.type, parent, options);\n\t}\n}\n\nexport { Chart, PercentageChart, PieChart, Heatmap, AxisChart };", "import { $ } from '../utils/dom';\nimport { TOOLTIP_POINTER_TRIANGLE_HEIGHT } from '../utils/constants';\n\nexport default class SvgTip {\n\tconstructor({\n\t\tparent = null,\n\t\tcolors = []\n\t}) {\n\t\tthis.parent = parent;\n\t\tthis.colors = colors;\n\t\tthis.titleName = '';\n\t\tthis.titleValue = '';\n\t\tthis.listValues = [];\n\t\tthis.titleValueFirst = 0;\n\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\n\t\tthis.top = 0;\n\t\tthis.left = 0;\n\n\t\tthis.setup();\n\t}\n\n\tsetup() {\n\t\tthis.makeTooltip();\n\t}\n\n\trefresh() {\n\t\tthis.fill();\n\t\tthis.calcPosition();\n\t}\n\n\tmakeTooltip() {\n\t\tthis.container = $.create('div', {\n\t\t\tinside: this.parent,\n\t\t\tclassName: 'graph-svg-tip comparison',\n\t\t\tinnerHTML: `<span class=\"title\"></span>\n\t\t\t\t<ul class=\"data-point-list\"></ul>\n\t\t\t\t<div class=\"svg-pointer\"></div>`\n\t\t});\n\t\tthis.hideTip();\n\n\t\tthis.title = this.container.querySelector('.title');\n\t\tthis.dataPointList = this.container.querySelector('.data-point-list');\n\n\t\tthis.parent.addEventListener('mouseleave', () => {\n\t\t\tthis.hideTip();\n\t\t});\n\t}\n\n\tfill() {\n\t\tlet title;\n\t\tif(this.index) {\n\t\t\tthis.container.setAttribute('data-point-index', this.index);\n\t\t}\n\t\tif(this.titleValueFirst) {\n\t\t\ttitle = `<strong>${this.titleValue}</strong>${this.titleName}`;\n\t\t} else {\n\t\t\ttitle = `${this.titleName}<strong>${this.titleValue}</strong>`;\n\t\t}\n\t\tthis.title.innerHTML = title;\n\t\tthis.dataPointList.innerHTML = '';\n\n\t\tthis.listValues.map((set, i) => {\n\t\t\tconst color = this.colors[i] || 'black';\n\t\t\tlet value = set.formatted === 0 || set.formatted ? set.formatted : set.value;\n\n\t\t\tlet li = $.create('li', {\n\t\t\t\tstyles: {\n\t\t\t\t\t'border-top': `3px solid ${color}`\n\t\t\t\t},\n\t\t\t\tinnerHTML: `<strong style=\"display: block;\">${ value === 0 || value ? value : '' }</strong>\n\t\t\t\t\t${set.title ? set.title : '' }`\n\t\t\t});\n\n\t\t\tthis.dataPointList.appendChild(li);\n\t\t});\n\t}\n\n\tcalcPosition() {\n\t\tlet width = this.container.offsetWidth;\n\n\t\tthis.top = this.y - this.container.offsetHeight\n\t\t\t- TOOLTIP_POINTER_TRIANGLE_HEIGHT;\n\t\tthis.left = this.x - width/2;\n\t\tlet maxLeft = this.parent.offsetWidth - width;\n\n\t\tlet pointer = this.container.querySelector('.svg-pointer');\n\n\t\tif(this.left < 0) {\n\t\t\tpointer.style.left = `calc(50% - ${-1 * this.left}px)`;\n\t\t\tthis.left = 0;\n\t\t} else if(this.left > maxLeft) {\n\t\t\tlet delta = this.left - maxLeft;\n\t\t\tlet pointerOffset = `calc(50% + ${delta}px)`;\n\t\t\tpointer.style.left = pointerOffset;\n\n\t\t\tthis.left = maxLeft;\n\t\t} else {\n\t\t\tpointer.style.left = `50%`;\n\t\t}\n\t}\n\n\tsetValues(x, y, title = {}, listValues = [], index = -1) {\n\t\tthis.titleName = title.name;\n\t\tthis.titleValue = title.value;\n\t\tthis.listValues = listValues;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.titleValueFirst = title.valueFirst || 0;\n\t\tthis.index = index;\n\t\tthis.refresh();\n\t}\n\n\thideTip() {\n\t\tthis.container.style.top = '0px';\n\t\tthis.container.style.left = '0px';\n\t\tthis.container.style.opacity = '0';\n\t}\n\n\tshowTip() {\n\t\tthis.container.style.top = this.top + 'px';\n\t\tthis.container.style.left = this.left + 'px';\n\t\tthis.container.style.opacity = '1';\n\t}\n}\n", "export const CSSTEXT = \".chart-container{position:relative;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell','Fira Sans','Droid Sans','Helvetica Neue',sans-serif}.chart-container .axis,.chart-container .chart-label{fill:#555b51}.chart-container .axis line,.chart-container .chart-label line{stroke:#dadada}.chart-container .dataset-units circle{stroke:#fff;stroke-width:2}.chart-container .dataset-units path{fill:none;stroke-opacity:1;stroke-width:2px}.chart-container .dataset-path{stroke-width:2px}.chart-container .path-group path{fill:none;stroke-opacity:1;stroke-width:2px}.chart-container line.dashed{stroke-dasharray:5,3}.chart-container .axis-line .specific-value{text-anchor:start}.chart-container .axis-line .y-line{text-anchor:end}.chart-container .axis-line .x-line{text-anchor:middle}.chart-container .legend-dataset-text{fill:#6c7680;font-weight:600}.graph-svg-tip{position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.8);border-radius:3px}.graph-svg-tip ul{padding-left:0;display:flex}.graph-svg-tip ol{padding-left:0;display:flex}.graph-svg-tip ul.data-point-list li{min-width:90px;flex:1;font-weight:600}.graph-svg-tip strong{color:#dfe2e5;font-weight:600}.graph-svg-tip .svg-pointer{position:absolute;height:5px;margin:0 0 0 -5px;content:' ';border:5px solid transparent;border-top-color:rgba(0,0,0,.8)}.graph-svg-tip.comparison{padding:0;text-align:left;pointer-events:none}.graph-svg-tip.comparison .title{display:block;padding:10px;margin:0;font-weight:600;line-height:1;pointer-events:none}.graph-svg-tip.comparison ul{margin:0;white-space:nowrap;list-style:none}.graph-svg-tip.comparison li{display:inline-block;padding:5px 10px}\";", "import SvgTip from '../objects/SvgTip';\nimport { $, isElementInViewport, getElementContentWidth, isHidden } from '../utils/dom';\nimport { makeSVGContainer, makeSVGDefs, makeSVGGroup, makeText } from '../utils/draw';\nimport { BASE_MEASURES, getExtraHeight, getExtraWidth, getTopOffset, getLeftOffset,\n\tINIT_CHART_UPDATE_TIMEOUT, CHART_POST_ANIMATE_TIMEOUT, DEFAULT_COLORS} from '../utils/constants';\nimport { getColor, isValidColor } from '../utils/colors';\nimport { runSMILAnimation } from '../utils/animation';\nimport { downloadFile, prepareForExport } from '../utils/export';\nimport { deepClone } from  '../utils/helpers';\n\nexport default class BaseChart {\n\tconstructor(parent, options) {\n\t\t// deepclone options to avoid making changes to orignal object\n\t\toptions = deepClone(options);\n\n\t\tthis.parent = typeof parent === 'string'\n\t\t\t? document.querySelector(parent)\n\t\t\t: parent;\n\n\t\tif (!(this.parent instanceof HTMLElement)) {\n\t\t\tthrow new Error('No `parent` element to render on was provided.');\n\t\t}\n\n\t\tthis.rawChartArgs = options;\n\n\t\tthis.title = options.title || '';\n\t\tthis.type = options.type || '';\n\n\t\tthis.realData = this.prepareData(options.data);\n\t\tthis.data = this.prepareFirstData(this.realData);\n\n\t\tthis.colors = this.validateColors(options.colors, this.type);\n\n\t\tthis.config = {\n\t\t\tshowTooltip: 1, // calculate\n\t\t\tshowLegend: 1, // calculate\n\t\t\tisNavigable: options.isNavigable || 0,\n\t\t\tanimate: (typeof options.animate !== 'undefined') ? options.animate : 1,\n\t\t\ttruncateLegends: options.truncateLegends || 1\n\t\t};\n\n\t\tthis.measures = JSON.parse(JSON.stringify(BASE_MEASURES));\n\t\tlet m = this.measures;\n\t\tthis.setMeasures(options);\n\t\tif(!this.title.length) { m.titleHeight = 0; }\n\t\tif(!this.config.showLegend) m.legendHeight = 0;\n\t\tthis.argHeight = options.height || m.baseHeight;\n\n\t\tthis.state = {};\n\t\tthis.options = {};\n\n\t\tthis.initTimeout = INIT_CHART_UPDATE_TIMEOUT;\n\n\t\tif(this.config.isNavigable) {\n\t\t\tthis.overlays = [];\n\t\t}\n\n\t\tthis.configure(options);\n\t}\n\n\tprepareData(data) {\n\t\treturn data;\n\t}\n\n\tprepareFirstData(data) {\n\t\treturn data;\n\t}\n\n\tvalidateColors(colors, type) {\n\t\tconst validColors = [];\n\t\tcolors = (colors || []).concat(DEFAULT_COLORS[type]);\n\t\tcolors.forEach((string) => {\n\t\t\tconst color = getColor(string);\n\t\t\tif(!isValidColor(color)) {\n\t\t\t\tconsole.warn('\"' + string + '\" is not a valid color.');\n\t\t\t} else {\n\t\t\t\tvalidColors.push(color);\n\t\t\t}\n\t\t});\n\t\treturn validColors;\n\t}\n\n\tsetMeasures() {\n\t\t// Override measures, including those for title and legend\n\t\t// set config for legend and title\n\t}\n\n\tconfigure() {\n\t\tlet height = this.argHeight;\n\t\tthis.baseHeight = height;\n\t\tthis.height = height - getExtraHeight(this.measures);\n\n\t\t// Bind window events\n\t\tthis.boundDrawFn = () => this.draw(true);\n\t\tif (ResizeObserver) {\n\t\t\tthis.resizeObserver = new ResizeObserver(this.boundDrawFn);\n\t\t\tthis.resizeObserver.observe(this.parent);\n\t\t}\n\t\twindow.addEventListener('resize', this.boundDrawFn);\n\t\twindow.addEventListener('orientationchange', this.boundDrawFn);\n\t}\n\n\tdestroy() {\n\t\tif (this.resizeObserver) this.resizeObserver.disconnect();\n\t\twindow.removeEventListener('resize', this.boundDrawFn);\n\t\twindow.removeEventListener('orientationchange', this.boundDrawFn);\n\t}\n\n\t// Has to be called manually\n\tsetup() {\n\t\tthis.makeContainer();\n\t\tthis.updateWidth();\n\t\tthis.makeTooltip();\n\n\t\tthis.draw(false, true);\n\t}\n\n\tmakeContainer() {\n\t\t// Chart needs a dedicated parent element\n\t\tthis.parent.innerHTML = '';\n\n\t\tlet args = {\n\t\t\tinside: this.parent,\n\t\t\tclassName: 'chart-container'\n\t\t};\n\n\t\tif(this.independentWidth) {\n\t\t\targs.styles = { width: this.independentWidth + 'px' };\n\t\t}\n\n\t\tthis.container = $.create('div', args);\n\t}\n\n\tmakeTooltip() {\n\t\tthis.tip = new SvgTip({\n\t\t\tparent: this.container,\n\t\t\tcolors: this.colors\n\t\t});\n\t\tthis.bindTooltip();\n\t}\n\n\tbindTooltip() {}\n\n\tdraw(onlyWidthChange=false, init=false) {\n\t\tif (onlyWidthChange && isHidden(this.parent)) {\n\t\t\t// Don't update anything if the chart is hidden\n\t\t\treturn;\n\t\t}\n\t\tthis.updateWidth();\n\n\t\tthis.calc(onlyWidthChange);\n\t\tthis.makeChartArea();\n\t\tthis.setupComponents();\n\n\t\tthis.components.forEach(c => c.setup(this.drawArea));\n\t\t// this.components.forEach(c => c.make());\n\t\tthis.render(this.components, false);\n\n\t\tif(init) {\n\t\t\tthis.data = this.realData;\n\t\t\tsetTimeout(() => {this.update(this.data);}, this.initTimeout);\n\t\t}\n\n\t\tthis.renderLegend();\n\n\t\tthis.setupNavigation(init);\n\t}\n\n\tcalc() {} // builds state\n\n\tupdateWidth() {\n\t\tthis.baseWidth = getElementContentWidth(this.parent);\n\t\tthis.width = this.baseWidth - getExtraWidth(this.measures);\n\t}\n\n\tmakeChartArea() {\n\t\tif(this.svg) {\n\t\t\tthis.container.removeChild(this.svg);\n\t\t}\n\t\tlet m = this.measures;\n\n\t\tthis.svg = makeSVGContainer(\n\t\t\tthis.container,\n\t\t\t'frappe-chart chart',\n\t\t\tthis.baseWidth,\n\t\t\tthis.baseHeight\n\t\t);\n\t\tthis.svgDefs = makeSVGDefs(this.svg);\n\n\t\tif(this.title.length) {\n\t\t\tthis.titleEL = makeText(\n\t\t\t\t'title',\n\t\t\t\tm.margins.left,\n\t\t\t\tm.margins.top,\n\t\t\t\tthis.title,\n\t\t\t\t{\n\t\t\t\t\tfontSize: m.titleFontSize,\n\t\t\t\t\tfill: '#666666',\n\t\t\t\t\tdy: m.titleFontSize\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tlet top = getTopOffset(m);\n\t\tthis.drawArea = makeSVGGroup(\n\t\t\tthis.type + '-chart chart-draw-area',\n\t\t\t`translate(${getLeftOffset(m)}, ${top})`\n\t\t);\n\n\t\tif(this.config.showLegend) {\n\t\t\ttop += this.height + m.paddings.bottom;\n\t\t\tthis.legendArea = makeSVGGroup(\n\t\t\t\t'chart-legend',\n\t\t\t\t`translate(${getLeftOffset(m)}, ${top})`\n\t\t\t);\n\t\t}\n\n\t\tif(this.title.length) { this.svg.appendChild(this.titleEL); }\n\t\tthis.svg.appendChild(this.drawArea);\n\t\tif(this.config.showLegend) { this.svg.appendChild(this.legendArea); }\n\n\t\tthis.updateTipOffset(getLeftOffset(m), getTopOffset(m));\n\t}\n\n\tupdateTipOffset(x, y) {\n\t\tthis.tip.offset = {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n\n\tsetupComponents() { this.components = new Map(); }\n\n\tupdate(data) {\n\t\tif(!data) {\n\t\t\tconsole.error('No data to update.');\n\t\t}\n\t\tthis.data = this.prepareData(data);\n\t\tthis.calc(); // builds state\n\t\tthis.render(this.components, this.config.animate);\n\t\tthis.renderLegend();\n\t}\n\n\trender(components=this.components, animate=true) {\n\t\tif(this.config.isNavigable) {\n\t\t\t// Remove all existing overlays\n\t\t\tthis.overlays.map(o => o.parentNode.removeChild(o));\n\t\t\t// ref.parentNode.insertBefore(element, ref);\n\t\t}\n\t\tlet elementsToAnimate = [];\n\t\t// Can decouple to this.refreshComponents() first to save animation timeout\n\t\tcomponents.forEach(c => {\n\t\t\telementsToAnimate = elementsToAnimate.concat(c.update(animate));\n\t\t});\n\t\tif(elementsToAnimate.length > 0) {\n\t\t\trunSMILAnimation(this.container, this.svg, elementsToAnimate);\n\t\t\tsetTimeout(() => {\n\t\t\t\tcomponents.forEach(c => c.make());\n\t\t\t\tthis.updateNav();\n\t\t\t}, CHART_POST_ANIMATE_TIMEOUT);\n\t\t} else {\n\t\t\tcomponents.forEach(c => c.make());\n\t\t\tthis.updateNav();\n\t\t}\n\t}\n\n\tupdateNav() {\n\t\tif(this.config.isNavigable) {\n\t\t\tthis.makeOverlay();\n\t\t\tthis.bindUnits();\n\t\t}\n\t}\n\n\trenderLegend() {}\n\n\tsetupNavigation(init=false) {\n\t\tif(!this.config.isNavigable) return;\n\n\t\tif(init) {\n\t\t\tthis.bindOverlay();\n\n\t\t\tthis.keyActions = {\n\t\t\t\t'13': this.onEnterKey.bind(this),\n\t\t\t\t'37': this.onLeftArrow.bind(this),\n\t\t\t\t'38': this.onUpArrow.bind(this),\n\t\t\t\t'39': this.onRightArrow.bind(this),\n\t\t\t\t'40': this.onDownArrow.bind(this),\n\t\t\t};\n\n\t\t\tdocument.addEventListener('keydown', (e) => {\n\t\t\t\tif(isElementInViewport(this.container)) {\n\t\t\t\t\te = e || window.event;\n\t\t\t\t\tif(this.keyActions[e.keyCode]) {\n\t\t\t\t\t\tthis.keyActions[e.keyCode]();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tmakeOverlay() {}\n\tupdateOverlay() {}\n\tbindOverlay() {}\n\tbindUnits() {}\n\n\tonLeftArrow() {}\n\tonRightArrow() {}\n\tonUpArrow() {}\n\tonDownArrow() {}\n\tonEnterKey() {}\n\n\taddDataPoint() {}\n\tremoveDataPoint() {}\n\n\tgetDataPoint() {}\n\tsetCurrentDataPoint() {}\n\n\tupdateDataset() {}\n\n\texport() {\n\t\tlet chartSvg = prepareForExport(this.svg);\n\t\tdownloadFile(this.title || 'Chart', [chartSvg]);\n\t}\n}\n", "import BaseChart from './BaseChart';\nimport { truncateString } from '../utils/draw-utils';\nimport { legendDot } from '../utils/draw';\nimport { round } from '../utils/helpers';\nimport { getExtraWidth } from '../utils/constants';\n\nexport default class AggregationChart extends BaseChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\n\t\tthis.config.formatTooltipY = (args.tooltipOptions || {}).formatTooltipY;\n\t\tthis.config.maxSlices = args.maxSlices || 20;\n\t\tthis.config.maxLegendPoints = args.maxLegendPoints || 20;\n\t}\n\n\tcalc() {\n\t\tlet s = this.state;\n\t\tlet maxSlices = this.config.maxSlices;\n\t\ts.sliceTotals = [];\n\n\t\tlet allTotals = this.data.labels.map((label, i) => {\n\t\t\tlet total = 0;\n\t\t\tthis.data.datasets.map(e => {\n\t\t\t\ttotal += e.values[i];\n\t\t\t});\n\t\t\treturn [total, label];\n\t\t}).filter(d => { return d[0] >= 0; }); // keep only positive results\n\n\t\tlet totals = allTotals;\n\t\tif(allTotals.length > maxSlices) {\n\t\t\t// Prune and keep a grey area for rest as per maxSlices\n\t\t\tallTotals.sort((a, b) => { return b[0] - a[0]; });\n\n\t\t\ttotals = allTotals.slice(0, maxSlices-1);\n\t\t\tlet remaining = allTotals.slice(maxSlices-1);\n\n\t\t\tlet sumOfRemaining = 0;\n\t\t\tremaining.map(d => {sumOfRemaining += d[0];});\n\t\t\ttotals.push([sumOfRemaining, 'Rest']);\n\t\t\tthis.colors[maxSlices-1] = 'grey';\n\t\t}\n\n\t\ts.labels = [];\n\t\ttotals.map(d => {\n\t\t\ts.sliceTotals.push(round(d[0]));\n\t\t\ts.labels.push(d[1]);\n\t\t});\n\n\t\ts.grandTotal = s.sliceTotals.reduce((a, b) => a + b, 0);\n\n\t\tthis.center = {\n\t\t\tx: this.width / 2,\n\t\t\ty: this.height / 2\n\t\t};\n\t}\n\n\trenderLegend() {\n\t\tlet s = this.state;\n\t\tthis.legendArea.textContent = '';\n\t\tthis.legendTotals = s.sliceTotals.slice(0, this.config.maxLegendPoints);\n\n\t\tlet count = 0;\n\t\tlet y = 0;\n\t\tthis.legendTotals.map((d, i) => {\n\t\t\tlet barWidth = 150;\n\t\t\tlet divisor = Math.floor(\n\t\t\t\t(this.width - getExtraWidth(this.measures))/barWidth\n\t\t\t);\n\t\t\tif (this.legendTotals.length < divisor) {\n\t\t\t\tbarWidth = this.width/this.legendTotals.length;\n\t\t\t}\n\t\t\tif(count > divisor) {\n\t\t\t\tcount = 0;\n\t\t\t\ty += 20;\n\t\t\t}\n\t\t\tlet x = barWidth * count + 5;\n\t\t\tlet label = this.config.truncateLegends ? truncateString(s.labels[i], barWidth/10) : s.labels[i];\n\t\t\tlet formatted = this.config.formatTooltipY ? this.config.formatTooltipY(d) : d;\n\t\t\tlet dot = legendDot(\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t\t5,\n\t\t\t\tthis.colors[i],\n\t\t\t\t`${label}: ${formatted}`,\n\t\t\t\tfalse\n\t\t\t);\n\t\t\tthis.legendArea.appendChild(dot);\n\t\t\tcount++;\n\t\t});\n\t}\n}\n", "import AggregationChart from './AggregationChart';\nimport { getOffset } from '../utils/dom';\nimport { getComponent } from '../objects/ChartComponents';\nimport { PERCENTAGE_BAR_DEFAULT_HEIGHT, PERCENTAGE_BAR_DEFAULT_DEPTH } from '../utils/constants';\n\nexport default class PercentageChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'percentage';\n\t\tthis.setup();\n\t}\n\n\tsetMeasures(options) {\n\t\tlet m = this.measures;\n\t\tthis.barOptions = options.barOptions || {};\n\n\t\tlet b = this.barOptions;\n\t\tb.height = b.height || PERCENTAGE_BAR_DEFAULT_HEIGHT;\n\t\tb.depth = b.depth || PERCENTAGE_BAR_DEFAULT_DEPTH;\n\n\t\tm.paddings.right = 30;\n\t\tm.legendHeight = 60;\n\t\tm.baseHeight = (b.height + b.depth * 0.5) * 8;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'percentageBars',\n\t\t\t\t{\n\t\t\t\t\tbarHeight: this.barOptions.height,\n\t\t\t\t\tbarDepth: this.barOptions.depth,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: s.xPositions,\n\t\t\t\t\t\twidths: s.widths,\n\t\t\t\t\t\tcolors: this.colors\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\n\t\ts.xPositions = [];\n\t\ts.widths = [];\n\n\t\tlet xPos = 0;\n\t\ts.sliceTotals.map((value) => {\n\t\t\tlet width = this.width * value / s.grandTotal;\n\t\t\ts.widths.push(width);\n\t\t\ts.xPositions.push(xPos);\n\t\t\txPos += width;\n\t\t});\n\t}\n\n\tmakeDataByIndex() { }\n\n\tbindTooltip() {\n\t\tlet s = this.state;\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tlet bars = this.components.get('percentageBars').store;\n\t\t\tlet bar = e.target;\n\t\t\tif(bars.includes(bar)) {\n\n\t\t\t\tlet i = bars.indexOf(bar);\n\t\t\t\tlet gOff = getOffset(this.container), pOff = getOffset(bar);\n\n\t\t\t\tlet x = pOff.left - gOff.left + parseInt(bar.getAttribute('width'))/2;\n\t\t\t\tlet y = pOff.top - gOff.top;\n\t\t\t\tlet title = (this.formattedLabels && this.formattedLabels.length>0\n\t\t\t\t\t? this.formattedLabels[i] : this.state.labels[i]) + ': ';\n\t\t\t\tlet fraction = s.sliceTotals[i]/s.grandTotal;\n\n\t\t\t\tthis.tip.setValues(x, y, {name: title, value: (fraction*100).toFixed(1) + \"%\"});\n\t\t\t\tthis.tip.showTip();\n\t\t\t}\n\t\t});\n\t}\n}\n", "import AggregationChart from './AggregationChart';\nimport { getComponent } from '../objects/ChartComponents';\nimport { getOffset } from '../utils/dom';\nimport { getPositionByAngle } from '../utils/helpers';\nimport { makeArcPathStr, makeCircleStr } from '../utils/draw';\nimport { lightenDarkenColor } from '../utils/colors';\nimport { transform } from '../utils/animation';\nimport { FULL_ANGLE } from '../utils/constants';\n\nexport default class PieChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'pie';\n\t\tthis.initTimeout = 0;\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\t\tthis.mouseMove = this.mouseMove.bind(this);\n\t\tthis.mouseLeave = this.mouseLeave.bind(this);\n\n\t\tthis.hoverRadio = args.hoverRadio || 0.1;\n\t\tthis.config.startAngle = args.startAngle || 0;\n\n\t\tthis.clockWise = args.clockWise || false;\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\t\tthis.radius = (this.height > this.width ? this.center.x : this.center.y);\n\n\t\tconst { radius, clockWise } = this;\n\n\t\tconst prevSlicesProperties = s.slicesProperties || [];\n\t\ts.sliceStrings = [];\n\t\ts.slicesProperties = [];\n\t\tlet curAngle = 180 - this.config.startAngle;\n\t\ts.sliceTotals.map((total, i) => {\n\t\t\tconst startAngle = curAngle;\n\t\t\tconst originDiffAngle = (total / s.grandTotal) * FULL_ANGLE;\n\t\t\tconst largeArc = originDiffAngle > 180 ? 1: 0;\n\t\t\tconst diffAngle = clockWise ? -originDiffAngle : originDiffAngle;\n\t\t\tconst endAngle = curAngle = curAngle + diffAngle;\n\t\t\tconst startPosition = getPositionByAngle(startAngle, radius);\n\t\t\tconst endPosition = getPositionByAngle(endAngle, radius);\n\n\t\t\tconst prevProperty = this.init && prevSlicesProperties[i];\n\n\t\t\tlet curStart,curEnd;\n\t\t\tif(this.init) {\n\t\t\t\tcurStart = prevProperty ? prevProperty.startPosition : startPosition;\n\t\t\t\tcurEnd = prevProperty ? prevProperty.endPosition : startPosition;\n\t\t\t} else {\n\t\t\t\tcurStart = startPosition;\n\t\t\t\tcurEnd = endPosition;\n\t\t\t}\n\t\t\tconst curPath =\n\t\t\t\toriginDiffAngle === 360\n\t\t\t\t\t? makeCircleStr(curStart, curEnd, this.center, this.radius, clockWise, largeArc)\n\t\t\t\t\t: makeArcPathStr(curStart, curEnd, this.center, this.radius, clockWise, largeArc);\n\n\t\t\ts.sliceStrings.push(curPath);\n\t\t\ts.slicesProperties.push({\n\t\t\t\tstartPosition,\n\t\t\t\tendPosition,\n\t\t\t\tvalue: total,\n\t\t\t\ttotal: s.grandTotal,\n\t\t\t\tstartAngle,\n\t\t\t\tendAngle,\n\t\t\t\tangle: diffAngle\n\t\t\t});\n\n\t\t});\n\t\tthis.init = 0;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'pieSlices',\n\t\t\t\t{ },\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsliceStrings: s.sliceStrings,\n\t\t\t\t\t\tcolors: this.colors\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalTranslateByAngle(property){\n\t\tconst{radius,hoverRadio} = this;\n\t\tconst position = getPositionByAngle(property.startAngle+(property.angle / 2),radius);\n\t\treturn `translate3d(${(position.x) * hoverRadio}px,${(position.y) * hoverRadio}px,0)`;\n\t}\n\n\thoverSlice(path,i,flag,e){\n\t\tif(!path) return;\n\t\tconst color = this.colors[i];\n\t\tif(flag) {\n\t\t\ttransform(path, this.calTranslateByAngle(this.state.slicesProperties[i]));\n\t\t\tpath.style.fill = lightenDarkenColor(color, 50);\n\t\t\tlet g_off = getOffset(this.svg);\n\t\t\tlet x = e.pageX - g_off.left + 10;\n\t\t\tlet y = e.pageY - g_off.top - 10;\n\t\t\tlet title = (this.formatted_labels && this.formatted_labels.length > 0\n\t\t\t\t? this.formatted_labels[i] : this.state.labels[i]) + ': ';\n\t\t\tlet percent = (this.state.sliceTotals[i] * 100 / this.state.grandTotal).toFixed(1);\n\t\t\tthis.tip.setValues(x, y, {name: title, value: percent + \"%\"});\n\t\t\tthis.tip.showTip();\n\t\t} else {\n\t\t\ttransform(path,'translate3d(0,0,0)');\n\t\t\tthis.tip.hideTip();\n\t\t\tpath.style.fill = color;\n\t\t}\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', this.mouseMove);\n\t\tthis.container.addEventListener('mouseleave', this.mouseLeave);\n\t}\n\n\tmouseMove(e){\n\t\tconst target = e.target;\n\t\tlet slices = this.components.get('pieSlices').store;\n\t\tlet prevIndex = this.curActiveSliceIndex;\n\t\tlet prevAcitve = this.curActiveSlice;\n\t\tif(slices.includes(target)) {\n\t\t\tlet i = slices.indexOf(target);\n\t\t\tthis.hoverSlice(prevAcitve, prevIndex,false);\n\t\t\tthis.curActiveSlice = target;\n\t\t\tthis.curActiveSliceIndex = i;\n\t\t\tthis.hoverSlice(target, i, true, e);\n\t\t} else {\n\t\t\tthis.mouseLeave();\n\t\t}\n\t}\n\n\tmouseLeave(){\n\t\tthis.hoverSlice(this.curActiveSlice,this.curActiveSliceIndex,false);\n\t}\n}\n", "import BaseChart from './BaseChart';\nimport { getComponent } from '../objects/ChartComponents';\nimport { makeText, heatSquare } from '../utils/draw';\nimport { DAY_NAMES_SHORT, addDays, areInSameMonth, getLastDateInMonth, setDayToSunday, getYyyyMmDd, getWeeksBetween, getMonthName, clone,\n\tNO_OF_MILLIS, NO_OF_YEAR_MONTHS, NO_OF_DAYS_IN_WEEK } from '../utils/date-utils';\nimport { calcDistribution, getMaxCheckpoint } from '../utils/intervals';\nimport { getExtraHeight, getExtraWidth, HEATMAP_DISTRIBUTION_SIZE, HEATMAP_SQUARE_SIZE,\n\tHEATMAP_GUTTER_SIZE } from '../utils/constants';\n\nconst COL_WIDTH = HEATMAP_SQUARE_SIZE + HEATMAP_GUTTER_SIZE;\nconst ROW_HEIGHT = COL_WIDTH;\n// const DAY_INCR = 1;\n\nexport default class Heatmap extends BaseChart {\n\tconstructor(parent, options) {\n\t\tsuper(parent, options);\n\t\tthis.type = 'heatmap';\n\n\t\tthis.countLabel = options.countLabel || '';\n\n\t\tlet validStarts = ['Sunday', 'Monday'];\n\t\tlet startSubDomain = validStarts.includes(options.startSubDomain)\n\t\t\t? options.startSubDomain : 'Sunday';\n\t\tthis.startSubDomainIndex = validStarts.indexOf(startSubDomain);\n\n\t\tthis.setup();\n\t}\n\n\tsetMeasures(options) {\n\t\tlet m = this.measures;\n\t\tthis.discreteDomains = options.discreteDomains === 0 ? 0 : 1;\n\n\t\tm.paddings.top = ROW_HEIGHT * 3;\n\t\tm.paddings.bottom = 0;\n\t\tm.legendHeight = ROW_HEIGHT * 2;\n\t\tm.baseHeight = ROW_HEIGHT * NO_OF_DAYS_IN_WEEK\n\t\t\t+ getExtraHeight(m);\n\n\t\tlet d = this.data;\n\t\tlet spacing = this.discreteDomains ? NO_OF_YEAR_MONTHS : 0;\n\t\tthis.independentWidth = (getWeeksBetween(d.start, d.end)\n\t\t\t+ spacing) * COL_WIDTH + getExtraWidth(m);\n\t}\n\n\tupdateWidth() {\n\t\tlet spacing = this.discreteDomains ? NO_OF_YEAR_MONTHS : 0;\n\t\tlet noOfWeeks = this.state.noOfWeeks ? this.state.noOfWeeks : 52;\n\t\tthis.baseWidth = (noOfWeeks + spacing) * COL_WIDTH\n\t\t\t+ getExtraWidth(this.measures);\n\t}\n\n\tprepareData(data=this.data) {\n\t\tif(data.start && data.end && data.start > data.end) {\n\t\t\tthrow new Error('Start date cannot be greater than end date.');\n\t\t}\n\n\t\tif(!data.start) {\n\t\t\tdata.start = new Date();\n\t\t\tdata.start.setFullYear( data.start.getFullYear() - 1 );\n\t\t}\n\t\tif(!data.end) { data.end = new Date(); }\n\t\tdata.dataPoints = data.dataPoints || {};\n\n\t\tif(parseInt(Object.keys(data.dataPoints)[0]) > 100000) {\n\t\t\tlet points = {};\n\t\t\tObject.keys(data.dataPoints).forEach(timestampSec => {\n\t\t\t\tlet date = new Date(timestampSec * NO_OF_MILLIS);\n\t\t\t\tpoints[getYyyyMmDd(date)] = data.dataPoints[timestampSec];\n\t\t\t});\n\t\t\tdata.dataPoints = points;\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tcalc() {\n\t\tlet s = this.state;\n\n\t\ts.start = clone(this.data.start);\n\t\ts.end = clone(this.data.end);\n\n\t\ts.firstWeekStart = clone(s.start);\n\t\ts.noOfWeeks = getWeeksBetween(s.start, s.end);\n\t\ts.distribution = calcDistribution(\n\t\t\tObject.values(this.data.dataPoints), HEATMAP_DISTRIBUTION_SIZE);\n\n\t\ts.domainConfigs = this.getDomains();\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\t\tlet lessCol = this.discreteDomains ? 0 : 1;\n\n\t\tlet componentConfigs = s.domainConfigs.map((config, i) => [\n\t\t\t'heatDomain',\n\t\t\t{\n\t\t\t\tindex: config.index,\n\t\t\t\tcolWidth: COL_WIDTH,\n\t\t\t\trowHeight: ROW_HEIGHT,\n\t\t\t\tsquareSize: HEATMAP_SQUARE_SIZE,\n\t\t\t\tradius: this.rawChartArgs.radius || 0,\n\t\t\t\txTranslate: s.domainConfigs\n\t\t\t\t\t.filter((config, j) => j < i)\n\t\t\t\t\t.map(config => config.cols.length - lessCol)\n\t\t\t\t\t.reduce((a, b) => a + b, 0)\n\t\t\t\t\t* COL_WIDTH\n\t\t\t},\n\t\t\tfunction() {\n\t\t\t\treturn s.domainConfigs[i];\n\t\t\t}.bind(this)\n\n\t\t]);\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map((args, i) => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0] + '-' + i, component];\n\t\t\t})\n\t\t);\n\n\t\tlet y = 0;\n\t\tDAY_NAMES_SHORT.forEach((dayName, i) => {\n\t\t\tif([1, 3, 5].includes(i)) {\n\t\t\t\tlet dayText = makeText('subdomain-name', -COL_WIDTH/2, y, dayName,\n\t\t\t\t\t{\n\t\t\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE,\n\t\t\t\t\t\tdy: 8,\n\t\t\t\t\t\ttextAnchor: 'end'\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tthis.drawArea.appendChild(dayText);\n\t\t\t}\n\t\t\ty += ROW_HEIGHT;\n\t\t});\n\t}\n\n\tupdate(data) {\n\t\tif(!data) {\n\t\t\tconsole.error('No data to update.');\n\t\t}\n\n\t\tthis.data = this.prepareData(data);\n\t\tthis.draw();\n\t\tthis.bindTooltip();\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tthis.components.forEach(comp => {\n\t\t\t\tlet daySquares = comp.store;\n\t\t\t\tlet daySquare = e.target;\n\t\t\t\tif(daySquares.includes(daySquare)) {\n\n\t\t\t\t\tlet count = daySquare.getAttribute('data-value');\n\t\t\t\t\tlet dateParts = daySquare.getAttribute('data-date').split('-');\n\n\t\t\t\t\tlet month = getMonthName(parseInt(dateParts[1])-1, true);\n\n\t\t\t\t\tlet gOff = this.container.getBoundingClientRect(), pOff = daySquare.getBoundingClientRect();\n\n\t\t\t\t\tlet width = parseInt(e.target.getAttribute('width'));\n\t\t\t\t\tlet x = pOff.left - gOff.left + width/2;\n\t\t\t\t\tlet y = pOff.top - gOff.top;\n\t\t\t\t\tlet value = count + ' ' + this.countLabel;\n\t\t\t\t\tlet name = ' on ' + month + ' ' + dateParts[0] + ', ' + dateParts[2];\n\n\t\t\t\t\tthis.tip.setValues(x, y, {name: name, value: value, valueFirst: 1}, []);\n\t\t\t\t\tthis.tip.showTip();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\trenderLegend() {\n\t\tthis.legendArea.textContent = '';\n\t\tlet x = 0;\n\t\tlet y = ROW_HEIGHT;\n\t\tlet radius = this.rawChartArgs.radius || 0;\n\n\t\tlet lessText = makeText('subdomain-name', x, y, 'Less',\n\t\t\t{\n\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE + 1,\n\t\t\t\tdy: 9\n\t\t\t}\n\t\t);\n\t\tx = (COL_WIDTH * 2) + COL_WIDTH/2;\n\t\tthis.legendArea.appendChild(lessText);\n\n\t\tthis.colors.slice(0, HEATMAP_DISTRIBUTION_SIZE).map((color, i) => {\n\t\t\tconst square = heatSquare('heatmap-legend-unit', x + (COL_WIDTH + 3) * i,\n\t\t\t\ty, HEATMAP_SQUARE_SIZE, radius, color);\n\t\t\tthis.legendArea.appendChild(square);\n\t\t});\n\n\t\tlet moreTextX = x + HEATMAP_DISTRIBUTION_SIZE * (COL_WIDTH + 3) + COL_WIDTH/4;\n\t\tlet moreText = makeText('subdomain-name', moreTextX, y, 'More',\n\t\t\t{\n\t\t\t\tfontSize: HEATMAP_SQUARE_SIZE + 1,\n\t\t\t\tdy: 9\n\t\t\t}\n\t\t);\n\t\tthis.legendArea.appendChild(moreText);\n\t}\n\n\tgetDomains() {\n\t\tlet s = this.state;\n\t\tconst [startMonth, startYear] = [s.start.getMonth(), s.start.getFullYear()];\n\t\tconst [endMonth, endYear] = [s.end.getMonth(), s.end.getFullYear()];\n\n\t\tconst noOfMonths = (endMonth - startMonth + 1) + (endYear - startYear) * 12;\n\n\t\tlet domainConfigs = [];\n\n\t\tlet startOfMonth = clone(s.start);\n\t\tfor(var i = 0; i < noOfMonths; i++) {\n\t\t\tlet endDate = s.end;\n\t\t\tif(!areInSameMonth(startOfMonth, s.end)) {\n\t\t\t\tlet [month, year] = [startOfMonth.getMonth(), startOfMonth.getFullYear()];\n\t\t\t\tendDate = getLastDateInMonth(month, year);\n\t\t\t}\n\t\t\tdomainConfigs.push(this.getDomainConfig(startOfMonth, endDate));\n\n\t\t\taddDays(endDate, 1);\n\t\t\tstartOfMonth = endDate;\n\t\t}\n\n\t\treturn domainConfigs;\n\t}\n\n\tgetDomainConfig(startDate, endDate='') {\n\t\tlet [month, year] = [startDate.getMonth(), startDate.getFullYear()];\n\t\tlet startOfWeek = setDayToSunday(startDate); // TODO: Monday as well\n\t\tendDate = clone(endDate) || getLastDateInMonth(month, year);\n\n\t\tlet domainConfig = {\n\t\t\tindex: month,\n\t\t\tcols: []\n\t\t};\n\n\t\taddDays(endDate, 1);\n\t\tlet noOfMonthWeeks = getWeeksBetween(startOfWeek, endDate);\n\n\t\tlet cols = [], col;\n\t\tfor(var i = 0; i < noOfMonthWeeks; i++) {\n\t\t\tcol = this.getCol(startOfWeek, month);\n\t\t\tcols.push(col);\n\n\t\t\tstartOfWeek = new Date(col[NO_OF_DAYS_IN_WEEK - 1].yyyyMmDd);\n\t\t\taddDays(startOfWeek, 1);\n\t\t}\n\n\t\tif(col[NO_OF_DAYS_IN_WEEK - 1].dataValue !== undefined) {\n\t\t\taddDays(startOfWeek, 1);\n\t\t\tcols.push(this.getCol(startOfWeek, month, true));\n\t\t}\n\n\t\tdomainConfig.cols = cols;\n\n\t\treturn domainConfig;\n\t}\n\n\tgetCol(startDate, month, empty = false) {\n\t\tlet s = this.state;\n\n\t\t// startDate is the start of week\n\t\tlet currentDate = clone(startDate);\n\t\tlet col = [];\n\n\t\tfor(var i = 0; i < NO_OF_DAYS_IN_WEEK; i++, addDays(currentDate, 1)) {\n\t\t\tlet config = {};\n\n\t\t\t// Non-generic adjustment for entire heatmap, needs state\n\t\t\tlet currentDateWithinData = currentDate >= s.start && currentDate <= s.end;\n\n\t\t\tif(empty || currentDate.getMonth() !== month || !currentDateWithinData) {\n\t\t\t\tconfig.yyyyMmDd = getYyyyMmDd(currentDate);\n\t\t\t} else {\n\t\t\t\tconfig = this.getSubDomainConfig(currentDate);\n\t\t\t}\n\t\t\tcol.push(config);\n\t\t}\n\n\t\treturn col;\n\t}\n\n\tgetSubDomainConfig(date) {\n\t\tlet yyyyMmDd = getYyyyMmDd(date);\n\t\tlet dataValue = this.data.dataPoints[yyyyMmDd];\n\t\tlet config = {\n\t\t\tyyyyMmDd: yyyyMmDd,\n\t\t\tdataValue: dataValue || 0,\n\t\t\tfill: this.colors[getMaxCheckpoint(dataValue, this.state.distribution)]\n\t\t};\n\t\treturn config;\n\t}\n}\n", "import BaseChart from './BaseChart';\nimport { dataPrep, zeroDataPrep, getShortenedLabels } from '../utils/axis-chart-utils';\nimport { AXIS_LEGEND_BAR_SIZE } from '../utils/constants';\nimport { getComponent } from '../objects/ChartComponents';\nimport { getOffset, fire } from '../utils/dom';\nimport { calcChartIntervals, getIntervalSize, getValueRange, getZeroIndex, scale, getClosestInArray } from '../utils/intervals';\nimport { floatTwo } from '../utils/helpers';\nimport { makeOverlay, updateOverlay, legendBar } from '../utils/draw';\nimport { getTopOffset, getLeftOffset, MIN_BAR_PERCENT_HEIGHT, BAR_CHART_SPACE_RATIO,\n\tLINE_CHART_DOT_SIZE } from '../utils/constants';\n\nexport default class AxisChart extends BaseChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\n\t\tthis.barOptions = args.barOptions || {};\n\t\tthis.lineOptions = args.lineOptions || {};\n\n\t\tthis.type = args.type || 'line';\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tsetMeasures() {\n\t\tif(this.data.datasets.length <= 1) {\n\t\t\tthis.config.showLegend = 0;\n\t\t\tthis.measures.paddings.bottom = 30;\n\t\t}\n\t}\n\n\tconfigure(options) {\n\t\tsuper.configure(options);\n\n\t\toptions.axisOptions = options.axisOptions || {};\n\t\toptions.tooltipOptions = options.tooltipOptions || {};\n\n\t\tthis.config.xAxisMode = options.axisOptions.xAxisMode || 'span';\n\t\tthis.config.yAxisMode = options.axisOptions.yAxisMode || 'span';\n\t\tthis.config.xIsSeries = options.axisOptions.xIsSeries || 0;\n\t\tthis.config.shortenYAxisNumbers = options.axisOptions.shortenYAxisNumbers || 0;\n\n\t\tthis.config.formatTooltipX = options.tooltipOptions.formatTooltipX;\n\t\tthis.config.formatTooltipY = options.tooltipOptions.formatTooltipY;\n\n\t\tthis.config.valuesOverPoints = options.valuesOverPoints;\n\t}\n\n\tprepareData(data=this.data) {\n\t\treturn dataPrep(data, this.type);\n\t}\n\n\tprepareFirstData(data=this.data) {\n\t\treturn zeroDataPrep(data);\n\t}\n\n\tcalc(onlyWidthChange = false) {\n\t\tthis.calcXPositions();\n\t\tif(!onlyWidthChange) {\n\t\t\tthis.calcYAxisParameters(this.getAllYValues(), this.type === 'line');\n\t\t}\n\t\tthis.makeDataByIndex();\n\t}\n\n\tcalcXPositions() {\n\t\tlet s = this.state;\n\t\tlet labels = this.data.labels;\n\t\ts.datasetLength = labels.length;\n\n\t\ts.unitWidth = this.width/(s.datasetLength);\n\t\t// Default, as per bar, and mixed. Only line will be a special case\n\t\ts.xOffset = s.unitWidth/2;\n\n\t\t// // For a pure Line Chart\n\t\t// s.unitWidth = this.width/(s.datasetLength - 1);\n\t\t// s.xOffset = 0;\n\n\t\ts.xAxis = {\n\t\t\tlabels: labels,\n\t\t\tpositions: labels.map((d, i) =>\n\t\t\t\tfloatTwo(s.xOffset + i * s.unitWidth)\n\t\t\t)\n\t\t};\n\t}\n\n\tcalcYAxisParameters(dataValues, withMinimum = 'false') {\n\t\tconst yPts = calcChartIntervals(dataValues, withMinimum);\n\t\tconst scaleMultiplier = this.height / getValueRange(yPts);\n\t\tconst intervalHeight = getIntervalSize(yPts) * scaleMultiplier;\n\t\tconst zeroLine = this.height - (getZeroIndex(yPts) * intervalHeight);\n\n\t\tthis.state.yAxis = {\n\t\t\tlabels: yPts,\n\t\t\tpositions: yPts.map(d => zeroLine - d * scaleMultiplier),\n\t\t\tscaleMultiplier: scaleMultiplier,\n\t\t\tzeroLine: zeroLine,\n\t\t};\n\n\t\t// Dependent if above changes\n\t\tthis.calcDatasetPoints();\n\t\tthis.calcYExtremes();\n\t\tthis.calcYRegions();\n\t}\n\n\tcalcDatasetPoints() {\n\t\tlet s = this.state;\n\t\tlet scaleAll = values => values.map(val => scale(val, s.yAxis));\n\n\t\ts.datasets = this.data.datasets.map((d, i) => {\n\t\t\tlet values = d.values;\n\t\t\tlet cumulativeYs = d.cumulativeYs || [];\n\t\t\treturn {\n\t\t\t\tname: d.name && d.name.replace(/<|>|&/g, (char) => char == '&' ? '&amp;' : char == '<' ? '&lt;' : '&gt;'),\n\t\t\t\tindex: i,\n\t\t\t\tchartType: d.chartType,\n\n\t\t\t\tvalues: values,\n\t\t\t\tyPositions: scaleAll(values),\n\n\t\t\t\tcumulativeYs: cumulativeYs,\n\t\t\t\tcumulativeYPos: scaleAll(cumulativeYs),\n\t\t\t};\n\t\t});\n\t}\n\n\tcalcYExtremes() {\n\t\tlet s = this.state;\n\t\tif(this.barOptions.stacked) {\n\t\t\ts.yExtremes = s.datasets[s.datasets.length - 1].cumulativeYPos;\n\t\t\treturn;\n\t\t}\n\t\ts.yExtremes = new Array(s.datasetLength).fill(9999);\n\t\ts.datasets.map(d => {\n\t\t\td.yPositions.map((pos, j) => {\n\t\t\t\tif(pos < s.yExtremes[j]) {\n\t\t\t\t\ts.yExtremes[j] = pos;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tcalcYRegions() {\n\t\tlet s = this.state;\n\t\tif(this.data.yMarkers) {\n\t\t\tthis.state.yMarkers = this.data.yMarkers.map(d => {\n\t\t\t\td.position = scale(d.value, s.yAxis);\n\t\t\t\tif(!d.options) d.options = {};\n\t\t\t\t// if(!d.label.includes(':')) {\n\t\t\t\t// \td.label += ': ' + d.value;\n\t\t\t\t// }\n\t\t\t\treturn d;\n\t\t\t});\n\t\t}\n\t\tif(this.data.yRegions) {\n\t\t\tthis.state.yRegions = this.data.yRegions.map(d => {\n\t\t\t\td.startPos = scale(d.start, s.yAxis);\n\t\t\t\td.endPos = scale(d.end, s.yAxis);\n\t\t\t\tif(!d.options) d.options = {};\n\t\t\t\treturn d;\n\t\t\t});\n\t\t}\n\t}\n\n\tgetAllYValues() {\n\t\tlet key = 'values';\n\n\t\tif(this.barOptions.stacked) {\n\t\t\tkey = 'cumulativeYs';\n\t\t\tlet cumulative = new Array(this.state.datasetLength).fill(0);\n\t\t\tthis.data.datasets.map((d, i) => {\n\t\t\t\tlet values = this.data.datasets[i].values;\n\t\t\t\td[key] = cumulative = cumulative.map((c, i) => c + values[i]);\n\t\t\t});\n\t\t}\n\n\t\tlet allValueLists = this.data.datasets.map(d => d[key]);\n\t\tif(this.data.yMarkers) {\n\t\t\tallValueLists.push(this.data.yMarkers.map(d => d.value));\n\t\t}\n\t\tif(this.data.yRegions) {\n\t\t\tthis.data.yRegions.map(d => {\n\t\t\t\tallValueLists.push([d.end, d.start]);\n\t\t\t});\n\t\t}\n\n\t\treturn [].concat(...allValueLists);\n\t}\n\n\tsetupComponents() {\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'yAxis',\n\t\t\t\t{\n\t\t\t\t\tmode: this.config.yAxisMode,\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tshortenNumbers: this.config.shortenYAxisNumbers\n\t\t\t\t\t// pos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yAxis;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t'xAxis',\n\t\t\t\t{\n\t\t\t\t\tmode: this.config.xAxisMode,\n\t\t\t\t\theight: this.height,\n\t\t\t\t\t// pos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\ts.xAxis.calcLabels = getShortenedLabels(this.width,\n\t\t\t\t\t\ts.xAxis.labels, this.config.xIsSeries);\n\n\t\t\t\t\treturn s.xAxis;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\n\t\t\t[\n\t\t\t\t'yRegions',\n\t\t\t\t{\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tpos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yRegions;\n\t\t\t\t}.bind(this)\n\t\t\t],\n\t\t];\n\n\t\tlet barDatasets = this.state.datasets.filter(d => d.chartType === 'bar');\n\t\tlet lineDatasets = this.state.datasets.filter(d => d.chartType === 'line');\n\n\t\tlet barsConfigs = barDatasets.map(d => {\n\t\t\tlet index = d.index;\n\t\t\treturn [\n\t\t\t\t'barGraph' + '-' + d.index,\n\t\t\t\t{\n\t\t\t\t\tindex: index,\n\t\t\t\t\tcolor: this.colors[index],\n\t\t\t\t\tstacked: this.barOptions.stacked,\n\n\t\t\t\t\t// same for all datasets\n\t\t\t\t\tvaluesOverPoints: this.config.valuesOverPoints,\n\t\t\t\t\tminHeight: this.height * MIN_BAR_PERCENT_HEIGHT,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\tlet d = s.datasets[index];\n\t\t\t\t\tlet stacked = this.barOptions.stacked;\n\n\t\t\t\t\tlet spaceRatio = this.barOptions.spaceRatio || BAR_CHART_SPACE_RATIO;\n\t\t\t\t\tlet barsWidth = s.unitWidth * (1 - spaceRatio);\n\t\t\t\t\tlet barWidth = barsWidth/(stacked ? 1 : barDatasets.length);\n\n\t\t\t\t\tlet xPositions = s.xAxis.positions.map(x => x - barsWidth/2);\n\t\t\t\t\tif(!stacked) {\n\t\t\t\t\t\txPositions = xPositions.map(p => p + barWidth * index);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet labels = new Array(s.datasetLength).fill('');\n\t\t\t\t\tif(this.config.valuesOverPoints) {\n\t\t\t\t\t\tif(stacked && d.index === s.datasets.length - 1) {\n\t\t\t\t\t\t\tlabels = d.cumulativeYs;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlabels = d.values;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet offsets = new Array(s.datasetLength).fill(0);\n\t\t\t\t\tif(stacked) {\n\t\t\t\t\t\toffsets = d.yPositions.map((y, j) => y - d.cumulativeYPos[j]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: xPositions,\n\t\t\t\t\t\tyPositions: d.yPositions,\n\t\t\t\t\t\toffsets: offsets,\n\t\t\t\t\t\t// values: d.values,\n\t\t\t\t\t\tlabels: labels,\n\n\t\t\t\t\t\tzeroLine: s.yAxis.zeroLine,\n\t\t\t\t\t\tbarsWidth: barsWidth,\n\t\t\t\t\t\tbarWidth: barWidth,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t];\n\t\t});\n\n\t\tlet lineConfigs = lineDatasets.map(d => {\n\t\t\tlet index = d.index;\n\t\t\treturn [\n\t\t\t\t'lineGraph' + '-' + d.index,\n\t\t\t\t{\n\t\t\t\t\tindex: index,\n\t\t\t\t\tcolor: this.colors[index],\n\t\t\t\t\tsvgDefs: this.svgDefs,\n\t\t\t\t\theatline: this.lineOptions.heatline,\n\t\t\t\t\tregionFill: this.lineOptions.regionFill,\n\t\t\t\t\tspline: this.lineOptions.spline,\n\t\t\t\t\thideDots: this.lineOptions.hideDots,\n\t\t\t\t\thideLine: this.lineOptions.hideLine,\n\n\t\t\t\t\t// same for all datasets\n\t\t\t\t\tvaluesOverPoints: this.config.valuesOverPoints,\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\tlet s = this.state;\n\t\t\t\t\tlet d = s.datasets[index];\n\t\t\t\t\tlet minLine = s.yAxis.positions[0] < s.yAxis.zeroLine\n\t\t\t\t\t\t? s.yAxis.positions[0] : s.yAxis.zeroLine;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\txPositions: s.xAxis.positions,\n\t\t\t\t\t\tyPositions: d.yPositions,\n\n\t\t\t\t\t\tvalues: d.values,\n\n\t\t\t\t\t\tzeroLine: minLine,\n\t\t\t\t\t\tradius: this.lineOptions.dotSize || LINE_CHART_DOT_SIZE,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t];\n\t\t});\n\n\t\tlet markerConfigs = [\n\t\t\t[\n\t\t\t\t'yMarkers',\n\t\t\t\t{\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\tpos: 'right'\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\treturn this.state.yMarkers;\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tcomponentConfigs = componentConfigs.concat(barsConfigs, lineConfigs, markerConfigs);\n\n\t\tlet optionals = ['yMarkers', 'yRegions'];\n\t\tthis.dataUnitComponents = [];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.filter(args => !optionals.includes(args[0]) || this.state[args[0]])\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\tif(args[0].includes('lineGraph') || args[0].includes('barGraph')) {\n\t\t\t\t\tthis.dataUnitComponents.push(component);\n\t\t\t\t}\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tmakeDataByIndex() {\n\t\tthis.dataByIndex = {};\n\n\t\tlet s = this.state;\n\t\tlet formatX = this.config.formatTooltipX;\n\t\tlet formatY = this.config.formatTooltipY;\n\t\tlet titles = s.xAxis.labels;\n\n\t\ttitles.map((label, index) => {\n\t\t\tlet values = this.state.datasets.map((set, i) => {\n\t\t\t\tlet value = set.values[index];\n\t\t\t\treturn {\n\t\t\t\t\ttitle: set.name,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tyPos: set.yPositions[index],\n\t\t\t\t\tcolor: this.colors[i],\n\t\t\t\t\tformatted: formatY ? formatY(value) : value,\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tthis.dataByIndex[index] = {\n\t\t\t\tlabel: label,\n\t\t\t\tformattedLabel: formatX ? formatX(label) : label,\n\t\t\t\txPos: s.xAxis.positions[index],\n\t\t\t\tvalues: values,\n\t\t\t\tyExtreme: s.yExtremes[index],\n\t\t\t};\n\t\t});\n\t}\n\n\tbindTooltip() {\n\t\t// NOTE: could be in tooltip itself, as it is a given functionality for its parent\n\t\tthis.container.addEventListener('mousemove', (e) => {\n\t\t\tlet m = this.measures;\n\t\t\tlet o = getOffset(this.container);\n\t\t\tlet relX = e.pageX - o.left - getLeftOffset(m);\n\t\t\tlet relY = e.pageY - o.top;\n\n\t\t\tif(relY < this.height + getTopOffset(m)\n\t\t\t\t&& relY >  getTopOffset(m)) {\n\t\t\t\tthis.mapTooltipXPosition(relX);\n\t\t\t} else {\n\t\t\t\tthis.tip.hideTip();\n\t\t\t}\n\t\t});\n\t}\n\n\tmapTooltipXPosition(relX) {\n\t\tlet s = this.state;\n\t\tif(!s.yExtremes) return;\n\n\t\tlet index = getClosestInArray(relX, s.xAxis.positions, true);\n\t\tif (index >= 0) {\n\t\t\tlet dbi = this.dataByIndex[index];\n\n\t\t\tthis.tip.setValues(\n\t\t\t\tdbi.xPos + this.tip.offset.x,\n\t\t\t\tdbi.yExtreme + this.tip.offset.y,\n\t\t\t\t{name: dbi.formattedLabel, value: ''},\n\t\t\t\tdbi.values,\n\t\t\t\tindex\n\t\t\t);\n\n\t\t\tthis.tip.showTip();\n\t\t}\n\t}\n\n\trenderLegend() {\n\t\tlet s = this.data;\n\t\tif(s.datasets.length > 1) {\n\t\t\tthis.legendArea.textContent = '';\n\t\t\ts.datasets.map((d, i) => {\n\t\t\t\tlet barWidth = AXIS_LEGEND_BAR_SIZE;\n\t\t\t\t// let rightEndPoint = this.baseWidth - this.measures.margins.left - this.measures.margins.right;\n\t\t\t\t// let multiplier = s.datasets.length - i;\n\t\t\t\tlet rect = legendBar(\n\t\t\t\t\t// rightEndPoint - multiplier * barWidth,\t// To right align\n\t\t\t\t\tbarWidth * i,\n\t\t\t\t\t'0',\n\t\t\t\t\tbarWidth,\n\t\t\t\t\tthis.colors[i],\n\t\t\t\t\td.name,\n\t\t\t\t\tthis.config.truncateLegends);\n\t\t\t\tthis.legendArea.appendChild(rect);\n\t\t\t});\n\t\t}\n\t}\n\n\n\n\t// Overlay\n\tmakeOverlay() {\n\t\tif(this.init) {\n\t\t\tthis.init = 0;\n\t\t\treturn;\n\t\t}\n\t\tif(this.overlayGuides) {\n\t\t\tthis.overlayGuides.forEach(g => {\n\t\t\t\tlet o = g.overlay;\n\t\t\t\to.parentNode.removeChild(o);\n\t\t\t});\n\t\t}\n\n\t\tthis.overlayGuides = this.dataUnitComponents.map(c => {\n\t\t\treturn {\n\t\t\t\ttype: c.unitType,\n\t\t\t\toverlay: undefined,\n\t\t\t\tunits: c.units,\n\t\t\t};\n\t\t});\n\n\t\tif(this.state.currentIndex === undefined) {\n\t\t\tthis.state.currentIndex = this.state.datasetLength - 1;\n\t\t}\n\n\t\t// Render overlays\n\t\tthis.overlayGuides.map(d => {\n\t\t\tlet currentUnit = d.units[this.state.currentIndex];\n\n\t\t\td.overlay = makeOverlay[d.type](currentUnit);\n\t\t\tthis.drawArea.appendChild(d.overlay);\n\t\t});\n\t}\n\n\tupdateOverlayGuides() {\n\t\tif(this.overlayGuides) {\n\t\t\tthis.overlayGuides.forEach(g => {\n\t\t\t\tlet o = g.overlay;\n\t\t\t\to.parentNode.removeChild(o);\n\t\t\t});\n\t\t}\n\t}\n\n\tbindOverlay() {\n\t\tthis.parent.addEventListener('data-select', () => {\n\t\t\tthis.updateOverlay();\n\t\t});\n\t}\n\n\tbindUnits() {\n\t\tthis.dataUnitComponents.map(c => {\n\t\t\tc.units.map(unit => {\n\t\t\t\tunit.addEventListener('click', () => {\n\t\t\t\t\tlet index = unit.getAttribute('data-point-index');\n\t\t\t\t\tthis.setCurrentDataPoint(index);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// Note: Doesn't work as tooltip is absolutely positioned\n\t\tthis.tip.container.addEventListener('click', () => {\n\t\t\tlet index = this.tip.container.getAttribute('data-point-index');\n\t\t\tthis.setCurrentDataPoint(index);\n\t\t});\n\t}\n\n\tupdateOverlay() {\n\t\tthis.overlayGuides.map(d => {\n\t\t\tlet currentUnit = d.units[this.state.currentIndex];\n\t\t\tupdateOverlay[d.type](currentUnit, d.overlay);\n\t\t});\n\t}\n\n\tonLeftArrow() {\n\t\tthis.setCurrentDataPoint(this.state.currentIndex - 1);\n\t}\n\n\tonRightArrow() {\n\t\tthis.setCurrentDataPoint(this.state.currentIndex + 1);\n\t}\n\n\tgetDataPoint(index=this.state.currentIndex) {\n\t\tlet s = this.state;\n\t\tlet data_point = {\n\t\t\tindex: index,\n\t\t\tlabel: s.xAxis.labels[index],\n\t\t\tvalues: s.datasets.map(d => d.values[index])\n\t\t};\n\t\treturn data_point;\n\t}\n\n\tsetCurrentDataPoint(index) {\n\t\tlet s = this.state;\n\t\tindex = parseInt(index);\n\t\tif(index < 0) index = 0;\n\t\tif(index >= s.xAxis.labels.length) index = s.xAxis.labels.length - 1;\n\t\tif(index === s.currentIndex) return;\n\t\ts.currentIndex = index;\n\t\tfire(this.parent, \"data-select\", this.getDataPoint());\n\t}\n\n\n\n\t// API\n\taddDataPoint(label, datasetValues, index=this.state.datasetLength) {\n\t\tsuper.addDataPoint(label, datasetValues, index);\n\t\tthis.data.labels.splice(index, 0, label);\n\t\tthis.data.datasets.map((d, i) => {\n\t\t\td.values.splice(index, 0, datasetValues[i]);\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\tremoveDataPoint(index = this.state.datasetLength-1) {\n\t\tif (this.data.labels.length <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tsuper.removeDataPoint(index);\n\t\tthis.data.labels.splice(index, 1);\n\t\tthis.data.datasets.map(d => {\n\t\t\td.values.splice(index, 1);\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\tupdateDataset(datasetValues, index=0) {\n\t\tthis.data.datasets[index].values = datasetValues;\n\t\tthis.update(this.data);\n\t}\n\t// addDataset(dataset, index) {}\n\t// removeDataset(index = 0) {}\n\n\tupdateDatasets(datasets) {\n\t\tthis.data.datasets.map((d, i) => {\n\t\t\tif(datasets[i]) {\n\t\t\t\td.values = datasets[i];\n\t\t\t}\n\t\t});\n\t\tthis.update(this.data);\n\t}\n\n\t// updateDataPoint(dataPoint, index = 0) {}\n\t// addDataPoint(dataPoint, index = 0) {}\n\t// removeDataPoint(index = 0) {}\n}\n", "import AggregationChart from './AggregationChart';\nimport { getComponent } from '../objects/ChartComponents';\nimport { getOffset } from '../utils/dom';\nimport { getPositionByAngle } from '../utils/helpers';\nimport { makeArcStrokePathStr, makeStrokeCircleStr } from '../utils/draw';\nimport { lightenDarkenColor } from '../utils/colors';\nimport { transform } from '../utils/animation';\nimport { FULL_ANGLE } from '../utils/constants';\n\nexport default class DonutChart extends AggregationChart {\n\tconstructor(parent, args) {\n\t\tsuper(parent, args);\n\t\tthis.type = 'donut';\n\t\tthis.initTimeout = 0;\n\t\tthis.init = 1;\n\n\t\tthis.setup();\n\t}\n\n\tconfigure(args) {\n\t\tsuper.configure(args);\n\t\tthis.mouseMove = this.mouseMove.bind(this);\n\t\tthis.mouseLeave = this.mouseLeave.bind(this);\n\n\t\tthis.hoverRadio = args.hoverRadio || 0.1;\n\t\tthis.config.startAngle = args.startAngle || 0;\n\n\t\tthis.clockWise = args.clockWise || false;\n\t\tthis.strokeWidth = args.strokeWidth || 30;\n\t}\n\n\tcalc() {\n\t\tsuper.calc();\n\t\tlet s = this.state;\n\t\tthis.radius =\n\t\t\tthis.height > this.width\n\t\t\t\t? this.center.x - this.strokeWidth / 2\n\t\t\t\t: this.center.y - this.strokeWidth / 2;\n\n\t\tconst { radius, clockWise } = this;\n\n\t\tconst prevSlicesProperties = s.slicesProperties || [];\n\t\ts.sliceStrings = [];\n\t\ts.slicesProperties = [];\n\t\tlet curAngle = 180 - this.config.startAngle;\n\n\t\ts.sliceTotals.map((total, i) => {\n\t\t\tconst startAngle = curAngle;\n\t\t\tconst originDiffAngle = (total / s.grandTotal) * FULL_ANGLE;\n\t\t\tconst largeArc = originDiffAngle > 180 ? 1: 0;\n\t\t\tconst diffAngle = clockWise ? -originDiffAngle : originDiffAngle;\n\t\t\tconst endAngle = curAngle = curAngle + diffAngle;\n\t\t\tconst startPosition = getPositionByAngle(startAngle, radius);\n\t\t\tconst endPosition = getPositionByAngle(endAngle, radius);\n\n\t\t\tconst prevProperty = this.init && prevSlicesProperties[i];\n\n\t\t\tlet curStart,curEnd;\n\t\t\tif(this.init) {\n\t\t\t\tcurStart = prevProperty ? prevProperty.startPosition : startPosition;\n\t\t\t\tcurEnd = prevProperty ? prevProperty.endPosition : startPosition;\n\t\t\t} else {\n\t\t\t\tcurStart = startPosition;\n\t\t\t\tcurEnd = endPosition;\n\t\t\t}\n\t\t\tconst curPath =\n\t\t\t\toriginDiffAngle === 360\n\t\t\t\t\t? makeStrokeCircleStr(curStart, curEnd, this.center, this.radius, this.clockWise, largeArc)\n\t\t\t\t\t: makeArcStrokePathStr(curStart, curEnd, this.center, this.radius, this.clockWise, largeArc);\n\n\t\t\ts.sliceStrings.push(curPath);\n\t\t\ts.slicesProperties.push({\n\t\t\t\tstartPosition,\n\t\t\t\tendPosition,\n\t\t\t\tvalue: total,\n\t\t\t\ttotal: s.grandTotal,\n\t\t\t\tstartAngle,\n\t\t\t\tendAngle,\n\t\t\t\tangle: diffAngle\n\t\t\t});\n\n\t\t});\n\t\tthis.init = 0;\n\t}\n\n\tsetupComponents() {\n\t\tlet s = this.state;\n\n\t\tlet componentConfigs = [\n\t\t\t[\n\t\t\t\t'donutSlices',\n\t\t\t\t{ },\n\t\t\t\tfunction() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsliceStrings: s.sliceStrings,\n\t\t\t\t\t\tcolors: this.colors,\n\t\t\t\t\t\tstrokeWidth: this.strokeWidth,\n\t\t\t\t\t};\n\t\t\t\t}.bind(this)\n\t\t\t]\n\t\t];\n\n\t\tthis.components = new Map(componentConfigs\n\t\t\t.map(args => {\n\t\t\t\tlet component = getComponent(...args);\n\t\t\t\treturn [args[0], component];\n\t\t\t}));\n\t}\n\n\tcalTranslateByAngle(property){\n\t\tconst{ radius, hoverRadio } = this;\n\t\tconst position = getPositionByAngle(property.startAngle+(property.angle / 2),radius);\n\t\treturn `translate3d(${(position.x) * hoverRadio}px,${(position.y) * hoverRadio}px,0)`;\n\t}\n\n\thoverSlice(path,i,flag,e){\n\t\tif(!path) return;\n\t\tconst color = this.colors[i];\n\t\tif(flag) {\n\t\t\ttransform(path, this.calTranslateByAngle(this.state.slicesProperties[i]));\n\t\t\tpath.style.stroke = lightenDarkenColor(color, 50);\n\t\t\tlet g_off = getOffset(this.svg);\n\t\t\tlet x = e.pageX - g_off.left + 10;\n\t\t\tlet y = e.pageY - g_off.top - 10;\n\t\t\tlet title = (this.formatted_labels && this.formatted_labels.length > 0\n\t\t\t\t? this.formatted_labels[i] : this.state.labels[i]) + ': ';\n\t\t\tlet percent = (this.state.sliceTotals[i] * 100 / this.state.grandTotal).toFixed(1);\n\t\t\tthis.tip.setValues(x, y, {name: title, value: percent + \"%\"});\n\t\t\tthis.tip.showTip();\n\t\t} else {\n\t\t\ttransform(path,'translate3d(0,0,0)');\n\t\t\tthis.tip.hideTip();\n\t\t\tpath.style.stroke = color;\n\t\t}\n\t}\n\n\tbindTooltip() {\n\t\tthis.container.addEventListener('mousemove', this.mouseMove);\n\t\tthis.container.addEventListener('mouseleave', this.mouseLeave);\n\t}\n\n\tmouseMove(e){\n\t\tconst target = e.target;\n\t\tlet slices = this.components.get('donutSlices').store;\n\t\tlet prevIndex = this.curActiveSliceIndex;\n\t\tlet prevAcitve = this.curActiveSlice;\n\t\tif(slices.includes(target)) {\n\t\t\tlet i = slices.indexOf(target);\n\t\t\tthis.hoverSlice(prevAcitve, prevIndex,false);\n\t\t\tthis.curActiveSlice = target;\n\t\t\tthis.curActiveSliceIndex = i;\n\t\t\tthis.hoverSlice(target, i, true, e);\n\t\t} else {\n\t\t\tthis.mouseLeave();\n\t\t}\n\t}\n\n\tmouseLeave(){\n\t\tthis.hoverSlice(this.curActiveSlice,this.curActiveSliceIndex,false);\n\t}\n}\n", null, "import Base from './components/base.svelte';\n\n\nexport default Base;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAYC,IAAKC,GAAAA;AAAAA,aACnBA,MAAiBA,IAAAA,CAAAA;AACtB,MAAIC,IAAWD,EAAIC;AAEnB,MAAKF,MAA2B,eAAA,OAAbG,UAAnB;AAEA,QAAIC,IAAOD,SAASC,QAAQD,SAASE,qBAAqB,MAAA,EAAQ,CAAA,GAC9DC,IAAQH,SAASI,cAAc,OAAA;AACnCD,MAAME,OAAO,YAEI,UAAbN,KACEE,EAAKK,aACPL,EAAKM,aAAaJ,GAAOF,EAAKK,UAAAA,IAKhCL,EAAKO,YAAYL,CAAAA,GAGfA,EAAMM,aACRN,EAAMM,WAAWC,UAAUb,KAE3BM,EAAMK,YAAYR,SAASW,eAAed,EAAAA,CAAAA;EAAAA;AAAAA;ACvB9C,SAAgBe,EAAEC,IAAMC,GAAAA;AAAAA,SACA,YAAA,OAATD,MAAoBC,KAAOd,UAAUe,cAAcF,EAAAA,IAAQA,MAAQ;AAAA;AA4ClF,SAAgBG,UAAUC,IAAAA;AAAAA,MACrBC,IAAOD,GAAQE,sBAAAA;AAAAA,SAAAA,EAAAA,KAKbD,EAAKE,OAAOpB,SAASqB,gBAAgBC,aAAatB,SAASuB,KAAKD,YAAAA,MAC/DJ,EAAKM,QAAQxB,SAASqB,gBAAgBI,cAAczB,SAASuB,KAAKE,YAAAA;AAAAA;AAO1E,SAAgBC,SAASC,IAAAA;AAAAA,SACI,SAApBA,GAAGC;AAAAA;AAGZ,SAAgBC,oBAAoBF,IAAAA;AAAAA,MAE/BT,IAAOS,GAAGR,sBAAAA;AAAAA,SAGbD,EAAKE,OAAO,KACNF,EAAKM,QAAQ,KACbN,EAAKY,WAAWC,OAAOC,eAAehC,SAASqB,gBAAgBY,iBAAAA,EAC1DC,UAAUH,OAAOI,cAAcnC,SAASqB,gBAAgBe;AAAAA;AAIrE,SAAgBC,uBAAuBpB,IAAAA;AAAAA,MAClCqB,IAASP,OAAOQ,iBAAiBtB,EAAAA,GACjCuB,IAAUC,WAAWH,EAAOI,WAAAA,IAC/BD,WAAWH,EAAOK,YAAAA;AAAAA,SAEZ1B,GAAQmB,cAAcI;AAAAA;AA2B9B,SAAgBI,KAAKC,IAAQxC,GAAMyC,GAAAA;AAAAA,MAC9BC,IAAM/C,SAASgD,YAAY,YAAA;AAAA,IAE3BC,UAAU5C,GAAAA,MAAM,IAAM;AAAA,WAEjB6C,KAAKJ;AAAAA,MACTI,CAAAA,IAAKJ,EAAWI,CAAAA;AAAAA,SAGdL,GAAOM,cAAcJ,CAAAA;AAAAA;AC7E7B,SAAgBK,aAAaC,IAAAA;AAAAA,SACrBA,GAAEC,cAAcD,GAAEE,QAAQnC,MAAMiC,GAAEG,SAASpC;AAAAA;AAGnD,SAAgBqC,cAAcJ,IAAAA;AAAAA,SACtBA,GAAEE,QAAQ/B,OAAO6B,GAAEG,SAAShC;AAAAA;AAGpC,SAAgBkC,eAAeL,IAAAA;AAAAA,SACPA,GAAEE,QAAQnC,MAAMiC,GAAEE,QAAQzB,SAC9CuB,GAAEG,SAASpC,MAAMiC,GAAEG,SAAS1B,SAC5BuB,GAAEC,cAAcD,GAAEM;AAAAA;AAItB,SAAgBC,cAAcP,IAAAA;AAAAA,SACPA,GAAEE,QAAQ/B,OAAO6B,GAAEE,QAAQrB,QAC9CmB,GAAEG,SAAShC,OAAO6B,GAAEG,SAAStB;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AClDjC,SAAgB2B,SAASC,IAAAA;AAAAA,SACjBrB,WAAWqB,GAAEC,QAAQ,CAAA,CAAA;AAAA;AAyC7B,SAAgBC,UAAUC,IAAOC,GAAOjD,GAAAA;AAAAA,MAASkD,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA;AAC5ClD,QAAAA,IACOkD,IAAQF,GAAM,CAAA,IAAKA,GAAMA,GAAMG,SAAS,CAAA;AAAA,MAE/CC,IAAc,IAAIC,MAAMC,KAAKC,IAAIN,CAAAA,CAAAA,EAAQO,KAAKxD,CAAAA;AAAAA,SAAAA,KAC1CkD,IAAQE,EAAYK,OAAOT,EAAAA,IAASA,GAAMS,OAAOL,CAAAA;AAAAA;AAS1D,SAAgBM,eAAeC,IAAQC,GAAAA;AAAAA,UAC9BD,KAAO,IAAIR,SAASS;AAAAA;AAyB7B,SAAgBC,mBAAmBC,IAAOC,GAAAA;AAAAA,SAAAA,EAAAA,GAErCT,KAAKU,IAAIF,KAAQG,WAAAA,IAAeF,GAAAA,GAChCT,KAAKY,IAAIJ,KAAQG,WAAAA,IAAeF,EAAAA;AAAAA;AASrC,SAAgBI,cAAcC,IAAAA;AAAAA,MAAWC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA;AAAAA,SAAAA,CACpCC,OAAOC,MAAMH,EAAAA,MAAAA,WACRA,OAAAA,CAAAA,CACCE,OAAOE,SAASJ,EAAAA,KAAAA,EACjBC,KAAeD,KAAY;AAAA;AAQrC,SAAgBK,MAAM5B,IAAAA;AAAAA,SAGdyB,OAAOhB,KAAKmB,MAAM5B,KAAI,IAAA,IAAQ,KAAA;AAAA;AAOrC,SAAgB6B,UAAUN,IAAAA;AAAAA,MACtBO,IAAAA,QAAQC,IAAAA,QAAOC,IAAAA;AAAAA,MAEfT,cAAqBU;AAAAA,WAChB,IAAIA,KAAKV,GAAUW,QAAAA,CAAAA;AAAAA,MAGH,cAAA,WAAdX,KAAAA,cAAAA,UAAAA,EAAAA,MAAwC,SAAdA;AAAAA,WAC5BA;AAAAA,MAGAf,MAAM2B,QAAQZ,EAAAA,IAAAA,CAAAA,IAAAA,CAAAA;AAAAA,OAElBS,KAAOT;AAAAA,QACFA,GAAUS,CAAAA,GAAAA,EAEXA,CAAAA,IAAOH,UAAUE,CAAAA;AAAAA,SAGnBD;AAAAA;AAAAA,SC3IQM,qBAAqBC,IAAMC,GAAAA;AAAAA,MACtCC,IAAAA,QAAQC,IAAAA;AAAAA,SACRH,MAAQC,KAAAA,IACFA,IAAWD,IAAAA,IAChBA,OAAAA,IAEKA,KAAOC,GAAAA,IACZA,IAAAA,CAGGC,GAAQC,CAAAA;AAAAA;AAGjB,SAAgBC,qBAAqBC,IAAQC,GAAAA;AAAAA,MAC5CC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAaD,EAAOrC,SAASoC,GAAOpC;AAAAA,SAGjCsC,IAAa,IAAAC,KACN3C,UAAUwC,IAAQE,CAAAA,IAAAA,IAElB1C,UAAUyC,GAAQC,CAAAA,GAAAA,CAEpBF,IAAQC,CAAAA;AAAAA;AAGjB,SAAgBG,eAAeC,IAAKC,GAAAA;AAAAA,MAC9BD;AAAAA,WAGDA,GAAIzC,SAAS0C,IACTD,GAAIE,MAAM,GAAGD,IAAI,CAAA,IAAK,QAEtBD;AAAAA;AAIT,SAAgBG,mBAAmBC,IAAAA;AAAAA,MAC9BC,IAAAA;AAAAA,MACiB,YAAA,OAAVD;AAAoBC,QAASD;WACd,YAAA,OAAVA,OAAAA,IACN1B,OAAO0B,EAAAA,GACZ1B,OAAOC,MAAM0B,CAAAA;AAAS,WAAOD;AAAAA,MAI9BE,IAAI5C,KAAK6C,MAAM7C,KAAK8C,MAAM9C,KAAKC,IAAI0C,CAAAA,CAAAA,CAAAA;AAAAA,MACnCC,KAAK;AAAG,WAAOD;AAAAA,MACfI,IAAI/C,KAAK6C,MAAMD,IAAI,CAAA,GACnBI,IAAahD,KAAKiD,IAAI,IAAIL,IAAQ,IAAJG,CAAAA,IAAAA,EAAWJ,IAAS3C,KAAKiD,IAAI,IAAIL,CAAAA,GAAIpD,QAAQ,CAAA;AAAA,SAGxEQ,KAAKmB,MAAgB,MAAV6B,CAAAA,IAAe,MAAM,MAAA,CAAO,IAAI,KAAK,KAAK,KAAK,GAAA,EAAKD,CAAAA;AAAAA;AAIvE,SAAgBG,wBAAwBC,IAAOC,GAAAA;AAAAA,WAE1CC,IAAAA,CAAAA,GACIC,IAAE,GAAEA,IAAEH,GAAMtD,QAAOyD;AAAAA,MACnBC,KAAAA,CAAMJ,GAAMG,CAAAA,GAAIF,EAAME,CAAAA,CAAAA,CAAAA;AAAAA,MAI1BE,IAAO,SAACC,IAAQC,IAAAA;AAAAA,QACfC,KAAUD,GAAO,CAAA,IAAKD,GAAO,CAAA,GAC7BG,KAAUF,GAAO,CAAA,IAAKD,GAAO,CAAA;AAAA,WAAA,EAAA,QAExBzD,KAAK6D,KAAK7D,KAAKiD,IAAIU,IAAS,CAAA,IAAK3D,KAAKiD,IAAIW,IAAS,CAAA,CAAA,GAAA,OACpD5D,KAAK8D,MAAMF,IAASD,EAAAA,EAAAA;EAAAA,GAIzBI,IAAe,SAACC,IAASC,IAAUC,IAAMC,IAAAA;AAAAA,QAGxCC,KAAIZ,EAFAS,MAAYD,IACZE,MAAQF,EAAAA,GAEZxD,IAAQ4D,GAAE5D,SAAS2D,KAAUnE,KAAKqE,KAAK,IACvCxE,IAfW,MAeFuE,GAAEvE;AAAAA,WAAAA,CACPmE,GAAQ,CAAA,IAAKhE,KAAKY,IAAIJ,CAAAA,IAASX,GAC/BmE,GAAQ,CAAA,IAAKhE,KAAKU,IAAIF,CAAAA,IAASX,CAAAA;EAAAA;AAAAA,SAUzB,SAACwD,IAAQiB,IAAAA;AAAAA,WAChBjB,GAAOkB,OAAO,SAACC,IAAKC,IAAOnB,IAAGoB,IAAAA;AAAAA,aAAY,MAANpB,KACrCmB,GAAM,CAAA,IAAA,MAAMA,GAAM,CAAA,IAClBD,KAAAA,MAAOF,GAAQG,IAAOnB,IAAGoB,EAAAA;IAAAA,GAAM,EAAA;EAAA,EAGtBrB,GAZI,SAACoB,IAAOnB,IAAGoB,IAAAA;AAAAA,QAC1BC,KAAMZ,EAAaW,GAAEpB,KAAI,CAAA,GAAIoB,GAAEpB,KAAI,CAAA,GAAImB,EAAAA,GACvCG,KAAMb,EAAaU,IAAOC,GAAEpB,KAAI,CAAA,GAAIoB,GAAEpB,KAAI,CAAA,GAAA,IAAI;AAAA,WAAA,OACtCqB,GAAI,CAAA,IAAA,MAAMA,GAAI,CAAA,IAAA,MAAMC,GAAI,CAAA,IAAA,MAAMA,GAAI,CAAA,IAAA,MAAMH,GAAM,CAAA,IAAA,MAAMA,GAAM,CAAA;EAAA,CAAA;AAAA;ACvExE,SAASI,WAAWC,IAAAA;AAAAA,SACfA,KAAI,MAAY,MACXA,KAAI,IAAU,IAChBA;AAAAA;AAGR,SAAgBC,mBAAmBC,IAAOC,GAAAA;AAAAA,MACrCC,IAAMC,SAASH,EAAAA,GACfI,IAAAA;AACU,SAAVF,EAAI,CAAA,MAAA,IACDA,EAAI1C,MAAM,CAAA,GAAA,IAAA;AACL,MAER6C,IAAMC,SAASJ,GAAI,EAAA,GACnBJ,IAAID,YAAYQ,KAAO,MAAMJ,CAAAA,GAC7BM,IAAIV,YAAaQ,KAAO,IAAK,OAAUJ,CAAAA,GACvCO,IAAIX,YAAkB,MAANQ,KAAkBJ,CAAAA;AAAAA,UAC9BG,IAAS,MAAI,OAAOI,IAAKD,KAAK,IAAMT,KAAK,IAAKW,SAAS,EAAA;AAAA;AAGhE,SAAgBC,aAAarF,IAAAA;AAAAA,MAGxBsF,IAAS;AAAA,SADA,uCAECC,KAAKvF,EAAAA,KAAWsF,EAAOC,KAAKvF,EAAAA;AAAAA;AC7B3C,SAAShE,IAAEC,IAAMC,GAAAA;AAAAA,SACO,YAAA,OAATD,MAAoBC,KAAOd,UAAUe,cAAcF,EAAAA,IAAQA,MAAQ;AAAA;AAGlF,SAAgBuJ,UAAUC,IAAK1B,GAAAA;AAAAA,MAC1B1H,IAAUjB,SAASsK,gBAAgB,8BAA8BD,EAAAA;AAAAA,WAE5DxC,KAAKc,GAAG;AAAA,QACZ4B,IAAM5B,EAAEd,CAAAA;AAAAA,QAEF,aAANA;AAAAA,UACD0C,CAAAA,EAAK/J,YAAYS,CAAAA;aAEL,aAAN4G,GAAgB;AAAA,UACpB/H,IAAMc,IAAE2J,CAAAA;AAAAA,QACRC,WAAWjK,aAAaU,GAASnB,CAAAA,GAAAA,EAC7BU,YAAYV,CAAAA;IAAAA;AAEJ,mBAAN+H,IACQ,cAAA,WAAR0C,IAAAA,cAAAA,UAAAA,CAAAA,MAAAA,OACFE,KAAKF,CAAAA,EAAKG,IAAI,SAAA/D,IAAA;AAAA,UACZxG,MAAMwK,EAAAA,IAAQJ,EAAII,EAAAA;MAAAA,CAAAA,KAInB,gBAAN9C,MAAAA,IAAyB,UACnB,gBAANA,IAAAA,EACF,cAAyB0C,IAAAA,EAEjBK,aAAa/C,GAAG0C,CAAAA;EAAAA;AAAAA,SAKpBtJ;AAAAA;AAGR,SAAS4J,uBAAuBC,IAAYC,GAAAA;AAAAA,SACpCX,UAAU,kBAAA,EAAA,QACRU,IAAAA,IACJC,GAAAA,IACA,GAAA,IACA,GAAA,IACA,GAAA,IACA,EAAA,CAAA;AAAA;AAIN,SAASC,gBAAgBC,IAAUC,GAAQ3B,GAAO4B,GAAAA;AAAAA,SAC1Cf,UAAU,QAAA,EAAA,QACNa,IAAAA,OAAAA,iBACc1B,GAAAA,QACd2B,GAAAA,gBACMC,EAAAA,CAAAA;AAAAA;AAIlB,SAAgBC,iBAAiBC,IAAQC,GAAWC,GAAOlF,GAAAA;AAAAA,SACnD+D,UAAU,OAAA,EAAA,WACLkB,GAAAA,QACHD,IAAAA,OACDE,GAAAA,QACClF,EAAAA,CAAAA;AAAAA;AAIV,SAAgBmF,YAAYC,IAAAA;AAAAA,SACpBrB,UAAU,QAAA,EAAA,QACRqB,GAAAA,CAAAA;AAAAA;AAIV,SAAgBC,aAAaJ,IAAAA;AAAAA,MAAWK,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAU,IAAIN,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,QACjDO,IAAAA,EAAAA,WACQN,IAAAA,WACAK,EAAAA;AAAAA,SAETN,MAAQO,EAAKC,SAASR,IAClBjB,UAAU,KAAKwB,CAAAA;AAAAA;AAWvB,SAAgBE,SAASC,IAAAA;AAAAA,SACjB3B,UAAU,QAAA,EAAA,WAAA,UAAA,SAAA,KAAA,WAAA,UAAA,CAAA,IAAA,UAAA,CAAA,IAD0B,IAAA,GAGvC2B,IAAAA,QAAAA,EAAAA,QAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAHkD,QAAA,MAAA,UAAA,SAAA,KAAA,WAAA,UAAA,CAAA,IAAA,UAAA,CAAA,IAAa,QAAA,gBAAA,UAAA,SAAA,KAAA,WAAA,UAAA,CAAA,IAAA,UAAA,CAAA,IAAoB,EAAA,EAAA,CAAA;AAAA;AAYxF,SAAgBC,eAAeC,IAAeC,GAAaC,GAAQnH,GAAAA;AAAAA,MAAQoH,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAU,GAAGC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAS,GAC3FC,IAAyBH,EAAOI,IAAIN,GAAcM,GAAvCC,IAA0CL,EAAO7F,IAAI2F,GAAc3F,GAC9EmG,IAAqBN,EAAOI,IAAIL,EAAYK,GAAnCG,IAAsCP,EAAO7F,IAAI4F,EAAY5F;AAAAA,SAAAA,MAChE6F,EAAOI,IAAAA,MAAKJ,EAAO7F,IAAAA,UAC1BgG,IAAAA,MAAaE,IAAAA,WACZxH,IAAAA,MAAUA,IAAAA,QAAYqH,IAAAA,OAAYD,IAAY,IAAI,KAAA,SACpDK,IAAAA,MAAWC,IAAAA;AAAAA;AAGf,SAAgBC,cAAcV,IAAeC,GAAaC,GAAQnH,GAAAA;AAAAA,MAAQoH,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAU,GAAGC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAS,GAC1FC,IAAyBH,EAAOI,IAAIN,GAAcM,GAAvCC,IAA0CL,EAAO7F,IAAI2F,GAAc3F,GAC9EmG,IAA6BN,EAAOI,IAAIL,EAAYK,GAA3CK,IAAyD,IAAXT,EAAO7F,GAA7CoG,IAAoDP,EAAO7F,IAAI4F,EAAY5F;AAAAA,SAAAA,MACtF6F,EAAOI,IAAAA,MAAKJ,EAAO7F,IAAAA,UAC1BgG,IAAAA,MAAaE,IAAAA,WACZxH,IAAAA,MAAUA,IAAAA,QAAYqH,IAAAA,OAAYD,IAAY,IAAI,KAAA,SACpDK,IAAAA,MAAWG,IAAAA,YACVN,IAAAA,MAAaM,IAAAA,WACZ5H,IAAAA,MAAUA,IAAAA,QAAYqH,IAAAA,OAAYD,IAAY,IAAI,KAAA,SACpDK,IAAAA,MAAWC,IAAAA;AAAAA;AAGf,SAAgBG,qBAAqBZ,IAAeC,GAAaC,GAAQnH,GAAAA;AAAAA,MAAQoH,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAU,GAAGC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAS,GACjGC,IAAyBH,EAAOI,IAAIN,GAAcM,GAAvCC,IAA0CL,EAAO7F,IAAI2F,GAAc3F,GAC9EmG,IAAqBN,EAAOI,IAAIL,EAAYK,GAAnCG,IAAsCP,EAAO7F,IAAI4F,EAAY5F;AAAAA,SAAAA,MAEhEgG,IAAAA,MAAaE,IAAAA,WACnBxH,IAAAA,MAAUA,IAAAA,QAAYqH,IAAAA,OAAYD,IAAY,IAAI,KAAA,SACpDK,IAAAA,MAAWC;AAAAA;AAGf,SAAgBI,oBAAoBb,IAAeC,GAAaC,GAAQnH,GAAAA;AAAAA,MAAQoH,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAU,GAAGC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAS,GAChGC,IAAyBH,EAAOI,IAAIN,GAAcM,GAAvCC,IAA0CL,EAAO7F,IAAI2F,GAAc3F,GAC9EmG,IAA6BN,EAAOI,IAAIL,EAAYK,GAA3CK,IAAuD,IAAT5H,IAAawH,GAAnDE,IAA8DP,EAAO7F,IAAI2F,GAAc3F;AAAAA,SAAAA,MAElGgG,IAAAA,MAAaE,IAAAA,WACnBxH,IAAAA,MAAUA,IAAAA,QAAYqH,IAAAA,OAAYD,IAAY,IAAI,KAAA,SACpDK,IAAAA,MAAWG,IAAAA,UACVN,IAAAA,MAAaM,IAAAA,WACZ5H,IAAAA,MAAUA,IAAAA,QAAYqH,IAAAA,OAAYD,IAAY,IAAI,KAAA,SACpDK,IAAAA,MAAWC;AAAAA;AAGf,SAAgBK,aAAajC,IAAYvB,GAAAA;AAAAA,MAAOyD,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA,GAC3CjC,IAAY,wBAA6BxB,IAAQ,OAAMyD,IAAU,YAAY,YAC7EC,IAAcpC,uBAAuBC,IAAYC,CAAAA,GACjDmC,IAAAA,CAAa,GAAG,KAAK,GAAA;AAAA,SACtBF,MAAAA,IAAAA,CACW,KAAK,KAAK,CAAA,IAAA,gBAGRC,GAAa,MAAM1D,GAAO2D,EAAU,CAAA,CAAA,GAAA,gBACpCD,GAAa,OAAO1D,GAAO2D,EAAU,CAAA,CAAA,GAAA,gBACrCD,GAAa,QAAQ1D,GAAO2D,EAAU,CAAA,CAAA,GAE/CnC;AAAAA;AAGR,SAAgBoC,cAAcZ,IAAGjG,GAAGiF,GAAOlF,GAAAA;AAAAA,MAC1C+G,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAMC,8BAA8B5I,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAK;AAAA,SAkBlC2F,UAAU,QAAA,EAAA,WAfL,kBAAA,GACRmC,IAAAA,GACAjG,GAAAA,OACIiF,GAAAA,QACClF,GAAAA,MACF5B,GAAAA,QAAAA,EAAAA,QAEK6E,mBAAmB7E,GAAAA,GAAO,GAAA,oBAAA,SAGV4B,IAASkF,KAAAA,OAAUA,IAAAA,OAAUlF,GAAAA,gBACvC+G,EAAAA,EAAAA,CAAAA;AAAAA;AAOnB,SAAgBE,WAAWhC,IAAWiB,GAAGjG,GAAGiH,GAAMvI,GAAAA;AAAAA,MAAQP,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAK,QAAQ+I,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAClE5B,IAAAA,EAAAA,WACQN,IAAAA,GACRiB,GAAAA,GACAjG,GAAAA,OACIiH,GAAAA,QACCA,GAAAA,IACJvI,GAAAA,MACEP,EAAAA;AAAAA,SAAAA,OAGAgG,KAAK+C,CAAAA,EAAM9C,IAAI,SAAA/D,IAAA;AAAA,MAChBb,EAAAA,IAAO0H,EAAK1H,EAAAA;EAAAA,CAAAA,GAGXsE,UAAU,QAAQwB,CAAAA;AAAAA;AAG1B,SAAgB6B,UAAUlB,IAAGjG,GAAGiH,GAAAA;AAAAA,MAAM9I,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAK,QAAQwC,IAAAA,UAAAA,CAAAA;AAAAA,MAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA,IAC/BL,eAAeK,GAAOyG,eAAAA,IAAmBzG;AAAAA,MAExD2E,IAAAA,EAAAA,WACQ,cAAA,GACR,GAAA,GACA,GAAA,OACI2B,GAAAA,QACC,OAAA,MACF9I,EAAAA,GAEHkJ,IAAOvD,UAAU,QAAA,EAAA,WACT,uBAAA,GACR,GAAA,GACA,GAAA,IACc,IAAZwD,YAAiB,MAAA,aACI,MAAZA,YAAmB,MAAA,eAClB,SAAA,MACTC,WAAAA,WACK5G,EAAAA,CAAAA,GAGR6G,IAAQ1D,UAAU,KAAA,EAAA,WAAA,eACGmC,KAAAA,OAAMjG,IAAAA,IAAAA,CAAAA;AAAAA,SAAAA,EAEzB9F,YAAY4J,UAAU,QAAQwB,CAAAA,CAAAA,GAAAA,EAC9BpL,YAAYmN,CAAAA,GAEXG;AAAAA;AAGR,SAAgBC,UAAUxB,IAAGjG,GAAGiH,GAAAA;AAAAA,MAAM9I,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAK,QAAQwC,IAAAA,UAAAA,CAAAA;AAAAA,MAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA,IAC/BL,eAAeK,GAAOyG,eAAAA,IAAmBzG;AAAAA,MAExD2E,IAAAA,EAAAA,WACQ,cAAA,IACP,GAAA,IACA,GAAA,GACD2B,GAAAA,MACG9I,EAAAA,GAEHkJ,IAAOvD,UAAU,QAAA,EAAA,WACT,uBAAA,GACR,GAAA,GACA,GAAA,IACEwD,YAAa,MAAA,IACbA,YAAU,IAAK,MAAA,aACM,MAAZA,YAAmB,MAAA,eAClB,SAAA,MACTC,WAAAA,WACK5G,EAAAA,CAAAA,GAGR6G,IAAQ1D,UAAU,KAAA,EAAA,WAAA,eACGmC,KAAAA,OAAMjG,IAAAA,IAAAA,CAAAA;AAAAA,SAAAA,EAEzB9F,YAAY4J,UAAU,UAAUwB,CAAAA,CAAAA,GAAAA,EAChCpL,YAAYmN,CAAAA,GAEXG;AAAAA;AAGR,SAAgBE,SAAS1C,IAAWiB,GAAGjG,GAAG2H,GAAAA;AAAAA,MAASC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAC9CC,IAAWD,EAAQC,YAAYP;AAAAA,SAI5BxD,UAAU,QAAA,EAAA,WACLkB,IAAAA,GACRiB,GAAAA,GACAjG,GAAAA,KAAAA,WANK4H,EAAQE,KAAmBF,EAAQE,KAAMD,IAAW,KAOnD,MAAA,aACIA,IAAW,MAAA,MAPdD,EAAQzJ,QAAQoJ,WAAAA,eACVK,EAAQG,cAAc,SAAA,WAS3BJ,EAAAA,CAAAA;AAAAA;AAIb,SAASK,aAAa/B,IAAGtF,GAAOsH,GAAIC,GAAAA;AAAAA,MAAIN,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA;AACnCA,IAAQO,WAAQP,EAAQO,SAASC;AAAAA,MACjCpH,IAAI8C,UAAU,QAAA,EAAA,WACN,mBAAmB8D,EAAQ5C,WAAAA,IAClC,GAAA,IACA,GAAA,IACAiD,GAAAA,IACAC,GAAAA,QAAAA,EAAAA,QAEKN,EAAQO,OAAAA,EAAAA,CAAAA,GAIdd,IAAOvD,UAAU,QAAA,EAAA,GACjB,GAAA,GACAmE,IAAKC,IAAKD,IAAKI,eAAeJ,IAAKI,eAAef,WAAAA,IACjDA,YAAY,MAAA,aACHA,YAAY,MAAA,eACV,UAAA,WACJ3G,IAAQ,GAAA,CAAA,GAGhBc,IAAOqC,UAAU,KAAA,EAAA,WAAA,eACKmC,KAAAA,OAAAA,CAAAA;AAAAA,SAAAA,EAGrB/L,YAAY8G,CAAAA,GAAAA,EACZ9G,YAAYmN,CAAAA,GAEV5F;AAAAA;AAGR,SAAS6G,aAAatI,IAAGW,GAAO4H,GAAIC,GAAAA;AAAAA,MAAIZ,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA;AACnCA,IAAQO,WAAQP,EAAQO,SAASC,kBACjCR,EAAQa,aAAUb,EAAQa,WAAW,KACrCb,EAAQc,mBAAgB/H,IAAQD,mBAAmBC,CAAAA;AAAAA,MAKnDK,IAAI8C,UAAU,QAAA,EAAA,WAHF,qBAAqB8D,EAAQ5C,aACtB,aAArB4C,EAAQa,WAAwB,WAAU,KAAA,IAIvCF,GAAAA,IACAC,GAAAA,IACA,GAAA,IACA,GAAA,QAAA,EAAA,QAEKZ,EAAQO,OAAAA,EAAAA,CAAAA,GAIdd,IAAOvD,UAAU,QAAA,EAAA,GACjByE,IAAKC,IAAKD,IAAKF,eAAeE,IAAKF,cAAAA,GACnC,GAAA,IACEf,YAAY,IAAI,IAAK,MAAA,aACbA,YAAY,MAAA,eACViB,IAAKC,IAAK,QAAQ,SAAA,WACtB7H,IAAM,GAAA,CAAA,GAGdc,IAAOqC,UAAU,KAAA,EAAA,WAAA,kBACO9D,KAAAA,KAAAA,kBACT,EAAA,CAAA;AAAA,SAGP,MAATqH,KAAuB,QAATA,MAAAA,EACXxN,MAAMsO,SAAS,0BAAA,EAGhBjO,YAAY8G,CAAAA,GAAAA,EACZ9G,YAAYmN,CAAAA,GAEV5F;AAAAA;AAGR,SAAgBkH,MAAM3I,IAAGW,GAAOsE,GAAAA;AAAAA,MAAO2C,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA;AACjC9I,gBAAckB,EAAAA,MAAIA,KAAI,IAEvB4H,EAAQgB,QAAKhB,EAAQgB,MAAM,SAC3BhB,EAAQhD,WAAQgD,EAAQhD,SAAS,IACjCgD,EAAQiB,SAAMjB,EAAQiB,OAAO,SAC7BjB,EAAQO,WAAQP,EAAQO,SAASC,kBACjCR,EAAQ5C,cAAW4C,EAAQ5C,YAAY;AAAA,MAEvCuD,IAAAA,KAAUO,kBACVN,IAAsB,WAAjBZ,EAAQiB,OAAkB5D,IAAQ6D,mBAAmB;AAAA,SAE1C,WAAjBlB,EAAQiB,QAAmC,YAAhBjB,EAAQgB,QAAAA,IAChC3D,IAAQ6D,kBAAAA,IACR7D,IAAAA,KAKA2C,EAAQhD,QAAAA,KACRgD,EAAQhD,QAEP0D,aAAatI,IAAGW,GAAO4H,GAAIC,GAAAA,EAAAA,QACzBZ,EAAQO,QAAAA,WACLP,EAAQ5C,WAAAA,UACT4C,EAAQa,UAAAA,gBACFb,EAAQc,eAAAA,CAAAA;AAAAA;AAI1B,SAAgBK,MAAM9C,IAAGtF,GAAOZ,GAAAA;AAAAA,MAAQ6H,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA;AAClC9I,gBAAcmH,EAAAA,MAAIA,KAAI,IAEvB2B,EAAQgB,QAAKhB,EAAQgB,MAAM,WAC3BhB,EAAQhD,WAAQgD,EAAQhD,SAAS,IACjCgD,EAAQiB,SAAMjB,EAAQiB,OAAO,SAC7BjB,EAAQO,WAAQP,EAAQO,SAASC,kBACjCR,EAAQ5C,cAAW4C,EAAQ5C,YAAY;AAAA,MAavCiD,IAAKlI,IAAS+I,kBACdZ,IAAsB,WAAjBN,EAAQiB,OAAAA,KAAuBC,mBAAmB/I;AAAAA,SAEvC,WAAjB6H,EAAQiB,QAAmC,UAAhBjB,EAAQgB,QAAAA,IAAAA,KAE3BE,kBAAAA,IACL,IAGCd,aAAa/B,IAAGtF,GAAOsH,GAAIC,GAAAA,EAAAA,QACzBN,EAAQO,QAAAA,WACLP,EAAQ5C,WAAAA,UACT4C,EAAQa,SAAAA,CAAAA;AAAAA;AAIpB,SAAgBO,QAAQhJ,IAAGW,GAAOsE,GAAAA;AAAAA,MAAO2C,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA;AACpCA,IAAQqB,aAAUrB,EAAQqB,WAAW;AAAA,MAIrCC,IAAWpF,UAAU,QAAA,EAAA,WACb,eAAA,GAJiB,WAArB8D,EAAQqB,WAAsBZ,eACnCpD,IAAQ5G,eAAesC,GAAO,CAAA,IAAK0H,cAAAA,GAKlC,GAAA,IACEf,YAAAA,KAAkB,MAAA,aACVA,YAAY,MAAA,eACV,SAAA,WACJ3G,IAAM,GAAA,CAAA,GAGdc,IAAO6G,aAAatI,IAAG,IAAI,GAAGiF,GAAAA,EAAAA,QACzB2C,EAAQO,UAAUC,iBAAAA,WACfR,EAAQ5C,aAAa,IAAA,UACtB4C,EAAQa,SAAAA,CAAAA;AAAAA,SAAAA,EAGdvO,YAAYgP,CAAAA,GAEVzH;AAAAA;AAGR,SAAgB0H,QAAQlB,IAAIC,GAAIjD,GAAOtE,GAAAA;AAAAA,MAAOiH,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAEzC7H,IAASkI,KAAKC,GAEdtN,IAAOkJ,UAAU,QAAA,EAAA,WAAA,YAAA,QAAA,EAAA,MAAA,6BAAA,QAIXsE,iBAAAA,oBACenD,IAAAA,OAAUlF,EAAAA,GAAAA,GAG/B,GAAA,GACA,GAAA,OACIkF,GAAAA,QACClF,EAAAA,CAAAA;AAGL6H,IAAQqB,aAAUrB,EAAQqB,WAAW;AAAA,MAIrCC,IAAWpF,UAAU,QAAA,EAAA,WACb,eAAA,GAJiB,WAArB8D,EAAQqB,WAAsBZ,eACnCpD,IAAQ5G,eAAesC,IAAM,IAAI,GAAA,IAAO0H,cAAAA,GAKvC,GAAA,IACEf,YAAAA,KAAkB,MAAA,aACVA,YAAY,MAAA,eACV,SAAA,WACJ3G,IAAM,GAAA,CAAA,GAGdyI,IAAStF,UAAU,KAAA,EAAA,WAAA,kBACKoE,IAAAA,IAAAA,CAAAA;AAAAA,SAAAA,EAGrBhO,YAAYU,CAAAA,GAAAA,EACZV,YAAYgP,CAAAA,GAEZE;AAAAA;AAGR,SAAgBC,WAAWpD,IAAGpG,GAAMoF,GAAOhC,GAAAA;AAAAA,MAAOtC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAM,IAAI2I,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAM,GAAG1E,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAO,GAAG2E,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAAAA,IAC5D3J,qBAAqBC,GAAM0J,EAAKzJ,QAAAA,GAAAA,IAAAA,eAAAA,GAAAA,CAAAA,GAA7CC,IAAAA,EAAAA,CAAAA,GAAQC,IAAAA,EAAAA,CAAAA;AAAAA,OACR4E,GAES,MAAX7E,MAAAA,IACOwJ,EAAKC,WAAAA,KACTD,EAAKC,YAIN1K,cAAcmH,EAAAA,MAAIA,KAAI,IACtBnH,cAAckB,CAAAA,MAAIA,IAAI,IACtBlB,cAAciB,GAAAA,IAAQ,MAAOA,IAAS,IACtCjB,cAAcmG,GAAAA,IAAO,MAAOA,IAAQ;AAAA,MAErCrK,IAAOkJ,UAAU,QAAA,EAAA,WAAA,YAAA,OAAA,WAEJb,GAAAA,oBACIqG,GAAAA,GACjBrD,IAAAA,GACAjG,GAAAA,OACIiF,GAAAA,QACClF,EAAAA,CAAAA;AAAAA,OAAAA,KAGA,OAEKY,EAAM7C,QAEb;AAAA,MACDwG,aAAa,KAAK,CAAA,GAAA,EAClBA,aAAa,KAAK,CAAA;AAAA,QACnB+C,IAAOvD,UAAU,QAAA,EAAA,WACT,oBAAA,GACRmB,IAAM,GAAA,GACN,GAAA,IACEqC,YAAY,IAAA,KAAU,MAAA,aACdA,YAAY,MAAA,eACV,UAAA,WACJ3G,EAAAA,CAAAA,GAGR6G,IAAQ1D,UAAU,KAAA,EAAA,oBACDwF,GAAAA,WAAAA,eACIrD,KAAAA,OAAMjG,IAAAA,IAAAA,CAAAA;AAAAA,WAAAA,EAEzB9F,YAAYU,CAAAA,GAAAA,EACZV,YAAYmN,CAAAA,GAEXG;EAAAA;AAAAA,SArBA5M;AAAAA;AAyBT,SAAgB6O,WAAWxD,IAAGjG,GAAGtB,GAAQuE,GAAAA;AAAAA,MAAOtC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAM,IAAI2I,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAM,GAC3DI,IAAM5F,UAAU,UAAA,EAAA,OAAA,WACHb,GAAAA,oBACIqG,GAAAA,IAChBrD,IAAAA,IACAjG,GAAAA,GACDtB,EAAAA,CAAAA;AAAAA,OAAAA,KAGK,OAEKiC,EAAM7C,QAEb;AAAA,MACFwG,aAAa,MAAM,CAAA,GAAA,EACnBA,aAAa,MAAM,CAAA;AAAA,QAEnB+C,IAAOvD,UAAU,QAAA,EAAA,WACT,oBAAA,GACR,GAAA,GACA,GAAA,IACEwD,YAAY,IAAA,KAAS5I,IAAU,MAAA,aACvB4I,YAAY,MAAA,eACV,UAAA,WACJ3G,EAAAA,CAAAA,GAGR6G,IAAQ1D,UAAU,KAAA,EAAA,oBACDwF,GAAAA,WAAAA,eACIrD,KAAAA,OAAMjG,IAAAA,IAAAA,CAAAA;AAAAA,WAAAA,EAEzB9F,YAAYwP,CAAAA,GAAAA,EACZxP,YAAYmN,CAAAA,GAEXG;EAAAA;AAAAA,SAtBAkC;AAAAA;AA0BT,SAAgBC,SAASvI,IAAOC,GAAO4B,GAAAA;AAAAA,MAAO2E,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAAY2B,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAErDK,IADavI,EAAM+C,IAAI,SAACpE,IAAGuB,IAAAA;AAAAA,WAAOH,GAAMG,EAAAA,IAAK,MAAMvB;EAAAA,CAAAA,EAC5B6J,KAAK,GAAA;AAG5BjC,IAAQkC,WACXF,IAAYzI,wBAAwBC,IAAOC,CAAAA;AAAAA,MAExC0I,IAAOvE,SAAS,MAAIoE,GAAW,mBAAmB3G,CAAAA;AAAAA,MAGnD2E,EAAQoC,UAAU;AAAA,QAChBC,IAAcxD,aAAa8C,EAAKW,SAASjH,CAAAA;AAAAA,MACxCpJ,MAAMsO,SAAAA,UAAiB8B,IAAAA;EAAAA;AAAAA,MAGzBE,IAAAA,EAAAA,MACGJ,EAAAA;AAAAA,MAIJnC,EAAQwC,YAAY;AAAA,QAClBC,IAAqB5D,aAAa8C,EAAKW,SAASjH,GAAAA,IAAO,GAEvDwC,IAAU,MAASrE,GAAM,CAAA,IAAA,MAAMmI,EAAKzJ,WAAAA,MAAc8J,IAAAA,MAAgBxI,GAAMX,MAAAA,EAAO,EAAG,CAAA,IAAA,MAAM8I,EAAKzJ;AAAAA,MAC3FsJ,SAAS5D,SAASC,GAAAA,eAAwB,QAAA,UAAgB4E,IAAAA,GAAAA;EAAAA;AAAAA,SAG1DF;AAAAA;AChmBR,SAAgBG,UAAUC,IAAMC,GAAUC,GAAUC,GAAAA;AAAAA,MAC/CC,IAA0B,YAAA,OAAbH,IAAwBA,IAAWA,EAASX,KAAK,IAAA;AAAA,SAAA,CAEjEU,IAAAA,EACClF,WAAWoF,EAASZ,KAAK,IAAA,EAAA,GAC1Ba,GACAE,YACA,aAAA,EACCvF,WAAWsF,EAAAA,CAAAA;AAAAA;AAId,SAAgBE,kBAAkB9B,IAAO+B,GAAMC,GAAAA;AAAAA,SACvCT,UAAUvB,IAAAA,CAAQgC,GAAM,CAAA,GAAA,CAAKD,GAAM,CAAA,GAAIE,oBAAAA;AAAAA;AAG/C,SAAgBC,kBAAkBtC,IAAOuC,GAAMC,GAAAA;AAAAA,SACvCb,UAAU3B,IAAAA,CAAQ,GAAGwC,CAAAA,GAAAA,CAAQ,GAAGD,CAAAA,GAAOF,oBAAAA;AAAAA;AAG/C,SAAgBI,cAAcC,IAAWC,GAAOC,GAAOC,GAAAA;AAAAA,MAClDC,IAAYH,IAAQC,GACpB3Q,IAAOyQ,GAAUK,WAAW,CAAA;AAAA,SAAA,CAAA,CAG/B9Q,GAAAA,EACEmF,QAAQ0L,GAAWE,oBAHV/Q,EAAKgR,aAAa,OAAA,IAAA,OAGyBH,EAAAA,GACtDT,sBACAJ,UAAAA,GAGeN,UAAUe,IAAAA,CAAY,GAAGG,CAAAA,GAAAA,CAAS,GAAGD,CAAAA,GAAQP,oBAAAA,CAAAA;AAAAA;AAI9D,SAAgBa,WAAWC,IAAK7F,GAAGpG,GAAMoF,GAAAA;AAAAA,MAAOL,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAO,GAAA,IACpChF,qBAAqBC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAAWC,QAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA,GAA7CC,IAAAA,EAAAA,CAAAA,GAAQC,IAAAA,EAAAA,CAAAA;AAAAA,SAAAA,KACR4E,GACe,WAAjBkH,GAAIC,WAAAA,CAAAA,CACKD,GAAIJ,WAAW,CAAA,GAAA,EAGxBzG,OAAOA,GAAOlF,QAAQA,EAAAA,GACvBiM,eACApB,UAAAA,GAIeN,UAAUwB,IADRA,GAAIF,aAAa,WAAA,EAAaK,MAAM,GAAA,EAAK,CAAA,EAAGxL,MAAM,GAAA,EAAI,GAAA,CAC3BwF,GAAGjG,CAAAA,GAAIgL,oBAAAA,CAAAA,IAAAA,CAAAA,CAG3Cc,IAAAA,EAAM7G,OAAOA,GAAOlF,QAAQA,GAAQkG,GAAGA,GAAGjG,GAAGA,EAAAA,GAAIgM,eAAepB,UAAAA,CAAAA;AAAAA;AAK3E,SAAgBsB,WAAWxC,IAAKzD,GAAGjG,GAAAA;AAAAA,SACd,aAAjB0J,GAAIqC,WAAAA,CAEUzB,UAAUZ,IADRA,GAAIkC,aAAa,WAAA,EAAaK,MAAM,GAAA,EAAK,CAAA,EAAGxL,MAAM,GAAA,EAAI,GAAA,CAC3BwF,GAAGjG,CAAAA,GAAIgL,oBAAAA,CAAAA,IAAAA,CAAAA,CAG3CtB,IAAAA,EAAMyC,IAAIlG,GAAGmG,IAAIpM,EAAAA,GAAIgM,eAAepB,UAAAA,CAAAA;AAAAA;AAK/C,SAAgByB,YAAYlC,IAAOmC,GAAUC,GAAUzM,GAAUgK,GAAAA;AAAAA,MAC5D0C,IAAAA,CAAAA,GACA5C,IAAY2C,EAASnI,IAAI,SAACpE,IAAGuB,IAAAA;AAAAA,WAAO+K,EAAS/K,EAAAA,IAAK,MAAMvB;EAAAA,CAAAA,EAAI6J,KAAK,GAAA;AAEjEC,QACHF,IAAYzI,wBAAwBmL,GAAUC,CAAAA;AAAAA,MAEzCE,IAAAA,CAAYtC,GAAMJ,MAAAA,EAAOvM,GAAE,MAAMoM,EAAAA,GAAY8C,eAAe9B,UAAAA;AAAAA,MAAAA,EACnDpJ,KAAKiL,CAAAA,GAEjBtC,GAAMf,QAAQ;AAAA,QACZuD,IAAgBL,EAAS,CAAA,IAAA,MAAMxM,IAAAA,KAC/B8M,IAAAA,MAAeN,EAAS7L,MAAAA,EAAO,EAAG,CAAA,IAAA,OAAOX,GAEvC+M,IAAAA,CACL1C,GAAMf,QAAAA,EACL5L,GAAE,MAAMmP,IAAa/C,IAAYgD,EAAAA,GAClCF,eACA9B,UAAAA;AAAAA,MAEcpJ,KAAKqL,CAAAA;EAAAA;AAAAA,SAGdL;AAAAA;AAGR,SAAgBM,eAAeC,IAAStH,GAAAA;AAAAA,SAAAA,CAC/BsH,IAAAA,EAAUvP,GAAGiI,EAAAA,GAAUuG,eAAepB,UAAAA;AAAAA;AAAAA,SAAAA,qBAAAA,IAAAA;AAAAA,MAAAA,MAAAA,QAAAA,EAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,MAAAA,KAAAA,EAAAA;AAAAA;AC1F/C,SAASoC,kBAAkBrS,IAASsS,GAAOC,GAAAA;AAAAA,MAAKC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAW,UAAUpT,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,QAAgBqT,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAEhFC,IAAc1S,GAAQ2S,UAAAA,IAAU,GAChCC,IAAa5S,GAAQ2S,UAAAA,IAAU;AAAA,WAE3BE,KAAiBP,GAAO;AAAA,QAC3BQ,IAAAA;AAAAA,QACiB,gBAAlBD,IACe9T,SAASsK,gBAAgB,8BAA8B,kBAAA,IAEvDtK,SAASsK,gBAAgB,8BAA8B,SAAA;AAAA,QAErE0J,IAAeN,EAAUI,CAAAA,KAAkB7S,GAAQiR,aAAa4B,CAAAA,GAChEjO,IAAQ0N,EAAMO,CAAAA,GAEdG,IAAAA,EAAAA,eACYH,GAAAA,MACTE,GAAAA,IACFnO,GAAAA,OACG,MAAA,KACF2N,IAAI,MAAO,KAAA,QACRQ,IAAe,MAAMnO,GAAAA,YACjBqO,OAAOT,CAAAA,GAAAA,UACT,OAAA,UACA,UAAA,MACJ,SAAA;AAGJpT,UAAAA,EACF,OAAmBA;AAAAA,aAGXwH,KAAKoM;AAAAA,QACErJ,aAAa/C,GAAGoM,EAASpM,CAAAA,CAAAA;AAAAA,MAG7BrH,YAAYuT,CAAAA,GAErB1T,IAAAA,EACSuK,aAAakJ,GAAAA,eAA4BjO,IAAAA,GAAAA,IAAAA,EAEzC+E,aAAakJ,GAAejO,CAAAA;EAAAA;AAAAA,SAAAA,CAIjC8N,GAAaE,CAAAA;AAAAA;AAGtB,SAAgBlI,UAAU1K,IAASd,GAAAA;AAAAA,EAAAA,GAC1BA,MAAMwL,YAAYxL,GAAAA,GAClBA,MAAMgU,kBAAkBhU,GAAAA,GACxBA,MAAMiU,cAAcjU,GAAAA,GACpBA,MAAMkU,eAAelU,GAAAA,GACrBA,MAAMmU,aAAanU;AAAAA;AAG5B,SAASoU,WAAW9I,IAAc+I,GAAAA;AAAAA,MAC7BC,IAAAA,CAAAA,GACAC,IAAAA,CAAAA;AAAAA,IAEKhK,IAAI,SAAA/D,IAAA;AAAA,QACRkK,KAAO5P,GAAQ,CAAA,GACfoK,KAASwF,GAAKrG,YAEdmJ,IAAAA,QAAaE,IAAAA;AAAAA,IAAAA,GAET,CAAA,IAAKhD;AAAAA,QAAAA,IACeyC,kBAAAA,MAAAA,QAAAA,qBAAqBrS,EAAAA,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,QAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,EAErC6G,KAAK+L,CAAAA,GAAAA,EACJ/L,KAAAA,CAAM6L,GAAatI,EAAAA,CAAAA,GAE5BA,MAAAA,GACIsJ,aAAahB,GAAa9C,EAAAA;EAAAA,CAAAA;AAAAA,MAI/B+D,IAAUnJ,GAAamI,UAAAA,IAAU;AAAA,SAAA,EAExBlJ,IAAI,SAACiJ,IAAa9L,IAAAA;AAC1B8L,IAAAA,GAAY,CAAA,MAAAhN,GACH,CAAA,EAAGgO,aAAaF,EAAY5M,EAAAA,GAAI8L,GAAY,CAAA,CAAA,GAAA,EAC/C9L,EAAAA,EAAG,CAAA,IAAK4M,EAAY5M,EAAAA;EAAAA,CAAAA,GAIxB+M;AAAAA;AAGR,SAAgBC,iBAAiBxJ,IAAQyJ,GAAYC,GAAAA;AAAAA,MACpB,MAA7BA,EAAkB3Q,QAAAA;AAAAA,QAEjB4Q,IAAiBT,WAAWO,GAAYC,CAAAA;AACzCD,MAAWtK,cAAca,OAAAA,GACpB4J,YAAYH,CAAAA,GAAAA,GACZtU,YAAYwU,CAAAA,IAAAA,WAKT,WAAA;AACPA,QAAexK,cAAca,OAAAA,GACxB4J,YAAYD,CAAAA,GAAAA,GACZxU,YAAYsU,CAAAA;IAAAA,GAElBI,mBAAAA;EAAAA;AAAAA;ACnHG,SAASC,aAAaC,IAAU5H,GAAAA;AAAAA,MAClCvE,IAAIjJ,SAASI,cAAc,GAAA;AAAA,IAC7BD,QAAQ;AAAA,MACNkV,IAAO,IAAIC,KAAK9H,GAAAA,EAAOnN,MAAM,+BAAA,CAAA,GAC7BkV,IAAMxT,OAAOyT,IAAIC,gBAAgBJ,CAAAA;AAAAA,IACnCK,OAAOH,GAAAA,EACPI,WAAWP,IAAAA,SACJ7T,KAAKf,YAAYyI,CAAAA,GAAAA,EACxB2M,MAAAA,GAAAA,WACS,WAAA;AAAA,aACDrU,KAAK0T,YAAYhM,CAAAA,GAAAA,OACnBuM,IAAIK,gBAAgBN,CAAAA;EAAAA,GACzB,GAAA;AAAA;AAGJ,SAAgBO,iBAAiBC,IAAAA;AAAAA,MAC5BC,IAAQD,GAAInC,UAAAA,IAAU;AAAA,IACpBqC,UAAUC,IAAI,iBAAA,GAAA,EACdtL,aAAa,SAAS,4BAAA,GAAA,EACtBA,aAAa,eAAe,8BAAA;AAAA,MAC9BuL,IAAUvV,EAAEwV,OAAO,SAAA,EAAA,WACTC,QAAAA,CAAAA;AAAAA,IAER9V,aAAa4V,GAASH,EAAM1V,UAAAA;AAAAA,MAE9BgW,IAAY1V,EAAEwV,OAAO,KAAA;AAAA,SAAA,EACf5V,YAAYwV,CAAAA,GAEfM,EAAUC;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AAAAA,SAAAA,6BAAAA,IAAAA,GAAAA;AAAAA,MAAAA,CAAAA;AAAAA,UAAAA,IAAAA,eAAAA,2DAAAA;AAAAA,SAAAA,CAAAA,KAAAA,YAAAA,OAAAA,KAAAA,cAAAA,OAAAA,IAAAA,KAAAA;AAAAA;AAAAA,SAAAA,YAAAA,IAAAA,GAAAA;AAAAA,MAAAA,cAAAA,OAAAA,KAAAA,SAAAA;AAAAA,UAAAA,IAAAA,UAAAA,6DAAAA,OAAAA,CAAAA;AAAAA,EAAAA,GAAAA,YAAAA,OAAAA,OAAAA,KAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,OAAAA,IAAAA,YAAAA,OAAAA,UAAAA,MAAAA,cAAAA,KAAAA,EAAAA,CAAAA,GAAAA,MAAAA,OAAAA,iBAAAA,OAAAA,eAAAA,IAAAA,CAAAA,IAAAA,GAAAA,YAAAA;AAAAA;ACblB,SAASC,WAAWC,IAAAA;AAAAA,MACfC,IAAS,IAAI3Q,KAAK0Q,EAAAA;AAAAA,SAAAA,EACfE,WAAWD,EAAOE,WAAAA,IAAeF,EAAOG,kBAAAA,CAAAA,GACxCH;AAAAA;AAGR,SAAgBI,YAAYL,IAAAA;AAAAA,MACvBM,IAAKN,GAAKO,QAAAA,GACVC,IAAKR,GAAKS,SAAAA,IAAa;AAAA,SAAA,CAE1BT,GAAKU,YAAAA,IACJF,IAAG,IAAI,KAAK,OAAOA,IACnBF,IAAG,IAAI,KAAK,OAAOA,CAAAA,EACnB5G,KAAK,GAAA;AAAA;AAGR,SAAgB6F,MAAMS,IAAAA;AAAAA,SACd,IAAI1Q,KAAK0Q,GAAKzQ,QAAAA,CAAAA;AAAAA;AAiBtB,SAAgBoR,gBAAgBC,IAAWC,GAAAA;AAAAA,MACtCC,IAAgBC,eAAeH,EAAAA;AAAAA,SAC5B9S,KAAKkT,KAAKC,eAAeH,GAAeD,CAAAA,IAAWK,kBAAAA;AAAAA;AAG3D,SAAgBD,eAAeL,IAAWC,GAAAA;AAAAA,MACrCM,IAAqBC,aAAaC;AAAAA,UAC9BtB,WAAWc,CAAAA,IAAWd,WAAWa,EAAAA,KAAcO;AAAAA;AAGxD,SAAgBG,eAAeV,IAAWC,GAAAA;AAAAA,SAClCD,GAAUH,SAAAA,MAAeI,EAAQJ,SAAAA,KACpCG,GAAUF,YAAAA,MAAkBG,EAAQH,YAAAA;AAAAA;AAGzC,SAAgBa,aAAanQ,IAAAA;AAAAA,MAAGoQ,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA,GAC3BC,IAAYC,YAAYtQ,EAAAA;AAAAA,SACrBoQ,IAAQC,EAAUnR,MAAM,GAAG,CAAA,IAAKmR;AAAAA;AAGxC,SAAgBE,mBAAoBC,IAAOC,GAAAA;AAAAA,SACnC,IAAIvS,KAAKuS,GAAMD,KAAQ,GAAG,CAAA;AAAA;AAIlC,SAAgBb,eAAef,IAAAA;AAAAA,MAC1B8B,IAAUvC,MAAMS,EAAAA,GACd+B,IAAMD,EAAQE,OAAAA;AAAAA,SACT,MAARD,KAAAA,QACMD,GAAAA,KAAgBC,CAAAA,GAElBD;AAAAA;AAIR,SAAgBG,QAAQjC,IAAMkC,GAAAA;AAAAA,EAAAA,GACxBC,QAAQnC,GAAKO,QAAAA,IAAY2B,CAAAA;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AC6V/B,SAAgBE,aAAaC,IAAMC,GAAWC,GAAAA;AAAAA,MACzCvO,IAAOwO,OAAOxO,KAAKyO,gBAAAA,EAAkBC,OAAO,SAAAC,IAAA;AAAA,WAAKN,GAAKO,SAASC,EAAAA;EAAAA,CAAAA,GAC/DC,IAASL,iBAAiBzO,EAAK,CAAA,CAAA;AAAA,SAAA,OAC5B+O,OAAOD,GAAAA,EAAAA,WACFR,GAAAA,SACFC,EAAAA,CAAAA,GAEH,IAAIS,eAAeF,CAAAA;AAAAA;AAAAA,SAAAA,mBAAAA,IAAAA;AAAAA,MAAAA,MAAAA,QAAAA,EAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,MAAAA,KAAAA,EAAAA;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AAAAA,SAAAA,2BAAAA,IAAAA,GAAAA;AAAAA,MAAAA,CAAAA;AAAAA,UAAAA,IAAAA,eAAAA,2DAAAA;AAAAA,SAAAA,CAAAA,KAAAA,YAAAA,OAAAA,KAAAA,cAAAA,OAAAA,IAAAA,KAAAA;AAAAA;AAAAA,SAAAA,UAAAA,IAAAA,GAAAA;AAAAA,MAAAA,cAAAA,OAAAA,KAAAA,SAAAA;AAAAA,UAAAA,IAAAA,UAAAA,6DAAAA,OAAAA,CAAAA;AAAAA,EAAAA,GAAAA,YAAAA,OAAAA,OAAAA,KAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,OAAAA,IAAAA,YAAAA,OAAAA,UAAAA,MAAAA,cAAAA,KAAAA,EAAAA,CAAAA,GAAAA,MAAAA,OAAAA,iBAAAA,OAAAA,eAAAA,IAAAA,CAAAA,IAAAA,GAAAA,YAAAA;AAAAA;AAAAA,SAAAA,qBAAAA,IAAAA;AAAAA,MAAAA,MAAAA,QAAAA,EAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,MAAAA,KAAAA,EAAAA;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AAAAA,SAAAA,6BAAAA,IAAAA,GAAAA;AAAAA,MAAAA,CAAAA;AAAAA,UAAAA,IAAAA,eAAAA,2DAAAA;AAAAA,SAAAA,CAAAA,KAAAA,YAAAA,OAAAA,KAAAA,cAAAA,OAAAA,IAAAA,KAAAA;AAAAA;AAAAA,SAAAA,YAAAA,IAAAA,GAAAA;AAAAA,MAAAA,cAAAA,OAAAA,KAAAA,SAAAA;AAAAA,UAAAA,IAAAA,UAAAA,6DAAAA,OAAAA,CAAAA;AAAAA,EAAAA,GAAAA,YAAAA,OAAAA,OAAAA,KAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,OAAAA,IAAAA,YAAAA,OAAAA,UAAAA,MAAAA,cAAAA,KAAAA,EAAAA,CAAAA,GAAAA,MAAAA,OAAAA,iBAAAA,OAAAA,eAAAA,IAAAA,CAAAA,IAAAA,GAAAA,YAAAA;AAAAA;AAAAA,SAAAA,qBAAAA,IAAAA;AAAAA,MAAAA,MAAAA,QAAAA,EAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,MAAAA,KAAAA,EAAAA;AAAAA;AC5b3B,SAESG,UAAUnN,IAAAA;AAAAA,MAKX,MAAJA;AAAAA,WAAAA,CACM,GAAG,CAAA;AAAA,MAET/G,MAAM+G,EAAAA;AAAAA,WAAAA,EACAoN,UAAAA,mBAA6BC,UAAU,IAAA;AAAA,MAE5CC,IAAMtN,KAAI,IAAI,IAAA;AAAK,MAAA,CACnB9G,SAAS8G,EAAAA;AAAAA,WAAAA,EACJoN,UAAgB,mBAANE,GAAwBD,UAAU,IAAA;AAAA,EAAAjT,KAGjDpC,KAAKC,IAAI+H,EAAAA;AAAAA,MACTuN,IAAMvV,KAAK6C,MAAM7C,KAAK8C,MAAMkF,EAAAA,CAAAA;AAAAA,SAAAA,CAGxBsN,KAFEtN,KAAEhI,KAAKiD,IAAI,IAAIsS,CAAAA,IAENA,CAAAA;AAAAA;AAGpB,SAASC,uBAAuBC,IAAAA;AAAAA,MAAKC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAI,GACpCC,IAAa3V,KAAKkT,KAAKuC,EAAAA,GACvBG,IAAa5V,KAAK6C,MAAM6S,CAAAA,GACxBG,IAAQF,IAAaC,GAErBE,IAAYD,GACZE,IAAW;AAGZF,MAAQ,MACPA,IAAQ,KAAM,MAAA,IAAA,EAAA,IAGKD,IAAAA,IAEVC,IAAM,GAAA,IACP,IAITA,KAAS,MAAA,IAEAA,KAAAA,IADC,KAKA,MAAVA,MAAAA,IACU,GAAA,IACD;AAAA,WAGRG,IAAAA,CAAAA,GACI1S,IAAI,GAAGA,KAAKwS,GAAWxS;AAAAA,MACpBC,KAAKqS,IAAaG,IAAWzS,CAAAA;AAAAA,SAEjC0S;AAAAA;AAGR,SAASC,kBAAkBC,IAAAA;AAAAA,MAAUC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAS,GAAA,IACZhB,UAAUe,EAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA,GAAtCE,IAAAA,EAAAA,CAAAA,GAAgBf,IAAAA,EAAAA,CAAAA,GACjBgB,IAAiBF,IAAWA,IAASnW,KAAKiD,IAAI,IAAIoS,CAAAA,IAAW,GAK7DW,IAAYR,uBAAAA,IAFCY,EAAe5W,QAAQ,CAAA,GAEe6W,CAAAA;AAAAA,SAAAA,IAC3CL,EAAU7P,IAAI,SAAA/D,IAAA;AAAA,WAASd,KAAQtB,KAAKiD,IAAI,IAAIoS,CAAAA;EAAAA,CAAAA;AAAAA;AAIzD,SAAgBiB,mBAAmBC,IAAAA;AAAAA,WAYzBC,EAA0BN,IAAUO,IAAAA;AAAAA,aACxCT,KAAYC,kBAAkBC,EAAAA,GAE9BQ,KAAeV,GAAU,CAAA,IAAKA,GAAU,CAAA,GAGxC1U,KAAQ,GACJgC,KAAI,GAAGhC,KAAQmV,IAAanT;AAAAA,MAAAA,MAC1BoT,IAAAA,GACCC,QAAAA,KAAerV,EAAAA;AAAAA,WAEnB0U;EAAAA;AAAAA,MAvBkCY,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA,GAMtCV,IAAWlW,KAAKyV,IAAAA,MAAAA,MAAAA,qBAAOc,EAAAA,CAAAA,GACvBJ,IAAWnW,KAAK0V,IAAAA,MAAAA,MAAAA,qBAAOa,EAAAA,CAAAA,GAGTP,IAAAA,CAAAA;AAAAA,MAkBfE,KAAY,KAAKC,KAAY;AACpBhB,cAAUe,CAAAA,EAAU,CAAA,GAAA,IAC3BU,IAGSX,kBAAkBC,GAAUC,CAAAA,IAF5BF,kBAAkBC,CAAAA;WAQxBA,IAAW,KAAKC,IAAW,GAAG;AAAA,QAOjCM,IAAczW,KAAKC,IAAIkW,CAAAA;AAExBD,SAAYO,KACHtB,UAAUe,CAAAA,EAAU,CAAA,GAAA,IACnBM,EAA0BN,GAAUO,CAAAA,MAGrCtB,UAAUsB,CAAAA,EAAa,CAAA,GAAA,IACfD,EAA0BC,GAAaP,CAAAA,EACjC/R,QAAAA,EAAUgC,IAAI,SAAA/D,IAAA;AAAA,aAAA,KAAK7C;IAAAA,CAAAA;EAAAA,WAOtC2W,KAAY,KAAKC,KAAY,GAAG;AAAA,QAInCU,IAAiB7W,KAAKC,IAAIkW,CAAAA,GAC1BW,IAAiB9W,KAAKC,IAAIiW,CAAAA;AAEnBf,cAAU0B,CAAAA,EAAgB,CAAA,GAAA,KAAA,IACjCD,IAGSX,kBAAkBY,GAAgBC,CAAAA,IAFlCb,kBAAkBY,CAAAA,GAKT1S,QAAAA,EAAUgC,IAAI,SAAA/D,IAAA;AAAA,aAAA,KAAK7C;IAAAA,CAAAA;EAAAA;AAAAA,SAGnCyW;AAAAA;AAGR,SAAgBe,aAAaC,IAAAA;AAAAA,MAExBC,IAAWC,gBAAgBF,EAAAA;AAAAA,SAC5BA,GAAKG,QAAQ,CAAA,KAAM,IAGTH,GAAKG,QAAQ,CAAA,IAChBH,GAAK,CAAA,IAAK,IAAA,KAGTA,GAAK,CAAA,IACUC,IAAAA,KAIfD,GAAKA,GAAKnX,SAAS,CAAA,IACJoX,KAAYD,GAAKnX,SAAS;AAAA;AAiBrD,SAAgBqX,gBAAgBE,IAAAA;AAAAA,SACxBA,GAAa,CAAA,IAAKA,GAAa,CAAA;AAAA;AAGvC,SAAgBC,cAAcD,IAAAA;AAAAA,SACtBA,GAAaA,GAAavX,SAAO,CAAA,IAAKuX,GAAa,CAAA;AAAA;AAG3D,SAAgBE,MAAMtR,IAAKuR,GAAAA;AAAAA,SACnBjY,SAASiY,EAAM1V,WAAWmE,KAAMuR,EAAMC,eAAAA;AAAAA;AAY9C,SAAgBC,kBAAkBC,IAAMC,GAAAA;AAAAA,MAAKtM,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA,GACxCuM,IAAUD,EAAIpT,OAAO,SAASsT,IAAMC,IAAAA;AAAAA,WAC/B9X,KAAKC,IAAI6X,KAAOJ,EAAAA,IAAQ1X,KAAKC,IAAI4X,KAAOH,EAAAA,IAAQI,KAAOD;EAAAA,GAAAA,CAAAA,CAAAA;AAAAA,SAGzDxM,IAAQsM,EAAIR,QAAQS,CAAAA,IAAWA;AAAAA;AAGvC,SAAgBG,iBAAiBxB,IAAQyB,GAAAA;AAAAA,WAIpCC,IAAejY,KAAKyV,IAAAA,MAAAA,MAAAA,qBAAOc,EAAAA,CAAAA,GAE3B2B,IAAmB,KAAKF,IAAmB,IAC3CG,IAAAA,CAAAA,GAEI7U,IAAI,GAAGA,IAAI0U,GAAkB1U,KAAK;AAAA,QACrC8U,IAAaH,KAAgBC,IAAmB5U;AAAAA,MACvCC,KAAK6U,CAAAA;EAAAA;AAAAA,SAGZD;AAAAA;AAGR,SAAgBE,iBAAiB/W,IAAO6W,GAAAA;AAAAA,SAChCA,EAAavD,OAAO,SAAAC,IAAA;AAAA,WAAKtV,KAAI+B;EAAAA,CAAAA,EAAOzB;AAAAA;AAAAA,SAAAA,qBAAAA,IAAAA;AAAAA,MAAAA,MAAAA,QAAAA,EAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,MAAAA,KAAAA,EAAAA;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AAAAA,SAAAA,6BAAAA,IAAAA,GAAAA;AAAAA,MAAAA,CAAAA;AAAAA,UAAAA,IAAAA,eAAAA,2DAAAA;AAAAA,SAAAA,CAAAA,KAAAA,YAAAA,OAAAA,KAAAA,cAAAA,OAAAA,IAAAA,KAAAA;AAAAA;AAAAA,SAAAA,YAAAA,IAAAA,GAAAA;AAAAA,MAAAA,cAAAA,OAAAA,KAAAA,SAAAA;AAAAA,UAAAA,IAAAA,UAAAA,6DAAAA,OAAAA,CAAAA;AAAAA,EAAAA,GAAAA,YAAAA,OAAAA,OAAAA,KAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,OAAAA,IAAAA,YAAAA,OAAAA,UAAAA,MAAAA,cAAAA,KAAAA,EAAAA,CAAAA,GAAAA,MAAAA,OAAAA,iBAAAA,OAAAA,eAAAA,IAAAA,CAAAA,IAAAA,GAAAA,YAAAA;AAAAA;AAAAA,SAAAA,qBAAAA,IAAAA;AAAAA,MAAAA,MAAAA,QAAAA,EAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,MAAAA,KAAAA,EAAAA;AAAAA;AC7O5C,SAGgByY,SAASrP,IAAMnN,GAAAA;AAAAA,EAAAA,GACzByc,SAAStP,GAAKsP,UAAAA,CAAAA;AAAAA,MAEfC,IAAgBvP,GAAKsP,OAAO1Y,QAG5B4Y,IAAWxP,GAAKwP,UAChBC,IAAY,IAAI3Y,MAAMyY,CAAAA,EAAetY,KAAK,CAAA;AAAA,SAC1CuY,MAAAA,IAAAA,CAAAA,EAAAA,QAGMC,EAAAA,CAAAA,IAAAA,EAIDvS,IAAI,SAAA/D,IAAA;AAAA,QAER7C,GAAEgX,QAEC;AAAA,UAEFoC,KAAOpZ,GAAEgX;AAAAA,MAAAA,MAAAA,KACNoC,GAAKxS,IAAI,SAAA/D,IAAA;AAAA,eAASnB,MAAM+E,EAAAA,IAAa,IAANA;MAAAA,CAAAA,GAG9BnG,SAAS2Y,IACTG,GAAKnW,MAAM,GAAGgW,CAAAA,IAEd/Y,UAAUkZ,IAAMH,IAAgBG,GAAK9Y,QAAQ,CAAA,GAAAuC,GAEnDmU,SAASoC;IAAAA;AAAAA,MAAAA,GAZTpC,SAASmC;AAgBRnZ,IAAAA,GAAEqZ,cACDC,yBAAyB/D,SAAShZ,CAAAA,GAAAA,GACpC8c,YAAY9c;EAAAA,CAAAA,GASbmN,GAAK6P,YAAAA,GACFA,SAAS3S,IAAI,SAAA/D,IAAA;AAAA,QACd7C,GAAEwZ,MAAMxZ,GAAEK,OAAO;AAAA,UAAAiV,KAAA,CACCtV,GAAEwZ,KAAKxZ,GAAEK,KAAAA;AAAAA,MAAAA,GAA1BA,QAAAA,GAAAA,CAAAA,GAAAA,GAASmZ,MAAAA,GAAAA,CAAAA;IAAAA;EAAAA,CAAAA,GAKR9P;AAAAA;AAGR,SAAgB+P,aAAaC,IAAAA;AAAAA,MACxBT,IAAgBS,GAASV,OAAO1Y,QAChC6Y,IAAY,IAAI3Y,MAAMyY,CAAAA,EAAetY,KAAK,CAAA,GAE1CgZ,IAAAA,EAAAA,QACKD,GAASV,OAAO/V,MAAM,GAAA,EAAI,GAAA,UACxByW,GAASR,SAAStS,IAAI,SAAA/D,IAAA;AAAA,WAAA,EAAA,MAExB,IAAA,QACEsW,EAAUlW,MAAM,GAAA,EAAI,GAAA,WACjBjD,GAAEqZ,UAAAA;EAAAA,CAAAA,EAAAA;AAAAA,SAKbK,GAASE,aAAAA,EACFA,WAAAA,CAAAA,EAAAA,OAEA,GAAA,OACA,GAAA,CAAA,IAKPF,GAASH,aAAAA,EACFA,WAAAA,CAAAA,EAAAA,OAEA,GAAA,KACF,GAAA,OACE,GAAA,CAAA,IAKHI;AAAAA;AAGR,SAAgBE,mBAAmBC,IAAAA;AAAAA,MAAYd,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAAWe,IAAAA,EAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,MAAAA,UAAAA,CAAAA,GACrDC,IAAeF,KAAad,EAAO1Y;AACpC0Z,OAAgB,MAAGA,IAAe;AAAA,MACjCC,IAAiBD,IAAeE,oBAEhCC,IAAAA;AAAAA,MACDJ,GAAU;AAAA,QAERK,IAAiB3Z,KAAKyV,IAAAA,MAAAA,MAAAA,qBAAO8C,EAAOpS,IAAI,SAAA/D,IAAA;AAAA,aAASM,GAAM7C;IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAC1CG,KAAKkT,KAAKyG,IAAeH,CAAAA;EAAAA;AAAAA,SAG1BjB,EAAOpS,IAAI,SAACzD,IAAOY,IAAAA;AAAAA,YAAAA,MAC1B,IACAzD,SAAS2Z,MAEbF,IAOAhW,KAAIoW,KAAmB,MAAAtX,KACjB,MAAAA,KAPNoX,IAAe,IAAI,IACb9W,GAAMF,MAAM,GAAGgX,IAAe,CAAA,IAAK,SAEnC9W,GAAMF,MAAM,GAAGgX,CAAAA,IAAkB,OAQrC9W;EAAAA,CAAAA;AAAAA;AAAAA,SAAAA,qBAAAA,IAAAA;AAAAA,MAAAA,MAAAA,QAAAA,EAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,MAAAA,KAAAA,EAAAA;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AAAAA,SAAAA,6BAAAA,IAAAA,GAAAA;AAAAA,MAAAA,CAAAA;AAAAA,UAAAA,IAAAA,eAAAA,2DAAAA;AAAAA,SAAAA,CAAAA,KAAAA,YAAAA,OAAAA,KAAAA,cAAAA,OAAAA,IAAAA,KAAAA;AAAAA;AAAAA,SAAAA,YAAAA,IAAAA,GAAAA;AAAAA,MAAAA,cAAAA,OAAAA,KAAAA,SAAAA;AAAAA,UAAAA,IAAAA,UAAAA,6DAAAA,OAAAA,CAAAA;AAAAA,EAAAA,GAAAA,YAAAA,OAAAA,OAAAA,KAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,OAAAA,IAAAA,YAAAA,OAAAA,UAAAA,MAAAA,cAAAA,KAAAA,EAAAA,CAAAA,GAAAA,MAAAA,OAAAA,iBAAAA,OAAAA,eAAAA,IAAAA,CAAAA,IAAAA,GAAAA,YAAAA;AAAAA;AAAAA,SAAAA,qBAAAA,IAAAA;AAAAA,MAAAA,MAAAA,QAAAA,EAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,MAAAA,GAAAA,MAAAA,GAAAA,IAAAA,GAAAA,QAAAA;AAAAA,QAAAA,CAAAA,IAAAA,GAAAA,CAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,MAAAA,KAAAA,EAAAA;AAAAA;AAAAA,SAAAA,kBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;AAAAA,SAAAA,6BAAAA,IAAAA,GAAAA;AAAAA,MAAAA,CAAAA;AAAAA,UAAAA,IAAAA,eAAAA,2DAAAA;AAAAA,SAAAA,CAAAA,KAAAA,YAAAA,OAAAA,KAAAA,cAAAA,OAAAA,IAAAA,KAAAA;AAAAA;AAAAA,SAAAA,YAAAA,IAAAA,GAAAA;AAAAA,MAAAA,cAAAA,OAAAA,KAAAA,SAAAA;AAAAA,UAAAA,IAAAA,UAAAA,6DAAAA,OAAAA,CAAAA;AAAAA,EAAAA,GAAAA,YAAAA,OAAAA,OAAAA,KAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,OAAAA,IAAAA,YAAAA,OAAAA,UAAAA,MAAAA,cAAAA,KAAAA,EAAAA,CAAAA,GAAAA,MAAAA,OAAAA,iBAAAA,OAAAA,eAAAA,IAAAA,CAAAA,IAAAA,GAAAA,YAAAA;AAAAA;AAAAA,SAAAA,gBAAAA,IAAAA,GAAAA;AAAAA,MAAAA,EAAAA,cAAAA;AAAAA,UAAAA,IAAAA,UAAAA,mCAAAA;AAAAA;ACzGT,SAASkX,iBAAAA;AAAAA,MAAehB,KAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAY,QAAQ9R,IAAAA,UAAAA,CAAAA,GAAQ6C,IAAAA,UAAAA,CAAAA;AAAAA,SACjC,iBAAdiP,MAAAA,EACK9c,OAAO,QACR,IAAI+d,UAAU/S,GAAQ6C,CAAAA,KAGzBmQ,WAAWlB,EAAAA,IAKT,IAAIkB,WAAWlB,EAAAA,EAAW9R,GAAQ6C,CAAAA,IAAAA,KAAAA,QAJhCoQ,MAAM,2BAA2BnB,EAAAA;AAAAA;AAAAA,IAAAA,WAAAA;AAAAA,YAAAA,QAAAA;AAAAA,IAAAA,UAAAA,cAAAA,OAAAA,UAAAA,YAAAA,OAAAA,OAAAA,WAAAA,SAAAA,IAAAA;AAAAA,SAAAA,OAAAA;AAAAA,IAAAA,SAAAA,IAAAA;AAAAA,SAAAA,MAAAA,cAAAA,OAAAA,UAAAA,GAAAA,gBAAAA,UAAAA,OAAAA,OAAAA,YAAAA,WAAAA,OAAAA;AAAAA;AbZ3Cvc,EAAEwV,SAAS,SAAC/L,IAAK1B,GAAAA;AAAAA,MACZ1H,IAAUjB,SAASI,cAAciK,EAAAA;AAAAA,WAE5BxC,KAAKc,GAAG;AAAA,QACZ4B,IAAM5B,EAAEd,CAAAA;AAAAA,QAEF,aAANA;AAAAA,QACD0C,CAAAA,EAAK/J,YAAYS,CAAAA;aAEL,aAAN4G,GAAgB;AAAA,UACpB/H,IAAMc,EAAE2J,CAAAA;AAAAA,QACRC,WAAWjK,aAAaU,GAASnB,CAAAA,GAAAA,EAC7BU,YAAYV,CAAAA;IAAAA;AAEJ,mBAAN+H,IACQ,cAAA,WAAR0C,IAAAA,cAAAA,QAAAA,CAAAA,MAAAA,OACFE,KAAKF,CAAAA,EAAKG,IAAI,SAAA/D,IAAA;AAAA,UACZxG,MAAMwK,EAAAA,IAAQJ,EAAII,EAAAA;MAAAA,CAAAA,IAGlB9C,KAAK5G,IAAAA,EACP4G,CAAAA,IAAK0C,IAAAA,EAGLK,aAAa/C,GAAG0C,CAAAA;EAAAA;AAAAA,SAInBtJ;AAAAA;ACxBD,IAAMsd,gBAAAA,EAAAA,SAAAA,EAAAA,KAEN,IAAA,QACG,IAAA,MACF,IAAA,OACC,GAAA,GAAA,UAAA,EAAA,KAGF,IAAA,QACG,IAAA,MACF,IAAA,OACC,GAAA,GAAA,YAGI,KAAA,aACC,IAAA,cACC,IAAA,eAEC,GAAA;AAlBT,IA2CMC,4BAA4B;AA3ClC,IA4CMC,6BAA6B;AA5CnC,IA+CMC,2BAAAA,CAA4B,QAAQ,KAAA;AA/C1C,IAiDMC,uBAAuB;AAjD7B,IAmDMC,wBAAwB;AAnD9B,IAoDMC,yBAAyB;AApD/B,IAsDMC,sBAAsB;AAtD5B,IAuDMC,wBAAwB;AAvD9B,IAyDMC,gCAAgC;AAzDtC,IA0DMC,+BAA+B;AA1DrC,IA8DMC,4BAA4B;AA9DlC,IAgEMC,sBAAsB;AAhE5B,IAiEMC,sBAAsB;AAjE5B,IAmEMC,qBAAqB;AAnE3B,IAqEMC,kCAAkC;AArExC,IAuEDC,uBAAAA,CAAwB,cAAc,QAAQ,UAAU,OAAO,UACpE,UAAU,SAAS,eAAe,UAAU,WAAW,cAAc,WAAA;AAxE/D,IAyEDC,uBAAAA,CAAwB,WAAW,WAAW,WAAW,WAAW,SAAA;AAzEnE,IA6EMC,iBAAAA,EAAAA,KACPF,sBAAAA,MACCA,sBAAAA,KACDA,sBAAAA,YACOA,sBAAAA,SACHC,sBAAAA,OACFD,qBAAAA;AAnFD,IAuFMG,cAAcC,KAAKC,KAAK;AAvF9B,IAwFMC,aAAa;AAxFnB,IAwFmB,iBAAA,WAAA;AAAA,WAAAC,GAAAA,IAAA,GAAA;AAAA,aAAA,IAAA,GAAA,IAAA,EAAA,QAAA,KAAA;AAAA,UAAA,IAAA,EAAA,CAAA;AAAA,QAAA,aAAA,EAAA,cAAA,OAAA,EAAA,eAAA,MAAA,WAAA,MAAA,EAAA,WAAA,OAAA,OAAA,eAAAA,IAAA,EAAA,KAAA,CAAA;IAAA;EAAA;AAAA,SAAA,SAAA,GAAA,GAAA,GAAA;AAAA,WAAA,KAAAA,GAAA,EAAA,WAAA,CAAA,GAAA,KAAAA,GAAA,GAAA,CAAA,GAAA;EAAA;AAAA,EAAA;AAxFnB,IafcC,SAAAA,WAAAA;AAAAA,WAAAA,GAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAEnBC,QAAAA,IAAAA,WAAAA,IAAS,OAAA,GAAA,IAAA,EACTC,QAAAA,IAAAA,WAAAA,IAAAA,CAAAA,IAAAA;AAAAA,sBAAAA,MAAAA,EAAAA,GAAAA,KAEKD,SAASA,GAAAA,KACTC,SAASA,GAAAA,KACTC,YAAY,IAAA,KACZC,aAAa,IAAA,KACbC,aAAAA,CAAAA,GAAAA,KACAC,kBAAkB,GAAA,KAElBC,IAAI,GAAA,KACJC,IAAI,GAAA,KAEJC,MAAM,GAAA,KACNC,OAAO,GAAA,KAEPC,MAAAA;EAAAA;AAAAA,SAAAA,eAAAA,IAAAA,CAAAA,EAAAA,KAAAA,SAAAA,OAAAA,WAAAA;AAAAA,SAIAC,YAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,WAAAA,OAAAA,WAAAA;AAAAA,SAIAC,KAAAA,GAAAA,KACAC,aAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAIAC,YAAYC,EAAEC,OAAO,OAAA,EAAA,QACjBC,KAAKjB,QAAAA,WACF,4BAAA,WAAA,0GAAA,CAAA,GAAA,KAKPkB,QAAAA,GAAAA,KAEAC,QAAQF,KAAKH,UAAUM,cAAc,QAAA,GAAA,KACrCC,gBAAgBJ,KAAKH,UAAUM,cAAc,kBAAA,GAAA,KAE7CpB,OAAOsB,iBAAiB,cAAc,WAAA;AAAA,MAAAxB,GACrCoB,QAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MAKFC,IAAAA;AACDF,SAAKM,SAAAA,KACFT,UAAUU,aAAa,oBAAoBP,KAAKM,KAAAA,GAAAA,IAEnDN,KAAKZ,kBAAAA,aACYY,KAAKd,aAAAA,cAAsBc,KAAKf,YAExCe,KAAKf,YAAAA,aAAoBe,KAAKd,aAAAA,aAAAA,KAErCgB,MAAMM,YAAYN,GAAAA,KAClBE,cAAcI,YAAY,IAAA,KAE1BrB,WAAWsB,IAAI,SAACC,IAAKC,GAAAA;AAAAA,UACnBC,IAAQC,GAAK7B,OAAO2B,CAAAA,KAAM,SAC5BG,IAA0B,MAAlBJ,GAAIK,aAAmBL,GAAIK,YAAYL,GAAIK,YAAYL,GAAII,OAEnEE,IAAKlB,EAAEC,OAAO,MAAA,EAAA,QAAA,EAAA,cAAA,eAEWa,EAAAA,GAAAA,WAAAA,sCAE6B,MAAVE,KAAeA,IAAQA,IAAQ,MAAA,sBAC3EJ,GAAIR,QAAQQ,GAAIR,QAAQ,IAAA,CAAA;AAAA,MAAArB,GAGvBuB,cAAca,YAAYD,CAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,WAAAA;AAAAA,QAK5BE,KAAQlB,KAAKH,UAAUsB;AAAAA,SAEtB5B,MAAMS,KAAKV,IAAIU,KAAKH,UAAUuB,eAChC/C,iCAAAA,KACEmB,OAAOQ,KAAKX,IAAI6B,KAAM;AAAA,QACvBG,IAAUrB,KAAKjB,OAAOoC,cAAcD,IAEpCI,IAAUtB,KAAKH,UAAUM,cAAc,cAAA;AAAA,QAExCH,KAAKR,OAAO;AAAA,QACN+B,MAAM/B,OAAAA,gBAAAA,KAA0BQ,KAAKR,OAAAA,OAAAA,KACxCA,OAAO;aACHQ,KAAKR,OAAO6B,GAAS;AAAA,UAE1BG,IAAAA,iBADQxB,KAAKR,OAAO6B,KAAAA;AAAAA,QAEhBE,MAAM/B,OAAOgC,GAAAA,KAEhBhC,OAAO6B;IAAAA;AAAAA,QAEJE,MAAM/B,OAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,aAAAA,OAAAA,SAINH,IAAGC,GAAAA;AAAAA,QAAGY,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAAYf,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA,CAAAA,GAAiBmB,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAAA;AAAS,SAChDrB,YAAYiB,EAAMuB,MAAAA,KAClBvC,aAAagB,EAAMY,OAAAA,KACnB3B,aAAaA,GAAAA,KACbE,IAAIA,IAAAA,KACJC,IAAIA,GAAAA,KACJF,kBAAkBc,EAAMwB,cAAc,GAAA,KACtCpB,QAAQA,GAAAA,KACRqB,QAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,WAAAA,OAAAA,WAAAA;AAAAA,SAIA9B,UAAU0B,MAAMhC,MAAM,OAAA,KACtBM,UAAU0B,MAAM/B,OAAO,OAAA,KACvBK,UAAU0B,MAAMK,UAAU;EAAA,EAAA,GAAA,EAAA,KAAA,WAAA,OAAA,WAAA;AAAA,SAI1B/B,UAAU0B,MAAMhC,MAAMS,KAAKT,MAAM,MAAA,KACjCM,UAAU0B,MAAM/B,OAAOQ,KAAKR,OAAO,MAAA,KACnCK,UAAU0B,MAAMK,UAAU;EAAA,EAAA,CAAA,CAAA,GAAA/C;AAAA,EAAA;Ab1G1B,Ia0G0B,YAAA,cAAA,OAAA,UAAA,YAAA,OAAA,OAAA,WAAA,SAAAA,IAAA;AAAA,SAAA,OAAAA;AAAA,IAAA,SAAAA,IAAA;AAAA,SAAAA,MAAA,cAAA,OAAA,UAAAA,GAAA,gBAAA,UAAAA,OAAA,OAAA,YAAA,WAAA,OAAAA;AAAA;Ab1G1B,IGlBDgD,mBAAAA,EAAAA,cACS,WAAA,MACN,WAAA,QACE,WAAA,KACH,WAAA,QACG,WAAA,QACA,WAAA,OACD,WAAA,eACM,WAAA,QACL,WAAA,SACC,WAAA,OACF,WAAA,MACD,WAAA,cACM,WAAA,aACD,UAAA;AHIP,IG0BMC,WAAW,SAAClB,IAAAA;AAAAA,SAEpB,4BAA6BmB,KAAKnB,EAAAA,IAAAA,8BACEoB,KAAKpB,EAAAA,EAC1CH,IAAI,SAACpB,IAAGsB,GAAAA;AAAAA,WAAa,MAANA,IAAUsB,OAAO5C,EAAAA,EAAG6C,SAAS,EAAA,IAAM;EAAA,CAAA,EAClDC,OAAO,SAACC,IAAGC,GAAAA;AAAAA,WAAAA,KAAUD,KAAIC;EAAAA,CAAAA,IAErBR,iBAAiBjB,EAAAA,KAAUA;AAAAA;AHjC5B,IGiC4BA,iBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,QAAAA,IAAAA,CAAAA,GAAAA,IAAAA,MAAAA,IAAAA,OAAAA,IAAAA;AAAAA,QAAAA;AAAAA,eAAAA,GAAAA,IAAAA,GAAAA,OAAAA,QAAAA,EAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,UAAAA,EAAAA,KAAAA,EAAAA,KAAAA,GAAAA,CAAAA,KAAAA,EAAAA,WAAAA,IAAAA,IAAAA;AAAAA;IAAAA,SAAAA,IAAAA;AAAAA,UAAAA,MAAAA,IAAAA;IAAAA,UAAAA;AAAAA,UAAAA;AAAAA,SAAAA,KAAAA,EAAAA,UAAAA,EAAAA,OAAAA;MAAAA,UAAAA;AAAAA,YAAAA;AAAAA,gBAAAA;MAAAA;IAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA;AAAAA,QAAAA,MAAAA,QAAAA,CAAAA;AAAAA,aAAAA;AAAAA,QAAAA,OAAAA,YAAAA,OAAAA,CAAAA;AAAAA,aAAAA,GAAAA,GAAAA,CAAAA;AAAAA,UAAAA,IAAAA,UAAAA,sDAAAA;EAAAA;AAAAA,EAAAA;AHjC5B,IGiC4BA,YAAAA,cAAAA,OAAAA,UAAAA,YAAAA,OAAAA,OAAAA,WAAAA,SAAAA,IAAAA;AAAAA,SAAAA,OAAAA;AAAAA,IAAAA,SAAAA,IAAAA;AAAAA,SAAAA,MAAAA,cAAAA,OAAAA,UAAAA,GAAAA,gBAAAA,UAAAA,OAAAA,OAAAA,YAAAA,WAAAA,OAAAA;AAAAA;AHjC5B,IIbM0B,mBAAmB;AJazB,IIZDC,eAAe;AJYd,IIXDC,kBAAkB;AJWjB,IIVMC,YAAY;AJUlB,IITDC,kBAAkB;AJSjB,IIRDC,YAAY;AJQX,II0lBIC,cAAAA,EAAAA,KACH,SAACC,IAAAA;AAAAA,MACHC,IAAAA;AACiB,aAAlBD,GAAKE,aAAAA,IACUF,GAAKG,aAAa,WAAA,GAAAnE,KAC5BgE,GAAKI,WAAW,CAAA;AAAA,MAEpBC,IAAUL,GAAKM,UAAAA;AAAAA,SAAAA,EACX5B,MAAM5B,OAAO,WAAA,EACb4B,MAAMK,UAAU,OAErBkB,KAAAA,EACMvC,aAAa,aAAauC,CAAAA,GAE5BI;AAAAA,GAAAA,KAGD,SAACL,IAAAA;AAAAA,MACHC,IAAAA;AACiB,eAAlBD,GAAKE,aAAAA,IACUF,GAAKG,aAAa,WAAA,GAAAnE,KAC5BgE,GAAKI,WAAW,CAAA;AAAA,MAEpBC,IAAUL,GAAKM,UAAAA,GACfC,IAASP,GAAKG,aAAa,GAAA,GAC3BrD,IAAOkD,GAAKG,aAAa,MAAA;AAAA,SAAA,EACrBzC,aAAa,KAAK8C,SAASD,CAAAA,IAAUtF,qBAAAA,GAAAA,EACrCyC,aAAa,QAAQZ,CAAAA,GAAAA,EACrB4B,MAAMK,UAAU,OAErBkB,KAAAA,EACMvC,aAAa,aAAauC,CAAAA,GAE5BI;AAAAA,GAAAA,aAGO,SAACL,IAAAA;AAAAA,MACXC,IAAAA;AACiB,eAAlBD,GAAKE,aAAAA,IACUF,GAAKG,aAAa,WAAA,GAAAnE,KAC5BgE,GAAKI,WAAW,CAAA;AAAA,MAEpBC,IAAUL,GAAKM,UAAAA,GACfC,IAASP,GAAKG,aAAa,GAAA,GAC3BrD,IAAOkD,GAAKG,aAAa,MAAA;AAAA,SAAA,EACrBzC,aAAa,KAAK8C,SAASD,CAAAA,IAAUtF,qBAAAA,GAAAA,EACrCyC,aAAa,QAAQZ,CAAAA,GAAAA,EACrB4B,MAAMK,UAAU,OAErBkB,KAAAA,EACMvC,aAAa,aAAauC,CAAAA,GAE5BI;AAAAA,EAAAA;AJ9oBF,IIkpBII,gBAAAA,EAAAA,KACH,SAACT,IAAMK,GAAAA;AAAAA,MACTJ,IAAAA;AACiB,aAAlBD,GAAKE,aAAAA,IACUF,GAAKG,aAAa,WAAA,GAAAnE,KAC5BgE,GAAKI,WAAW,CAAA;AAAA,MAEpBM,IAAAA,CAAc,KAAK,KAAK,SAAS,QAAA;AAAA,SAC9BC,OAAOX,GAAKU,UAAAA,EACjBE,OAAO,SAAA5E,IAAA;AAAA,WAAQ0E,EAAWG,SAASC,GAAKlC,IAAAA,KAASkC,GAAKC;EAAAA,CAAAA,EACtDnD,IAAI,SAAA5B,IAAA;AAAA,MACI0B,aAAaoD,GAAKlC,MAAMkC,GAAKE,SAAAA;EAAAA,CAAAA,GAGpCf,KAAAA,EACMvC,aAAa,aAAauC,CAAAA;AAAAA,GAAAA,KAI7B,SAACD,IAAMK,GAAAA;AAAAA,MACTJ,IAAAA;AACiB,eAAlBD,GAAKE,aAAAA,IACUF,GAAKG,aAAa,WAAA,GAAAnE,KAC5BgE,GAAKI,WAAW,CAAA;AAAA,MAEpBM,IAAAA,CAAc,MAAM,IAAA;AAAA,SACjBC,OAAOX,GAAKU,UAAAA,EACjBE,OAAO,SAAA5E,IAAA;AAAA,WAAQ0E,EAAWG,SAASC,GAAKlC,IAAAA,KAASkC,GAAKC;EAAAA,CAAAA,EACtDnD,IAAI,SAAA5B,IAAA;AAAA,MACI0B,aAAaoD,GAAKlC,MAAMkC,GAAKE,SAAAA;EAAAA,CAAAA,GAGpCf,KAAAA,EACMvC,aAAa,aAAauC,CAAAA;AAAAA,GAAAA,aAIrB,SAACD,IAAMK,GAAAA;AAAAA,MACjBJ,IAAAA;AACiB,eAAlBD,GAAKE,aAAAA,IACUF,GAAKG,aAAa,WAAA,GAAAnE,KAC5BgE,GAAKI,WAAW,CAAA;AAAA,MAEpBM,IAAAA,CAAc,MAAM,IAAA;AAAA,SACjBC,OAAOX,GAAKU,UAAAA,EACjBE,OAAO,SAAA5E,IAAA;AAAA,WAAQ0E,EAAWG,SAASC,GAAKlC,IAAAA,KAASkC,GAAKC;EAAAA,CAAAA,EACtDnD,IAAI,SAAA5B,IAAA;AAAA,MACI0B,aAAaoD,GAAKlC,MAAMkC,GAAKE,SAAAA;EAAAA,CAAAA,GAGpCf,KAAAA,EACMvC,aAAa,aAAauC,CAAAA;AAAAA,EAAAA;AJrsB9B,IIqsB8BA,mBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,QAAAA,IAAAA,CAAAA,GAAAA,IAAAA,MAAAA,IAAAA,OAAAA,IAAAA;AAAAA,QAAAA;AAAAA,eAAAA,GAAAA,IAAAA,GAAAA,OAAAA,QAAAA,EAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,UAAAA,EAAAA,KAAAA,EAAAA,KAAAA,GAAAA,CAAAA,KAAAA,EAAAA,WAAAA,IAAAA,IAAAA;AAAAA;IAAAA,SAAAA,IAAAA;AAAAA,UAAAA,MAAAA,IAAAA;IAAAA,UAAAA;AAAAA,UAAAA;AAAAA,SAAAA,KAAAA,EAAAA,UAAAA,EAAAA,OAAAA;MAAAA,UAAAA;AAAAA,YAAAA;AAAAA,gBAAAA;MAAAA;IAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA;AAAAA,QAAAA,MAAAA,QAAAA,CAAAA;AAAAA,aAAAA;AAAAA,QAAAA,OAAAA,YAAAA,OAAAA,CAAAA;AAAAA,aAAAA,GAAAA,GAAAA,CAAAA;AAAAA,UAAAA,IAAAA,UAAAA,sDAAAA;EAAAA;AAAAA,EAAAA;AJrsB9B,IKhBMgB,gBAAgB;ALgBtB,IKfMC,gBAAgB;ALetB,IKdMC,uBAAuBF;ALc7B,IKbMG,sBAAsB;ALa5B,IKXMC,aAAa;ALWnB,IKXmB,mBAAA,WAAA;AAAA,WAAArF,GAAAA,IAAA,GAAA;AAAA,QAAA,IAAA,CAAA,GAAA,IAAA,MAAA,IAAA,OAAA,IAAA;AAAA,QAAA;AAAA,eAAA,GAAA,IAAAA,GAAA,OAAA,QAAA,EAAA,GAAA,EAAA,KAAA,IAAA,EAAA,KAAA,GAAA,UAAA,EAAA,KAAA,EAAA,KAAA,GAAA,CAAA,KAAA,EAAA,WAAA,IAAA,IAAA;AAAA;IAAA,SAAAA,IAAA;AAAA,UAAA,MAAA,IAAAA;IAAA,UAAA;AAAA,UAAA;AAAA,SAAA,KAAA,EAAA,UAAA,EAAA,OAAA;MAAA,UAAA;AAAA,YAAA;AAAA,gBAAA;MAAA;IAAA;AAAA,WAAA;EAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,QAAA,MAAA,QAAA,CAAA;AAAA,aAAA;AAAA,QAAA,OAAA,YAAA,OAAA,CAAA;AAAA,aAAAA,GAAA,GAAA,CAAA;AAAA,UAAA,IAAA,UAAA,sDAAA;EAAA;AAAA,EAAA;ALWnB,IMdDsF,SAAAA,EAAAA,MACC,mBAAA,QACE,WAAA,QAEA,iBAAA,SACC,cAAA,WACE,gBAAA;ANQL,IclBMC,UAAU;AdkBhB,IclBgB,iBAAA,WAAA;AAAA,WAAAvF,GAAAA,IAAA,GAAA;AAAA,aAAA,IAAA,GAAA,IAAA,EAAA,QAAA,KAAA;AAAA,UAAA,IAAA,EAAA,CAAA;AAAA,QAAA,aAAA,EAAA,cAAA,OAAA,EAAA,eAAA,MAAA,WAAA,MAAA,EAAA,WAAA,OAAA,OAAA,eAAAA,IAAA,EAAA,KAAA,CAAA;IAAA;EAAA;AAAA,SAAA,SAAA,GAAA,GAAA,GAAA;AAAA,WAAA,KAAAA,GAAA,EAAA,WAAA,CAAA,GAAA,KAAAA,GAAA,GAAA,CAAA,GAAA;EAAA;AAAA,EAAA;AdkBhB,IeRcwF,YAAAA,WAAAA;AAAAA,WAAAA,GACRtF,GAAQuF,GAAAA;AAAAA,QAAAA,kBAAAA,MAAAA,EAAAA,GAAAA,IAETC,UAAUD,CAAAA,GAAAA,KAEfvF,SAA2B,YAAA,OAAXA,IAClByF,SAASrE,cAAcpB,CAAAA,IACvBA,GAAAA,EAEGiB,KAAKjB,kBAAkB0F;AAAAA,YACtB,IAAIC,MAAM,gDAAA;AAAA,SAGZC,eAAeL,GAAAA,KAEfpE,QAAQoE,EAAQpE,SAAS,IAAA,KACzB0E,OAAON,EAAQM,QAAQ,IAAA,KAEvBC,WAAW7E,KAAK8E,YAAYR,EAAQS,IAAAA,GAAAA,KACpCA,OAAO/E,KAAKgF,iBAAiBhF,KAAK6E,QAAAA,GAAAA,KAElC7F,SAASgB,KAAKiF,eAAeX,EAAQtF,QAAQgB,KAAK4E,IAAAA,GAAAA,KAElDM,SAAAA,EAAAA,aACS,GAAA,YACD,GAAA,aACCZ,EAAQa,eAAe,GAAA,SAAA,WACnBb,EAAQc,UAA2Bd,EAAQc,UAAU,GAAA,iBACrDd,EAAQe,mBAAmB,EAAA,GAAA,KAGxCC,WAAWC,KAAKC,MAAMD,KAAKE,UAAUC,aAAAA,CAAAA;AAAAA,QACtCC,IAAI3F,KAAKsF;AAAAA,SACRM,YAAYtB,CAAAA,GACbtE,KAAKE,MAAM2F,WAAAA,EAAYC,cAAc,IACrC9F,KAAKkF,OAAOa,eAAYJ,EAAEK,eAAe,IAAA,KACxCC,YAAY3B,EAAQ4B,UAAUP,EAAEQ,YAAAA,KAEhCC,QAAAA,CAAAA,GAAAA,KACA9B,UAAAA,CAAAA,GAAAA,KAEA+B,cAAcC,2BAEhBtG,KAAKkF,OAAOC,gBAAAA,KACToB,WAAAA,CAAAA,IAAAA,KAGDC,UAAUlC,CAAAA;EAAAA;AAAAA,SAAAA,eAAAA,IAAAA,CAAAA,EAAAA,KAAAA,eAAAA,OAAAA,SAGJS,IAAAA;AAAAA,WACJA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,oBAAAA,OAAAA,SAGSA,IAAAA;AAAAA,WACTA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,kBAAAA,OAAAA,SAGO/F,IAAQ4F,GAAAA;AAAAA,QAChB6B,IAAAA,CAAAA;AAAAA,YAAAA,MACIzH,MAAAA,CAAAA,GAAc0H,OAAOlI,eAAeoG,CAAAA,CAAAA,GACvC+B,QAAQ,SAACC,IAAAA;AAAAA,UACThG,KAAQkB,SAAS8E,EAAAA;AACnBC,mBAAajG,EAAAA,IAAAA,EAGJkG,KAAKlG,EAAAA,IAAAA,QAFTmG,KAAK,MAAMH,KAAS,yBAAA;IAAA,CAAA,GAKvBH;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,aAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MASHP,IAASlG,KAAKiG;AAAAA,SACbE,aAAaD,GAAAA,KACbA,SAASA,IAASc,eAAehH,KAAKsF,QAAAA,GAAAA,KAGtC2B,cAAc,WAAA;AAAA,aAAMC,GAAKC,KAAAA,IAAK;IAAA,GAC/BC,mBAAAA,KACEC,iBAAiB,IAAID,eAAepH,KAAKiH,WAAAA,GAAAA,KACzCI,eAAeC,QAAQtH,KAAKjB,MAAAA,IAAAA,OAE3BsB,iBAAiB,UAAUL,KAAKiH,WAAAA,GAAAA,OAChC5G,iBAAiB,qBAAqBL,KAAKiH,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,WAAAA,OAAAA,WAAAA;AAI9CjH,SAAKqH,kBAAgBrH,KAAKqH,eAAeE,WAAAA,GAAAA,OACtCC,oBAAoB,UAAUxH,KAAKiH,WAAAA,GAAAA,OACnCO,oBAAoB,qBAAqBxH,KAAKiH,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,SAAAA,OAAAA,WAAAA;AAAAA,SAKhDQ,cAAAA,GAAAA,KACAC,YAAAA,GAAAA,KACAhI,YAAAA,GAAAA,KAEAyH,KAAAA,OAAK,IAAO;EAAA,EAAA,GAAA,EAAA,KAAA,iBAAA,OAAA,WAAA;AAAA,SAKZpI,OAAOyB,YAAY;AAAA,QAEpBmH,KAAAA,EAAAA,QACK3H,KAAKjB,QAAAA,WACF,kBAAA;AAGTiB,SAAK4H,qBAAAA,GACFC,SAAAA,EAAW3G,OAAOlB,KAAK4H,mBAAmB,KAAA,IAAA,KAG3C/H,YAAYC,EAAEC,OAAO,OAAO4H,EAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,SAI5BG,MAAM,IAAIhJ,OAAAA,EAAAA,QACNkB,KAAKH,WAAAA,QACLG,KAAKhB,OAAAA,CAAAA,GAAAA,KAET+I,YAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MAKDC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA,GAAuBC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA;AACvBD,SAAmBE,SAASlI,KAAKjB,MAAAA,MAAAA,KAIhC2I,YAAAA,GAAAA,KAEAS,KAAKH,CAAAA,GAAAA,KACLI,cAAAA,GAAAA,KACAC,gBAAAA,GAAAA,KAEAC,WAAW3B,QAAQ,SAAA4B,IAAA;AAAA,aAAKnG,GAAE3C,MAAMoB,GAAK2H,QAAAA;IAAAA,CAAAA,GAAAA,KAErCC,OAAOzI,KAAKsI,YAAAA,KAAY,GAE1BL,MAAAA,KACGlD,OAAO/E,KAAK6E,UAAAA,WACN,WAAA;AAAA,MAAAhG,GAAY6J,OAAO7H,GAAKkE,IAAAA;IAAAA,GAAS/E,KAAKqG,WAAAA,IAAAA,KAG7CsC,aAAAA,GAAAA,KAEAC,gBAAgBX,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,SAMhBY,YAAYC,uBAAuB9I,KAAKjB,MAAAA,GAAAA,KACxCmC,QAAQlB,KAAK6I,YAAYE,cAAc/I,KAAKsF,QAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,iBAAAA,OAAAA,WAAAA;AAI9CtF,SAAKgJ,OAAAA,KACFnJ,UAAUoJ,YAAYjJ,KAAKgJ,GAAAA;AAAAA,QAE7BrD,KAAI3F,KAAKsF;AAAAA,SAER0D,MAAME,iBACVlJ,KAAKH,WACL,sBACAG,KAAK6I,WACL7I,KAAKmG,UAAAA,GAAAA,KAEDgD,UAAUC,YAAYpJ,KAAKgJ,GAAAA,GAE7BhJ,KAAKE,MAAM2F,WAAAA,KACRwD,UAAUC,SACd,SACA3D,GAAE4D,QAAQ/J,MACVmG,GAAE4D,QAAQhK,KACVS,KAAKE,OAAAA,EAAAA,UAEMyF,GAAE6D,eAAAA,MACN,WAAA,IACF7D,GAAE6D,cAAAA,CAAAA;AAAAA,QAKLjK,IAAMkK,aAAa9D,EAAAA;AAAAA,SAClB6C,WAAWkB,aACf1J,KAAK4E,OAAO,0BAAA,eACC+E,cAAchE,EAAAA,IAAAA,OAAOpG,IAAAA,GAAAA,GAGhCS,KAAKkF,OAAOa,eAAAA,KACP/F,KAAKkG,SAASP,GAAEiE,SAASC,QAAAA,KAC3BC,aAAaJ,aACjB,gBAAA,eACaC,cAAchE,EAAAA,IAAAA,OAAOpG,IAAAA,GAAAA,IAIjCS,KAAKE,MAAM2F,UAAAA,KAAemD,IAAI/H,YAAYjB,KAAKqJ,OAAAA,GAAAA,KAC7CL,IAAI/H,YAAYjB,KAAKwI,QAAAA,GACvBxI,KAAKkF,OAAOa,cAAAA,KAAmBiD,IAAI/H,YAAYjB,KAAK8J,UAAAA,GAAAA,KAElDC,gBAAgBJ,cAAchE,EAAAA,GAAI8D,aAAa9D,EAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,SAGrCtG,IAAGC,GAAAA;AAAAA,SACbwI,IAAIkC,SAAAA,EAAAA,GACL3K,IAAAA,GACAC,EAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;AAAAA,SAIoBgJ,aAAa,oBAAI2B;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,UAAAA,OAAAA,SAEnClF,IAAAA;AACFA,IAAAA,MAAAA,QACKmF,MAAM,oBAAA,GAAA,KAEVnF,OAAO/E,KAAK8E,YAAYC,EAAAA,GAAAA,KACxBoD,KAAAA,GAAAA,KACAM,OAAOzI,KAAKsI,YAAYtI,KAAKkF,OAAOE,OAAAA,GAAAA,KACpCuD,aAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,UAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MAGCL,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAWtI,KAAKsI,YAAYlD,IAAAA,EAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,MAAAA,UAAAA,CAAAA;AAC/BpF,SAAKkF,OAAOC,eAAAA,KAEToB,SAAS9F,IAAI,SAAA5B,IAAA;AAAA,aAAKsL,GAAEC,WAAWnB,YAAYkB,EAAAA;IAAAA,CAAAA;AAAAA,QAG7CE,IAAAA,CAAAA;AAAAA,MAEO1D,QAAQ,SAAA9H,IAAA;AAAA,UACEwL,EAAkB3D,OAAOtE,GAAEsG,OAAOtD,CAAAA,CAAAA;IAAAA,CAAAA,GAEpDiF,EAAkBxE,SAAS,KAAA,iBACZ7F,KAAKH,WAAWG,KAAKgJ,KAAKqB,CAAAA,GAAAA,WAChC,WAAA;AAAA,QACC1D,QAAQ,SAAA9H,IAAA;AAAA,eAAKuD,GAAEkI,KAAAA;MAAAA,CAAAA,GAAAA,GACrBC,UAAAA;IAAAA,GACHC,0BAAAA,MAAAA,EAEQ7D,QAAQ,SAAA9H,IAAA;AAAA,aAAKuD,GAAEkI,KAAAA;IAAAA,CAAAA,GAAAA,KACrBC,UAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,aAAAA,OAAAA,WAAAA;AAKHvK,SAAKkF,OAAOC,gBAAAA,KACTvC,YAAAA,GAAAA,KACA6H,UAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MAMSxC,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA;AACXjI,SAAKkF,OAAOC,eAEb8C,MAAAA,KACGyC,YAAAA,GAAAA,KAEAC,aAAAA,EAAAA,IACE3K,KAAK4K,WAAWC,KAAK7K,IAAAA,GAAAA,IACrBA,KAAK8K,YAAYD,KAAK7K,IAAAA,GAAAA,IACtBA,KAAK+K,UAAUF,KAAK7K,IAAAA,GAAAA,IACpBA,KAAKgL,aAAaH,KAAK7K,IAAAA,GAAAA,IACvBA,KAAKiL,YAAYJ,KAAK7K,IAAAA,EAAAA,GAAAA,SAGpBK,iBAAiB,WAAW,SAACkI,IAAAA;AAClC2C,0BAAoBC,GAAKtL,SAAAA,MAAAA,KACvB0I,MAAK6C,OAAOC,OACbF,GAAKR,WAAWpC,GAAE+C,OAAAA,KAAAA,GACfX,WAAWpC,GAAE+C,OAAAA,EAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,iBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,aAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,aAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,cAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,uBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,iBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,UAAAA,OAAAA,WAAAA;AAAAA,QA2BlBC,KAAWC,iBAAiBxL,KAAKgJ,GAAAA;AAAAA,iBACxBhJ,KAAKE,SAAS,SAAA,CAAUqL,EAAAA,CAAAA;EAAAA,EAAAA,CAAAA,CAAAA,GAAAA;AAAAA,EAAAA;Af/ShC,Ie+SgCA,iBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,EAAAA,QAAAA,KAAAA;AAAAA,UAAAA,IAAAA,EAAAA,CAAAA;AAAAA,QAAAA,aAAAA,EAAAA,cAAAA,OAAAA,EAAAA,eAAAA,MAAAA,WAAAA,MAAAA,EAAAA,WAAAA,OAAAA,OAAAA,eAAAA,IAAAA,EAAAA,KAAAA,CAAAA;IAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,KAAAA,GAAAA,EAAAA,WAAAA,CAAAA,GAAAA,KAAAA,GAAAA,GAAAA,CAAAA,GAAAA;EAAAA;AAAAA,EAAAA;Af/ShC,Ie+SgCA,SAAAA,SAAAA,EAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,MAAAA,IAAAA,SAAAA;AAAAA,MAAAA,IAAAA,OAAAA,yBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,WAAAA,GAAAA;AAAAA,QAAAA,IAAAA,OAAAA,eAAAA,CAAAA;AAAAA,WAAAA,SAAAA,IAAAA,SAAAA,EAAAA,GAAAA,GAAAA,CAAAA;EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA;AAAAA,MAAAA,IAAAA,EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA,KAAAA,CAAAA;AAAAA;Af/ShC,IgBZcE,mBAAAA,SAAAA,IAAAA;AAAAA,WAAAA,EACR1M,IAAQ4I,GAAAA;AAAAA,WAAAA,kBAAAA,MAAAA,CAAAA,GAAAA,6BAAAA,OAAAA,EAAAA,aAAAA,OAAAA,eAAAA,CAAAA,GAAAA,KAAAA,MACb5I,IAAQ4I,CAAAA,CAAAA;EAAAA;AAAAA,SAAAA,YAAAA,GAAAA,EAAAA,GAAAA,eAAAA,GAAAA,CAAAA,EAAAA,KAAAA,aAAAA,OAAAA,SAGLA,IAAAA;AAAAA,WAAAA,EAAAA,UAAAA,aAAAA,OAAAA,eAAAA,EAAAA,SAAAA,GAAAA,aAAAA,IAAAA,EAAAA,KAAAA,MACOA,EAAAA,GAAAA,KAEXzC,OAAOwG,kBAAkB/D,GAAKgE,kBAAAA,CAAAA,GAAsBD,gBAAAA,KACpDxG,OAAO0G,YAAYjE,GAAKiE,aAAa,IAAA,KACrC1G,OAAO2G,kBAAkBlE,GAAKkE,mBAAmB;EAAA,EAAA,GAAA,EAAA,KAAA,QAAA,OAAA,WAAA;AAAA,QAAAhN,KAAA,MAIlDiN,KAAI9L,KAAKoG,OACTwF,IAAY5L,KAAKkF,OAAO0G;AAAAA,IAAAA,GAC1BG,cAAAA,CAAAA;AAAAA,QAEEC,IAAYhM,KAAK+E,KAAKkH,OAAOxL,IAAI,SAACyL,IAAOvL,IAAAA;AAAAA,UACxCwL,KAAQ;AAAA,aAAAtN,GACPkG,KAAKqH,SAAS3L,IAAI,SAAA5B,IAAA;AAAA,QAAA8B,MACb4H,GAAE/E,OAAO7C,EAAAA;MAAAA,CAAAA,GAAAA,CAEXwL,IAAOD,EAAAA;IAAAA,CAAAA,EACbzI,OAAO,SAAA5E,IAAA;AAAA,aAAcwN,GAAE,CAAA,KAAM;IAAA,CAAA,GAE5BC,IAASN;AAAAA,QACVA,EAAUnG,SAAS+F,GAAW;AAAA,QAEtBW,KAAK,SAACC,IAAGC,IAAAA;AAAAA,eAAeA,GAAE,CAAA,IAAKD,GAAE,CAAA;MAAA,CAAA,GAAA,IAElCR,EAAUU,MAAM,GAAGd,IAAU,CAAA;AAAA,UAGlCe,IAAiB;AAFLX,QAAUU,MAAMd,IAAU,CAAA,EAGhCnL,IAAI,SAAA5B,IAAA;AAAA,aAAwBwN,GAAE,CAAA;MAAA,CAAA,GAAA,EACjCvF,KAAAA,CAAM6F,GAAgB,MAAA,CAAA,GAAA,KACxB3N,OAAO4M,IAAU,CAAA,IAAK;IAAA;AAAA,IAAArD,GAG1B0D,SAAAA,CAAAA,GAAAA,EACKxL,IAAI,SAAA5B,IAAA;AAAA,MAAA0J,GACRwD,YAAYjF,KAAK8F,MAAMP,GAAE,CAAA,CAAA,CAAA,GAAA9D,GACzB0D,OAAOnF,KAAKuF,GAAE,CAAA,CAAA;IAAA,CAAA,GAAA9D,GAGfsE,aAAaf,GAAEC,YAAY5J,OAAO,SAACqK,IAAGC,IAAAA;AAAAA,aAAMD,KAAIC;IAAAA,GAAG,CAAA,GAAA,KAEhDK,SAAAA,EAAAA,GACD9M,KAAKkB,QAAQ,GAAA,GACblB,KAAKkG,SAAS,EAAA;EAAA,EAAA,GAAA,EAAA,KAAA,gBAAA,OAAA,WAAA;AAAA,QAAArH,KAAA,MAKdiN,KAAI9L,KAAKoG;AAAAA,SACR0D,WAAWiD,cAAc,IAAA,KACzBC,eAAelB,GAAEC,YAAYW,MAAM,GAAG1M,KAAKkF,OAAO2G,eAAAA;AAAAA,QAEnDoB,IAAQ,GACR3N,IAAI;AAAA,SACH0N,aAAavM,IAAI,SAAC4L,GAAG1L,GAAAA;AAAAA,UACrBuM,IAAW,KACXC,IAAUzO,KAAK0O,OACjBC,GAAKnM,QAAQ6H,cAAcsE,GAAK/H,QAAAA,KAAW4H,CAAAA;AAEzCG,MAAAA,GAAKL,aAAanH,SAASsH,MAAAA,IACnBE,GAAKnM,QAAMmM,GAAKL,aAAanH,SAEtCoH,IAAQE,MAAAA,IACF,GAAA,KACH;AAAA,UAEF9N,IAAI6N,IAAWD,IAAQ,GACvBf,IAAQmB,GAAKnI,OAAOG,kBAAkBiI,eAAexB,GAAEG,OAAOtL,CAAAA,GAAIuM,IAAS,EAAA,IAAMpB,GAAEG,OAAOtL,CAAAA,GAC1FI,IAAYsM,GAAKnI,OAAOwG,iBAAiB2B,GAAKnI,OAAOwG,eAAeW,CAAAA,IAAKA,GACzEkB,IAAMC,UACTnO,GACAC,GACA,GACA+N,GAAKrO,OAAO2B,CAAAA,GACTuL,IAAAA,OAAUnL,GAAAA,KACb;AAAA,MAAAlC,GAEIiL,WAAW7I,YAAYsM,CAAAA,GAAAA;IAAAA,CAAAA;EAAAA,EAAAA,CAAAA,CAAAA,GAAAA;AAAAA,EApFelJ,SAAAA;AhBYvC,IQhBMoJ,oBAAoB;ARgB1B,IQfMC,qBAAqB;ARe3B,IQbMC,eAAe;ARarB,IQZMC,aAAa;ARYnB,IQVMC,cAAAA,CAAe,WAAW,YAAY,SAAS,SAAS,OACpE,QAAQ,QAAQ,UAAU,aAAa,WAAW,YAAY,UAAA;ARSxD,IQLMC,kBAAAA,CAAmB,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAA;ARKnE,IQLmE,mBAAA,WAAA;AAAA,WAAAjP,GAAAA,IAAA,GAAA;AAAA,QAAA,IAAA,CAAA,GAAA,IAAA,MAAA,IAAA,OAAA,IAAA;AAAA,QAAA;AAAA,eAAA,GAAA,IAAAA,GAAA,OAAA,QAAA,EAAA,GAAA,EAAA,KAAA,IAAA,EAAA,KAAA,GAAA,UAAA,EAAA,KAAA,EAAA,KAAA,GAAA,CAAA,KAAA,EAAA,WAAA,IAAA,IAAA;AAAA;IAAA,SAAAA,IAAA;AAAA,UAAA,MAAA,IAAAA;IAAA,UAAA;AAAA,UAAA;AAAA,SAAA,KAAA,EAAA,UAAA,EAAA,OAAA;MAAA,UAAA;AAAA,YAAA;AAAA,gBAAA;MAAA;IAAA;AAAA,WAAA;EAAA;AAAA,SAAA,SAAA,GAAA,GAAA;AAAA,QAAA,MAAA,QAAA,CAAA;AAAA,aAAA;AAAA,QAAA,OAAA,YAAA,OAAA,CAAA;AAAA,aAAAA,GAAA,GAAA,CAAA;AAAA,UAAA,IAAA,UAAA,sDAAA;EAAA;AAAA,EAAA;ARKnE,IQLmE,iBAAA,WAAA;AAAA,WAAAA,GAAAA,IAAA,GAAA;AAAA,aAAA,IAAA,GAAA,IAAA,EAAA,QAAA,KAAA;AAAA,UAAA,IAAA,EAAA,CAAA;AAAA,QAAA,aAAA,EAAA,cAAA,OAAA,EAAA,eAAA,MAAA,WAAA,MAAA,EAAA,WAAA,OAAA,OAAA,eAAAA,IAAA,EAAA,KAAA,CAAA;IAAA;EAAA;AAAA,SAAA,SAAA,GAAA,GAAA,GAAA;AAAA,WAAA,KAAAA,GAAA,EAAA,WAAA,CAAA,GAAA,KAAAA,GAAA,GAAA,CAAA,GAAA;EAAA;AAAA,EAAA;ARKnE,ISXDkP,iBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAEJC,YAAAA,IAAAA,WAAAA,IAAa,KAAA,GAAA,IAAA,EACbC,gBAAAA,IAAAA,WAAAA,IAAiB,KAAA,GACjBC,IAAAA,EAAAA,WAEAC,IAAAA,EAAAA,SACAC,IAAAA,EAAAA,cACAC,IAAAA,EAAAA;AAAAA,sBAAAA,MAAAA,EAAAA,GAAAA,KAEKJ,iBAAiBA,GAAAA,KACjBC,YAAYA,GAAAA,KAEZE,eAAeA,GAAAA,KACfD,UAAUA,GAAAA,KAEVE,kBAAkBA,GAAAA,KAElBC,QAAAA,CAAAA,GAAAA,KACArC,SAAAA,CAAAA,GAAAA,KAEA+B,aAAaA,GAAAA,KACbA,aAAyC,cAAA,OAArBhO,KAAKgO,aAC3BhO,KAAKgO,WAAAA,IAAehO,KAAKgO,YAAAA,KAEvBrM,QAAAA;EAAAA;AAAAA,SAAAA,eAAAA,IAAAA,CAAAA,EAAAA,KAAAA,WAAAA,OAAAA,SAGEoD,IAAAA;AAAAA,SACFA,OAAOA,MAAQ/E,KAAKmO,QAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,SAAAA,OAAAA,SAGpBpP,IAAAA;AAAAA,SACAwP,QAAQ7E,aAAa1J,KAAKgO,YAAYhO,KAAKiO,gBAAgBlP,EAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,WAAAA;AAAAA,SAI3D0J,OAAOzI,KAAK+E,IAAAA,GAAAA,KACZyJ,UAAUxO,KAAK+E;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,UAAAA,OAAAA,SAGdA,IAAAA;AAAAA,QAAAA,IAAAA;AAAAA,SACDuJ,QAAQtO,KAAKoO,aAAarJ,EAAAA,GAAAA,KAE1BwJ,MAAMxB,cAAc,IAAA,KACpBuB,MAAM3H,QAAQ,SAAA9H,IAAA;AAAA,QACb0P,MAAMtN,YAAYwN,EAAAA;IAAAA,CAAAA,GAAAA,KAEnBxC,OAAOtF,QAAQ,SAAA9H,IAAA;AAAA,QACd0P,MAAMtN,YAAYwN,EAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,UAAAA,OAAAA,WAAAA;AAAAA,QAIlBrJ,KAAAA,EAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,MAAAA,UAAAA,CAAAA;AAAAA,SACDzD,QAAAA;AAAAA,QACD0M,IAAAA,CAAAA;AAAAA,WACDjJ,OAAAA,IACgBpF,KAAKqO,gBAAgBrO,KAAK+E,IAAAA,KAAAA,CAAAA,IAEtCsJ;EAAAA,EAAAA,CAAAA,CAAAA,GAAAA;AAAAA,EAAAA;AThDF,ISoDHK,mBAAAA,EAAAA,aAAAA,EAAAA,YAEU,gBAAA,cAAA,SACC3J,IAAAA;AAAAA,SACLA,GAAK4J,aAAalO,IAAI,SAACqL,GAAGnL,GAAAA;AAAAA,QAC5B+L,IAAQkC,SAAS9C,GAAG,cAAc/G,GAAK/F,OAAO2B,CAAAA,GAAI,QAAQoE,GAAK8J,WAAAA;AAAAA,WAAAA,EAC7DtN,MAAMuN,aAAa,kBAClBpC;EAAAA,CAAAA;AAAAA,GAAAA,iBAAAA,SAIOqC,IAAAA;AAAAA,SACR/O,KAAKsO,MAAM7N,IAAI,SAACiM,GAAO/L,GAAAA;AAAAA,WAAMqO,eAAetC,GAAOqC,GAAQJ,aAAahO,CAAAA,CAAAA;EAAAA,CAAAA;AAAAA,EAAAA,GAAAA,WAAAA,EAAAA,YAIpE,cAAA,cAAA,SACCoE,IAAAA;AAAAA,SACLA,GAAK4J,aAAalO,IAAI,SAACqL,GAAGnL,GAAAA;AAAAA,QAC5B+L,IAAQkC,SAAS9C,GAAG,YAAY,QAAQ/G,GAAK/F,OAAO2B,CAAAA,CAAAA;AAAAA,WAAAA,EAClDY,MAAMuN,aAAa,kBAClBpC;EAAAA,CAAAA;AAAAA,GAAAA,iBAAAA,SAIOqC,IAAAA;AAAAA,SACR/O,KAAKsO,MAAM7N,IAAI,SAACiM,GAAO/L,GAAAA;AAAAA,WAC7BqO,eAAetC,GAAOqC,GAAQJ,aAAahO,CAAAA,CAAAA;EAAAA,CAAAA;AAAAA,EAAAA,GAAAA,gBAAAA,EAAAA,YAKjC,mBAAA,cAAA,SACCoE,IAAAA;AAAAA,MAAAA,IAAAA;AAAAA,SACLA,GAAKkK,WAAWxO,IAAI,SAACpB,GAAGsB,GAAAA;AAAAA,WAEpBuO,cAAc7P,GADhB,GACsB0F,GAAKoK,OAAOxO,CAAAA,GACzCE,EAAKqN,UAAUkB,WAAWvO,EAAKqN,UAAUmB,UAAUtK,GAAK/F,OAAO2B,CAAAA,CAAAA;EAAAA,CAAAA;AAAAA,GAAAA,iBAAAA,SAKlDoO,IAAAA;AAAAA,MACZA;AAAS,WAAA,CAAA;AAAA,EAAA,GAAA,OAAA,EAAA,YAID,UAAA,cAAA,SACChK,IAAAA;AAAAA,MAAAA,IAAAA;AAAAA,SACLA,GAAKuK,UAAU7O,IAAI,SAAC8O,GAAU5O,GAAAA;AAAAA,WACpC6O,MAAMD,GAAUxK,GAAKkH,OAAOtL,CAAAA,GAAI0M,EAAKa,UAAUhN,OAAAA,EAC7CuO,MAAMpC,EAAKa,UAAUuB,MAAMC,KAAKrC,EAAKa,UAAUwB,KAAKC,gBAAgBtC,EAAKa,UAAUyB,eAAAA,CAAAA;EAAAA,CAAAA;AAAAA,GAAAA,iBAAAA,SAIvEZ,IAAAA;AAAAA,MACXa,IAASb,GAAQO,WACjBO,IAAYd,GAAQ9C,QACpB6D,IAAS9P,KAAKwO,QAAQc,WACtBS,IAAY/P,KAAKwO,QAAQvC,QAAAA,IAEV+D,qBAAqBF,GAAQF,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA;AAAAA,MAAAA,IACvBI,qBAAqBD,GAAWF,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,SAAAA,IAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,KAEpDpH,OAAAA,EAAAA,WACOqH,GAAAA,QACHD,EAAAA,CAAAA,GAGF7P,KAAKsO,MAAM7N,IAAI,SAACwP,IAAMtP,IAAAA;AAAAA,WACrBuP,kBACND,IAAML,EAAOjP,EAAAA,GAAImP,EAAOnP,EAAAA,CAAAA;EAAAA,CAAAA;AAAAA,EAAAA,GAAAA,OAAAA,EAAAA,YAOf,UAAA,cAAA,SACCoE,IAAAA;AAAAA,MAAAA,IAAAA;AAAAA,SACLA,GAAKuK,UAAU7O,IAAI,SAAC8O,GAAU5O,GAAAA;AAAAA,WACpCwP,MAAMZ,GAAUxK,GAAKqL,WAAWzP,CAAAA,GAAIwK,EAAK+C,UAAUhI,QAAAA,EACjDuJ,MAAMtE,EAAK+C,UAAUuB,MAAMC,KAAKvE,EAAK+C,UAAUwB,IAAAA,CAAAA;EAAAA,CAAAA;AAAAA,GAAAA,iBAAAA,SAInCX,IAAAA;AAAAA,MACXa,IAASb,GAAQO,WACjBO,IAAYd,GAAQqB,YACpBN,IAAS9P,KAAKwO,QAAQc,WACtBS,IAAY/P,KAAKwO,QAAQ4B,YAAAA,IAEVJ,qBAAqBF,GAAQF,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA;AAAAA,MAAAA,IACvBI,qBAAqBD,GAAWF,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,SAAAA,IAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,KAEpDpH,OAAAA,EAAAA,WACOqH,GAAAA,YACCD,EAAAA,CAAAA,GAGN7P,KAAKsO,MAAM7N,IAAI,SAACwP,IAAMtP,IAAAA;AAAAA,WACrB0P,kBACNJ,IAAML,EAAOjP,EAAAA,GAAImP,EAAOnP,EAAAA,CAAAA;EAAAA,CAAAA;AAAAA,EAAAA,GAAAA,UAAAA,EAAAA,YAOf,aAAA,cAAA,SACCoE,IAAAA;AAAAA,MAAAA,IAAAA;AAAAA,SACLA,GAAKtE,IAAI,SAAA5B,IAAA;AAAA,WACfyR,QAAQ3K,GAAE4J,UAAU5J,GAAEuG,OAAOqE,EAAKrC,UAAUhN,OAAAA,EAC1CsP,UAAU7K,GAAErB,QAAQkM,UAAUf,MAAM,QAAQgB,UAAU,SAAA,CAAA;EAAA,CAAA;AAAA,GAAA,iBAAA,SAG1C1B,IAAAA;AAAAA,MAAAA,IACWiB,qBAAqBhQ,KAAKwO,SAASO,EAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,OAAvDP,UAAAA,EAAAA,CAAAA;AAAAA,MAEFoB,KAAAA,KAAAA,EAAAA,CAAAA,GAAiBnP,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAEkD;EAAAA,CAAAA,GAC5BM,IAAYd,GAAQtO,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAEH;EAAAA,CAAAA,GAC/BwE,IAAa3B,GAAQtO,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAE/H;EAAAA,CAAAA,GAEhCwL,IAAS9P,KAAKwO,QAAQ/N,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAEkD;EAAAA,CAAAA;AAAAA,SAAAA,KAEhC9G,OAAOqH,EAAOrP,IAAI,SAACiP,IAAK/O,IAAAA;AAAAA,WAAAA,EAAAA,UAEjBmP,EAAOnP,EAAAA,GAAAA,OACVkP,EAAUlP,EAAAA,GAAAA,SACR+P,EAAW/P,EAAAA,EAAAA;EAAAA,CAAAA,CAAAA,GAIfX,KAAKsO,MAAM7N,IAAI,SAACwP,IAAMtP,IAAAA;AAAAA,WACrBuP,kBACND,IAAML,EAAOjP,EAAAA,GAAImP,EAAOnP,EAAAA,CAAAA;EAAAA,CAAAA;AAAAA,EAAAA,GAAAA,UAAAA,EAAAA,YAOf,aAAA,cAAA,SACCoE,IAAAA;AAAAA,MAAAA,IAAAA;AAAAA,SACLA,GAAKtE,IAAI,SAAA5B,IAAA;AAAA,WACf8R,QAAQC,GAAEC,UAAUD,GAAEE,QAAQC,EAAK7C,UAAUhN,OAC5C0P,GAAE1E,OAAAA,EAAQsE,UAAUI,GAAEtM,QAAQkM,SAAAA,CAAAA;EAAAA,CAAAA;AAAAA,GAAAA,iBAAAA,SAGjBzB,IAAAA;AAAAA,MAAAA,IACWiB,qBAAqBhQ,KAAKwO,SAASO,EAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,OAAvDP,UAAAA,EAAAA,CAAAA;AAAAA,MAEFoB,KAAAA,KAAAA,EAAAA,CAAAA,GAAiBnP,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAEyE;EAAAA,CAAAA,GAC5BjB,IAAYd,GAAQtO,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAEH;EAAAA,CAAAA,GAC/B8E,IAAYjC,GAAQtO,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAEwE;EAAAA,CAAAA,GAC/BH,IAAa3B,GAAQtO,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAE/H;EAAAA,CAAAA,GAEhCwL,IAAS9P,KAAKwO,QAAQ/N,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAEyE;EAAAA,CAAAA,GACjCG,IAAYjR,KAAKwO,QAAQ/N,IAAI,SAAA5B,IAAA;AAAA,WAAKwN,GAAEwE;EAAAA,CAAAA;AAAAA,OAEnCpI,OAAOqH,EAAOrP,IAAI,SAACiP,IAAK/O,IAAAA;AAAAA,WAAAA,EAAAA,UAEjBsQ,EAAUtQ,EAAAA,GAAAA,QACZmP,EAAOnP,EAAAA,GAAAA,OACRkP,EAAUlP,EAAAA,GAAAA,SACR+P,EAAW/P,EAAAA,EAAAA;EAAAA,CAAAA,CAAAA;AAAAA,MAIlB0N,IAAAA,CAAAA;AAAAA,SAAAA,KAECC,MAAM7N,IAAI,SAACyQ,IAAWvQ,IAAAA;AAAAA,QACR0N,EAAgB3H,OAAOyK,cACxCD,IAAWF,EAAUrQ,EAAAA,GAAIiP,EAAOjP,EAAAA,GAAImP,EAAOnP,EAAAA,CAAAA,CAAAA;EAAAA,CAAAA,GAItC0N;AAAAA,EAAAA,GAAAA,YAAAA,EAAAA,YAKI,WAAA;AAAA,SAAoB,wBAAwBrO,KAAKkO,UAAU5N;AAAAA,GAAAA,cAAAA,SAC1DyE,IAAAA;AAAAA,MAAAA,IAAAA,MAAAA,IACuD/E,KAAKkO,WAAnE5N,IAAAA,EAAAA,OAAO8Q,IAAAA,EAAAA,UAAUC,IAAAA,EAAAA,WAAWC,IAAAA,EAAAA,YAAYlO,IAAAA,EAAAA,QAEzC/D,IAAAA,EAFiDkS,YAEjCjS,IAAI;AAAA,SAAA,KAEnBkS,uBAAAA,CAAAA,GAAAA,GAEAC,KAAKhR,IAAI,SAACiR,IAAMC,IAAAA;AACN,UAAXA,MAAAA,EACG1F,OAAOnF,KACXwC,SAAS,eAAejK,GAAAA,KAAoBuS,aAAatR,GAAAA,IAAO,EAAMuR,YAAAA,GAAAA,EAAAA,UAE1D,EAAA,CAAA,CAAA,GAAAhT,GAKT4B,IAAI,SAACqR,IAAKnR,IAAAA;AAAAA,UACXmR,GAAInS,MAAM;AAAA,YACRoF,KAAAA,EAAAA,aACU+M,GAAIC,UAAAA,cACHD,GAAIE,WAAAA,YACNrR,GAAAA,GAETsR,KAASC,WAAW,OAAO7S,GAAGC,GAAGgS,GAAYlO,GAAQ0O,GAAInS,MAAMoF,EAAAA;AAAAA,UAC9DyM,qBAAqB1K,KAAKmL,EAAAA;MAAAA;AAAAA,WAE3BZ;IAAAA,CAAAA,GAAAA,IAEF,GAAA,KACCD;EAAAA,CAAAA,GAGCpR,KAAKwR;AAAAA,GAAAA,iBAAAA,SAGGzC,IAAAA;AAAAA,MACZA;AAAS,WAAA,CAAA;AAAA,EAAA,GAAA,UAAA,EAAA,YAKD,WAAA;AAAA,SAAoB,wCAAwC/O,KAAKkO,UAAU5N;AAAAA,GAAAA,cAAAA,SAC1EyE,IAAAA;AAAAA,MACR3C,IAAIpC,KAAKkO;AAAAA,SAAAA,KACRiE,WAAW,OAAA,KACXC,QAAQrN,GAAKsN,WAAW5R,IAAI,SAACnB,GAAGgT,GAAAA;AAAAA,WAC7BC,WACNxN,GAAKkK,WAAWqD,CAAAA,GAChBhT,GACAyF,GAAKmI,UACL9K,EAAExB,OACFmE,GAAKkH,OAAOqG,CAAAA,GACZA,GACAvN,GAAKyN,QAAQF,CAAAA,GAAAA,EAAAA,UAEFvN,GAAK0N,UAAAA,WACJ1N,GAAK2N,WAAAA,WACLtQ,EAAEuQ,UAAAA,CAAAA;EAAAA,CAAAA,GAIT3S,KAAKoS;AAAAA,GAAAA,iBAAAA,SAEGrD,IAAAA;AAAAA,MACX6D,IAAU7D,GAAQE,YAClB4D,IAAU9D,GAAQsD,YAClBS,IAAa/D,GAAQyD,SACrB3C,IAAYd,GAAQ9C,QAEpB8G,IAAU/S,KAAKwO,QAAQS,YACvB+D,IAAUhT,KAAKwO,QAAQ6D,YACvBY,IAAajT,KAAKwO,QAAQgE,SAC1BzC,IAAY/P,KAAKwO,QAAQvC,QAAAA,IAER+D,qBAAqB+C,GAASH,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA;AAAAA,MAAAA,IAC9B5C,qBAAqBgD,GAASH,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA;AAAAA,MAAAA,IACxB7C,qBAAqBiD,GAAYH,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA;AAAAA,MAAAA,IACnC9C,qBAAqBD,GAAWF,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,KAEpDpH,OAAAA,EAAAA,YACQsK,GAAAA,YACAC,GAAAA,SACHC,GAAAA,QACDpD,GAAAA,UAEE7P,KAAKwO,QAAQiE,UAAAA,WACZzS,KAAKwO,QAAQkE,WAAAA,UACd1S,KAAKwO,QAAQtB,SAAAA,CAAAA;AAAAA,MAGpBmB,IAAAA,CAAAA;AAAAA,SAAAA,KAECC,MAAM7N,IAAI,SAACyS,IAAKvS,IAAAA;AAAAA,QACF0N,EAAgB3H,OAAOyM,WACxCD,IAAKN,EAAQjS,EAAAA,GAAIkS,EAAQlS,EAAAA,GAAIoO,GAAQ7B,UAAU4F,EAAWnS,EAAAA,GAAAA,EACzD8R,UAAU1D,GAAQ0D,SAAAA,CAAAA,CAAAA;EAAAA,CAAAA,GAIdpE;AAAAA,EAAAA,GAAAA,WAAAA,EAAAA,YAKI,WAAA;AAAA,SAAoB,wCAAwCrO,KAAKkO,UAAU5N;AAAAA,GAAAA,cAAAA,SAC1EyE,IAAAA;AAAAA,MACR3C,IAAIpC,KAAKkO;AAAAA,SAAAA,KACRiE,WAAW,OAAA,KACXiB,QAAAA,CAAAA,GACDhR,EAAEiR,aAAAA,KACAD,QAAQE,SACZvO,GAAKkK,YACLlK,GAAKsN,YACLjQ,EAAExB,OAAAA,EAAAA,UAESwB,EAAEmR,UAAAA,YACAnR,EAAEoR,YAAAA,QACNpR,EAAEqR,OAAAA,GAAAA,EAAAA,SAGDrR,EAAE+G,SAAAA,UACDpE,GAAK0N,SAAAA,CAAAA,IAAAA,KAKbL,QAAAA,CAAAA,GACDhQ,EAAEsR,aAAAA,KACAtB,QAAQrN,GAAKsN,WAAW5R,IAAI,SAACnB,GAAGgT,GAAAA;AAAAA,WAC7BqB,WACN5O,GAAKkK,WAAWqD,CAAAA,GAChBhT,GACAyF,GAAK3B,QACLhB,EAAExB,OACDwB,EAAEwR,mBAAmB7O,GAAKvB,OAAO8O,CAAAA,IAAK,IACvCA,CAAAA;EAAAA,CAAAA,IAKIuB,OAAOrQ,OAAOxD,KAAKoT,KAAAA,EAAO1M,OAAO1G,KAAKoS,KAAAA;AAAAA,GAAAA,iBAAAA,SAE9BrD,IAAAA;AAAAA,MACX6D,IAAU7D,GAAQE,YAClB4D,IAAU9D,GAAQsD,YAClByB,IAAY/E,GAAQvL,QAEpBuP,IAAU/S,KAAKwO,QAAQS,YACvB+D,IAAUhT,KAAKwO,QAAQ6D,YACvB0B,IAAY/T,KAAKwO,QAAQhL,QAAAA,IAERwM,qBAAqB+C,GAASH,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA;AAAAA,MAAAA,IAC9B5C,qBAAqBgD,GAASH,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA;AAAAA,MAAAA,IAC1B7C,qBAAqB+D,GAAWD,CAAAA,GAAAA,IAAAA,iBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,EAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,GAAAA,KAEpDrL,OAAAA,EAAAA,YACQsK,GAAAA,YACAC,GAAAA,QACJc,GAAAA,UAEE9T,KAAKwO,QAAQiE,UAAAA,QACfzS,KAAKwO,QAAQpL,OAAAA,CAAAA;AAAAA,MAGlBiL,IAAAA,CAAAA;AAAAA,SAEDwF,OAAOG,KAAKhU,KAAKoT,KAAAA,EAAOvN,WAAAA,IACRwI,EAAgB3H,OAAOuN,YACxCjU,KAAKoT,OAAOR,GAASC,GAAS9D,GAAQ0D,UAAUzS,KAAKkO,UAAUuF,MAAAA,CAAAA,IAG9DzT,KAAKoS,MAAMvM,UAAAA,KACRuM,MAAM3R,IAAI,SAAC8M,IAAK5M,IAAAA;AAAAA,QACF0N,EAAgB3H,OAAOwN,WACxC3G,IAAKqF,EAAQjS,EAAAA,GAAIkS,EAAQlS,EAAAA,CAAAA,CAAAA;EAAAA,CAAAA,GAIrB0N;AAAAA,EAAAA,EAAAA;AT9ZH,IS8ZGA,eAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,EAAAA,QAAAA,KAAAA;AAAAA,UAAAA,IAAAA,EAAAA,CAAAA;AAAAA,QAAAA,aAAAA,EAAAA,cAAAA,OAAAA,EAAAA,eAAAA,MAAAA,WAAAA,MAAAA,EAAAA,WAAAA,OAAAA,OAAAA,eAAAA,IAAAA,EAAAA,KAAAA,CAAAA;IAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,KAAAA,GAAAA,EAAAA,WAAAA,CAAAA,GAAAA,KAAAA,GAAAA,GAAAA,CAAAA,GAAAA;EAAAA;AAAAA,EAAAA;AT9ZH,IS8ZGA,OAAAA,SAAAA,GAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,MAAAA,IAAAA,SAAAA;AAAAA,MAAAA,IAAAA,OAAAA,yBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,WAAAA,GAAAA;AAAAA,QAAAA,IAAAA,OAAAA,eAAAA,CAAAA;AAAAA,WAAAA,SAAAA,IAAAA,SAAAA,GAAAA,GAAAA,GAAAA,CAAAA;EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA;AAAAA,MAAAA,IAAAA,EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA,KAAAA,CAAAA;AAAAA;AT9ZH,IiBbc8F,kBAAAA,SAAAA,IAAAA;AAAAA,WAAAA,EACRpV,IAAQ4I,GAAAA;AAAAA,sBAAAA,MAAAA,CAAAA;AAAAA,QAAAA,IAAAA,2BAAAA,OAAAA,EAAAA,aAAAA,OAAAA,eAAAA,CAAAA,GAAAA,KAAAA,MACb5I,IAAQ4I,CAAAA,CAAAA;AAAAA,WAAAA,EACT/C,OAAO,cAAA,EACPnF,MAAAA,GAAAA;EAAAA;AAAAA,SAAAA,UAAAA,GAAAA,EAAAA,GAAAA,aAAAA,GAAAA,CAAAA,EAAAA,KAAAA,eAAAA,OAAAA,SAGM6E,IAAAA;AAAAA,QACPqB,KAAI3F,KAAKsF;AAAAA,SACR8O,aAAa9P,GAAQ8P,cAAAA,CAAAA;AAAAA,QAEtB3H,IAAIzM,KAAKoU;AAAAA,MACXlO,SAASuG,EAAEvG,UAAUnI,+BAAAA,EACrBsW,QAAQ5H,EAAE4H,SAASrW,8BAAAA,GAEnB4L,SAAS0K,QAAQ,IAAA/L,GACjBvC,eAAe,IAAAuC,GACfpC,aAA0C,KAA5BsG,EAAEvG,SAAmB,MAAVuG,EAAE4H;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;AAAAA,QAIzBvI,KAAI9L,KAAKoG,OAETsI,KAAAA,CAAAA,CAEF,kBAAA,EAAA,WAEY1O,KAAKoU,WAAWlO,QAAAA,UACjBlG,KAAKoU,WAAWC,MAAAA,GAE3B,WAAA;AAAA,aAAA,EAAA,YAEcvI,GAAEmD,YAAAA,QACNnD,GAAEqD,QAAAA,QACFnP,KAAKhB,OAAAA;IAAAA,EAEb6L,KAAK7K,IAAAA,CAAAA,CAAAA;AAAAA,SAIJsI,aAAa,IAAI2B,IAAIyE,GACxBjO,IAAI,SAAA5B,IAAA;AAAA,UACA0V,KAAYC,aAAAA,MAAAA,QAAAA,mBAAgB7M,EAAAA,CAAAA;AAAAA,aAAAA,CACxBA,GAAK,CAAA,GAAI4M,EAAAA;IAAAA,CAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAAAA,EAAAA,UAAAA,aAAAA,OAAAA,eAAAA,EAAAA,SAAAA,GAAAA,QAAAA,IAAAA,EAAAA,KAAAA,IAAAA;AAAAA,QAMfzI,IAAI9L,KAAKoG;AAAAA,MAEX6I,aAAAA,CAAAA,GAAAA,EACAE,SAAAA,CAAAA;AAAAA,QAEEsF,IAAO;AAAA,MACT1I,YAAYtL,IAAI,SAACK,IAAAA;AAAAA,UACdI,IAAQL,GAAKK,QAAQJ,KAAQgL,EAAEe;AAAAA,QACjCsC,OAAOrI,KAAK5F,CAAAA,GAAAA,EACZ+N,WAAWnI,KAAK2N,CAAAA,GAAAA,KACVvT;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MAOL4K,KAAI9L,KAAKoG;AAAAA,SACRvG,UAAUQ,iBAAiB,aAAa,SAACkI,GAAAA;AAAAA,UACzCmM,IAAOrH,GAAK/E,WAAWqM,IAAI,gBAAA,EAAkBrG,OAC7C4E,IAAM3K,EAAEqM;AAAAA,UACTF,EAAKhR,SAASwP,CAAAA,GAAM;AAAA,YAElBvS,IAAI+T,EAAKG,QAAQ3B,CAAAA,GACjB4B,IAAOC,UAAU1H,GAAKxN,SAAAA,GAAYmV,IAAOD,UAAU7B,CAAAA,GAEnD7T,IAAI2V,EAAKxV,OAAOsV,EAAKtV,OAAO6D,SAAS6P,EAAIlQ,aAAa,OAAA,CAAA,IAAU,GAChE1D,IAAI0V,EAAKzV,MAAMuV,EAAKvV,KACpBW,KAASmN,GAAK4H,mBAAmB5H,GAAK4H,gBAAgBpP,SAAO,IAC9DwH,GAAK4H,gBAAgBtU,CAAAA,IAAK0M,GAAKjH,MAAM6F,OAAOtL,CAAAA,KAAM,MACjDuU,IAAWpJ,GAAEC,YAAYpL,CAAAA,IAAGmL,GAAEe;AAAAA,QAAAA,GAE7B/E,IAAIqN,UAAU9V,GAAGC,GAAAA,EAAImC,MAAMvB,GAAOY,QAAiB,MAAToU,GAAcE,QAAQ,CAAA,IAAK,IAAA,CAAA,GAAAvW,GACrEiJ,IAAIuN,QAAAA;MAAAA;IAAAA,CAAAA;EAAAA,EAAAA,CAAAA,CAAAA,GAAAA;AAAAA,EAlFgC5J,gBAAAA;AjBatC,IiBbsCA,iBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,EAAAA,QAAAA,KAAAA;AAAAA,UAAAA,IAAAA,EAAAA,CAAAA;AAAAA,QAAAA,aAAAA,EAAAA,cAAAA,OAAAA,EAAAA,eAAAA,MAAAA,WAAAA,MAAAA,EAAAA,WAAAA,OAAAA,OAAAA,eAAAA,IAAAA,EAAAA,KAAAA,CAAAA;IAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,KAAAA,GAAAA,EAAAA,WAAAA,CAAAA,GAAAA,KAAAA,GAAAA,GAAAA,CAAAA,GAAAA;EAAAA;AAAAA,EAAAA;AjBatC,IiBbsCA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,MAAAA,IAAAA,SAAAA;AAAAA,MAAAA,IAAAA,OAAAA,yBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,WAAAA,GAAAA;AAAAA,QAAAA,IAAAA,OAAAA,eAAAA,CAAAA;AAAAA,WAAAA,SAAAA,IAAAA,SAAAA,GAAAA,GAAAA,GAAAA,CAAAA;EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA;AAAAA,MAAAA,IAAAA,EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA,KAAAA,CAAAA;AAAAA;AjBatC,IkBTc6J,WAAAA,SAAAA,IAAAA;AAAAA,WAAAA,EACRvW,IAAQ4I,GAAAA;AAAAA,sBAAAA,MAAAA,CAAAA;AAAAA,QAAAA,IAAAA,6BAAAA,OAAAA,EAAAA,aAAAA,OAAAA,eAAAA,CAAAA,GAAAA,KAAAA,MACb5I,IAAQ4I,CAAAA,CAAAA;AAAAA,WAAAA,EACT/C,OAAO,OAAA,EACPyB,cAAc,GAAA,EACd4B,OAAO,GAAA,EAEPxI,MAAAA,GAAAA;EAAAA;AAAAA,SAAAA,YAAAA,GAAAA,EAAAA,GAAAA,eAAAA,GAAAA,CAAAA,EAAAA,KAAAA,aAAAA,OAAAA,SAGIkI,IAAAA;AAAAA,WAAAA,EAAAA,UAAAA,aAAAA,OAAAA,eAAAA,EAAAA,SAAAA,GAAAA,aAAAA,IAAAA,EAAAA,KAAAA,MACOA,EAAAA,GAAAA,KACX4N,YAAYvV,KAAKuV,UAAU1K,KAAK7K,IAAAA,GAAAA,KAChCwV,aAAaxV,KAAKwV,WAAW3K,KAAK7K,IAAAA,GAAAA,KAElCyV,aAAa9N,GAAK8N,cAAc,KAAA,KAChCvQ,OAAOwQ,aAAa/N,GAAK+N,cAAc,GAAA,KAEvCC,YAAYhO,GAAKgO,aAAAA;EAAa,EAAA,GAAA,EAAA,KAAA,QAAA,OAAA,WAAA;AAAA,QAAA9W,KAAA;AAAA,WAAA,EAAA,UAAA,aAAA,OAAA,eAAA,EAAA,SAAA,GAAA,QAAA,IAAA,EAAA,KAAA,IAAA;AAAA,QAK/BiN,IAAI9L,KAAKoG;AAAAA,SACRhD,SAAUpD,KAAKkG,SAASlG,KAAKkB,QAAQlB,KAAK8M,OAAOzN,IAAIW,KAAK8M,OAAOxN;AAAAA,QAE9D8D,IAAsBpD,KAAtBoD,QAAQuS,IAAc3V,KAAd2V,WAEVC,IAAuB9J,EAAE+J,oBAAAA,CAAAA;AAAAA,MAC7BlH,eAAAA,CAAAA,GAAAA,EACAkH,mBAAAA,CAAAA;AAAAA,QACEC,IAAW,MAAM9V,KAAKkF,OAAOwQ;AAAAA,MAC/B3J,YAAYtL,IAAI,SAAC0L,IAAOxL,GAAAA;AAAAA,UACnB+U,IAAaI,GACbC,IAAmB5J,KAAQL,EAAEe,aAAcjO,YAC3CoX,IAAWD,IAAkB,MAAM,IAAG,GACtCE,IAAYN,IAAAA,CAAaI,IAAkBA,GAC3CG,IAAWJ,KAAsBG,GACjCE,IAAgBC,mBAAmBV,GAAYtS,CAAAA,GAC/CiT,IAAcD,mBAAmBF,GAAU9S,CAAAA,GAE3CkT,IAAezV,GAAKoH,QAAQ2N,EAAqBjV,CAAAA,GAEnD4V,IAAAA,QAASC,IAAAA;AACV3V,MAAAA,GAAKoH,QAAAA,IACIqO,IAAeA,EAAaH,gBAAgBA,GAAAA,IAC9CG,IAAeA,EAAaD,cAAcF,MAAAA,IAExCA,GAAAA,IACFE;AAAAA,UAEJI,IACe,QAApBV,IACGW,cAAcH,GAAUC,GAAQ3V,GAAKiM,QAAQjM,GAAKuC,QAAQuS,GAAWK,CAAAA,IACrEW,eAAeJ,GAAUC,GAAQ3V,GAAKiM,QAAQjM,GAAKuC,QAAQuS,GAAWK,CAAAA;AAAAA,QAExErH,aAAa7H,KAAK2P,CAAAA,GAAAA,EAClBZ,iBAAiB/O,KAAAA,EAAAA,eAAAA,GAAAA,aAAAA,GAAAA,OAGXqF,IAAAA,OACAL,EAAEe,YAAAA,YAAAA,GAAAA,UAAAA,GAAAA,OAGFoJ,EAAAA,CAAAA;IAAAA,CAAAA,GAAAA,KAIJhO,OAAO;EAAA,EAAA,GAAA,EAAA,KAAA,mBAAA,OAAA,WAAA;AAAA,QAIR6D,KAAI9L,KAAKoG,OAETsI,KAAAA,CAAAA,CAEF,aAAA,CAAA,GAEA,WAAA;AAAA,aAAA,EAAA,cAEgB5C,GAAE6C,cAAAA,QACR3O,KAAKhB,OAAAA;IAAAA,EAEb6L,KAAK7K,IAAAA,CAAAA,CAAAA;AAAAA,SAIJsI,aAAa,IAAI2B,IAAIyE,GACxBjO,IAAI,SAAA5B,IAAA;AAAA,UACA0V,KAAYC,aAAAA,MAAAA,QAAAA,qBAAgB7M,EAAAA,CAAAA;AAAAA,aAAAA,CACxBA,GAAK,CAAA,GAAI4M,EAAAA;IAAAA,CAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,uBAAAA,OAAAA,SAIAqC,IAAAA;AAAAA,QACbxT,KAAqBpD,KAArBoD,QAAOqS,IAAczV,KAAdyV,YACPlG,IAAW6G,mBAAmBQ,GAASlB,aAAYkB,GAASC,QAAQ,GAAGzT,EAAAA;AAAAA,WAAAA,iBACtDmM,EAASlQ,IAAKoW,IAAAA,QAAiBlG,EAASjQ,IAAKmW,IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,cAAAA,OAAAA,SAG1DqB,IAAKnW,IAAEoW,GAAKxO,GAAAA;AAAAA,QAClBuO,IAAAA;AAAAA,UACElW,IAAQZ,KAAKhB,OAAO2B,EAAAA;AAAAA,UACvBoW,GAAM;AAAA,kBACED,IAAM9W,KAAKgX,oBAAoBhX,KAAKoG,MAAMyP,iBAAiBlV,EAAAA,CAAAA,CAAAA,GAAAA,GAChEY,MAAM5B,OAAOsX,mBAAmBrW,GAAO,EAAA;AAAA,YACxCsW,IAAQnC,UAAU/U,KAAKgJ,GAAAA,GACvB3J,IAAIkJ,EAAE4O,QAAQD,EAAM1X,OAAO,IAC3BF,IAAIiJ,EAAE6O,QAAQF,EAAM3X,MAAM,IAC1BW,KAASF,KAAKqX,oBAAoBrX,KAAKqX,iBAAiBxR,SAAS,IAClE7F,KAAKqX,iBAAiB1W,EAAAA,IAAKX,KAAKoG,MAAM6F,OAAOtL,EAAAA,KAAM,MAClD2W,KAAuC,MAA5BtX,KAAKoG,MAAM2F,YAAYpL,EAAAA,IAAWX,KAAKoG,MAAMyG,YAAYuI,QAAQ,CAAA;AAAA,aAC3EtN,IAAIqN,UAAU9V,GAAGC,GAAAA,EAAImC,MAAMvB,GAAOY,OAAOwW,IAAU,IAAA,CAAA,GAAA,KACnDxP,IAAIuN,QAAAA;MAAAA;AAAAA,kBAECyB,IAAK,oBAAA,GAAA,KACVhP,IAAI7H,QAAAA,GAAAA,GACJsB,MAAM5B,OAAOiB;IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,SAKdf,UAAUQ,iBAAiB,aAAaL,KAAKuV,SAAAA,GAAAA,KAC7C1V,UAAUQ,iBAAiB,cAAcL,KAAKwV,UAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,aAAAA,OAAAA,SAG1CjN,IAAAA;AAAAA,QACHqM,KAASrM,GAAEqM,QACb2C,IAASvX,KAAKsI,WAAWqM,IAAI,WAAA,EAAarG,OAC1CkJ,IAAYxX,KAAKyX,qBACjBC,IAAa1X,KAAK2X;AAAAA,QACnBJ,EAAO7T,SAASkR,EAAAA,GAAS;AAAA,UACvBjU,IAAI4W,EAAO1C,QAAQD,EAAAA;AAAAA,WAClBgD,WAAWF,GAAYF,GAAAA,KAAU,GAAA,KACjCG,iBAAiB/C,IAAAA,KACjB6C,sBAAsB9W,GAAAA,KACtBiX,WAAWhD,IAAQjU,GAAAA,MAAS4H,EAAAA;IAAAA;AAAAA,WAE5BiN,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,cAAAA,OAAAA,WAAAA;AAAAA,SAKDoC,WAAW5X,KAAK2X,gBAAe3X,KAAKyX,qBAAAA,KAAoB;EAAA,EAAA,CAAA,CAAA,GAAA;AAAA,EA/IzBhM,gBAAAA;AlBS/B,IkBT+BA,mBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,QAAAA,IAAAA,CAAAA,GAAAA,IAAAA,MAAAA,IAAAA,OAAAA,IAAAA;AAAAA,QAAAA;AAAAA,eAAAA,GAAAA,IAAAA,GAAAA,OAAAA,QAAAA,EAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,UAAAA,EAAAA,KAAAA,EAAAA,KAAAA,GAAAA,CAAAA,KAAAA,EAAAA,WAAAA,IAAAA,IAAAA;AAAAA;IAAAA,SAAAA,IAAAA;AAAAA,UAAAA,MAAAA,IAAAA;IAAAA,UAAAA;AAAAA,UAAAA;AAAAA,SAAAA,KAAAA,EAAAA,UAAAA,EAAAA,OAAAA;MAAAA,UAAAA;AAAAA,YAAAA;AAAAA,gBAAAA;MAAAA;IAAAA;AAAAA,WAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA;AAAAA,QAAAA,MAAAA,QAAAA,CAAAA;AAAAA,aAAAA;AAAAA,QAAAA,OAAAA,YAAAA,OAAAA,CAAAA;AAAAA,aAAAA,GAAAA,GAAAA,CAAAA;AAAAA,UAAAA,IAAAA,UAAAA,sDAAAA;EAAAA;AAAAA,EAAAA;AlBS/B,IkBT+BA,iBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,EAAAA,QAAAA,KAAAA;AAAAA,UAAAA,IAAAA,EAAAA,CAAAA;AAAAA,QAAAA,aAAAA,EAAAA,cAAAA,OAAAA,EAAAA,eAAAA,MAAAA,WAAAA,MAAAA,EAAAA,WAAAA,OAAAA,OAAAA,eAAAA,IAAAA,EAAAA,KAAAA,CAAAA;IAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,KAAAA,GAAAA,EAAAA,WAAAA,CAAAA,GAAAA,KAAAA,GAAAA,GAAAA,CAAAA,GAAAA;EAAAA;AAAAA,EAAAA;AlBS/B,ImBTDoM,YAAY3Z,sBAAsBC;AnBSjC,ImBRD2Z,aAAaD;AnBQZ,ImBLcE,UAAAA,SAAAA,IAAAA;AAAAA,WAAAA,EACRhZ,IAAQuF,GAAAA;AAAAA,sBAAAA,MAAAA,CAAAA;AAAAA,QAAAA,IAAAA,6BAAAA,OAAAA,EAAAA,aAAAA,OAAAA,eAAAA,CAAAA,GAAAA,KAAAA,MACbvF,IAAQuF,CAAAA,CAAAA;AAAAA,MACTM,OAAO,WAAA,EAEPoT,aAAa1T,EAAQ0T,cAAc;AAAA,QAEpCC,IAAAA,CAAe,UAAU,QAAA,GACzBC,IAAiBD,EAAYvU,SAASY,EAAQ4T,cAAAA,IAC/C5T,EAAQ4T,iBAAiB;AAAA,WAAA,EACvBC,sBAAsBF,EAAYpD,QAAQqD,CAAAA,GAAAA,EAE1CzY,MAAAA,GAAAA;EAAAA;AAAAA,SAAAA,YAAAA,GAAAA,EAAAA,GAAAA,eAAAA,GAAAA,CAAAA,EAAAA,KAAAA,eAAAA,OAAAA,SAGM6E,IAAAA;AAAAA,QACPqB,KAAI3F,KAAKsF;AAAAA,SACR8S,kBAA8C,MAA5B9T,GAAQ8T,kBAAwB,IAAI,GAAA7P,GAEzDqB,SAASrK,MAAmB,IAAbuY,YAAAA,GACflO,SAASC,SAAS,GAAAtB,GAClBvC,eAA4B,IAAb8R,YAAAA,GACf3R,aAAa2R,aAAapK,qBACzB1G,eAAerB,EAAAA;AAAAA,QAEd0G,IAAIrM,KAAK+E,MACTsT,IAAUrY,KAAKoY,kBAAkB3K,oBAAoB;AAAA,SACpD7F,oBAAoB0Q,gBAAgBjM,EAAEkM,OAAOlM,EAAEmM,GAAAA,IACjDH,KAAWR,YAAY9O,cAAcpD,EAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,QAIpC0S,KAAUrY,KAAKoY,kBAAkB3K,oBAAoB,GACrDgL,KAAYzY,KAAKoG,MAAMqS,YAAYzY,KAAKoG,MAAMqS,YAAY;AAAA,SACzD5P,aAAa4P,KAAYJ,MAAWR,YACtC9O,cAAc/I,KAAKsF,QAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,QAGXP,KAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAK/E,KAAK+E;AAAAA,QAClBA,GAAKwT,SAASxT,GAAKyT,OAAOzT,GAAKwT,QAAQxT,GAAKyT;AAAAA,YACxC,IAAI9T,MAAM,6CAAA;AAAA,QAGbK,GAAKwT,UAAAA,GACHA,QAAQ,oBAAIG,QAAAA,GACZH,MAAMI,YAAa5T,GAAKwT,MAAMK,YAAAA,IAAgB,CAAA,IAEhD7T,GAAKyT,QAAAA,GAAYA,MAAM,oBAAIE,SAAAA,GAC1BG,aAAa9T,GAAK8T,cAAAA,CAAAA,GAEpBxV,SAASwQ,OAAOG,KAAKjP,GAAK8T,UAAAA,EAAY,CAAA,CAAA,IAAM,KAAQ;AAAA,UAClDC,KAAAA,CAAAA;AAAAA,aACG9E,KAAKjP,GAAK8T,UAAAA,EAAYlS,QAAQ,SAAA,GAAA;AAAA,YAChCoS,IAAO,IAAIL,KAAKM,IAAerL,YAAAA;AAAAA,QAAAA,GAC5BsL,YAAYF,CAAAA,CAAAA,IAAShU,GAAK8T,WAAWG,CAAAA;MAAAA,CAAAA,GAAAA,GAExCH,aAAaC;IAAAA;AAAAA,WAGZ/T;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,WAAAA;AAAAA,QAIH+G,KAAI9L,KAAKoG;AAAAA,IAAAA,GAEXmS,QAAQW,MAAMlZ,KAAK+E,KAAKwT,KAAAA,GAAAA,GACxBC,MAAMU,MAAMlZ,KAAK+E,KAAKyT,GAAAA,GAAAA,GAEtBW,iBAAiBD,MAAMpN,GAAEyM,KAAAA,GAAAA,GACzBE,YAAYH,gBAAgBxM,GAAEyM,OAAOzM,GAAE0M,GAAAA,GAAAA,GACvCY,eAAeC,iBAChBxF,OAAOrQ,OAAOxD,KAAK+E,KAAK8T,UAAAA,GAAa5a,yBAAAA,GAAAA,GAEpCqb,gBAAgBtZ,KAAKuZ,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MAInBzN,KAAI9L,KAAKoG,OACToT,IAAUxZ,KAAKoY,kBAAkB,IAAI,GAErC1J,IAAmB5C,GAAEwN,cAAc7Y,IAAI,SAACyE,IAAQvE,IAAAA;AAAAA,aAAAA,CACnD,cAAA,EAAA,OAEQuE,GAAO5E,OAAAA,UACJuX,WAAAA,WACCC,YAAAA,YACC5Z,qBAAAA,QACJ2C,GAAK8D,aAAavB,UAAU,GAAA,YACxB0I,GAAEwN,cACZ7V,OAAO,SAACyB,IAAQoN,IAAAA;AAAAA,eAAMA,KAAI3R;MAAAA,CAAAA,EAC1BF,IAAI,SAAA5B,IAAA;AAAA,eAAUqG,GAAOuM,KAAK5L,SAAS2T;MAAAA,CAAAA,EACnCrX,OAAO,SAACqK,IAAGC,IAAAA;AAAAA,eAAMD,KAAIC;MAAAA,GAAG,CAAA,IACvBoL,UAAAA,GAEJ,WAAA;AAAA,eACQ/L,GAAEwN,cAAc3Y,EAAAA;MAAAA,EACtBkK,KAAKhK,EAAAA,CAAAA;IAAAA,CAAAA;AAAAA,SAIHyH,aAAa,IAAI2B,IAAIyE,EACxBjO,IAAI,SAACkH,IAAMhH,IAAAA;AAAAA,UACP4T,KAAYC,aAAAA,MAAAA,QAAAA,qBAAgB7M,EAAAA,CAAAA;AAAAA,aAAAA,CACxBA,GAAK,CAAA,IAAK,MAAMhH,IAAG4T,EAAAA;IAAAA,CAAAA,CAAAA;AAAAA,QAIzBjV,IAAI;AAAA,oBACQqH,QAAQ,SAAC8S,IAAS9Y,IAAAA;AAAAA,UAAAA,CAC7B,GAAG,GAAG,CAAA,EAAG+C,SAAS/C,EAAAA,GAAI;AAAA,YACrB+Y,KAAUpQ,SAAS,kBAAA,CAAmBuO,YAAU,GAAGvY,GAAGma,IAAAA,EAAAA,UAE9Cvb,qBAAAA,IACN,GAAA,YACQ,MAAA,CAAA;AAAA,QAAAW,GAGT2J,SAASvH,YAAYyY,EAAAA;MAAAA;AAAAA,WAEtB5B;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,UAAAA,OAAAA,SAIA/S,IAAAA;AACFA,IAAAA,MAAAA,QACKmF,MAAM,oBAAA,GAAA,KAGVnF,OAAO/E,KAAK8E,YAAYC,EAAAA,GAAAA,KACxBoC,KAAAA,GAAAA,KACAY,YAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAIAlI,UAAUQ,iBAAiB,aAAa,SAACkI,IAAAA;AAAAA,MAAAA,GACxCD,WAAW3B,QAAQ,SAAA,GAAA;AAAA,YACnBgT,IAAaC,EAAKtL,OAClBuL,IAAYtR,GAAEqM;AAAAA,YACf+E,EAAWjW,SAASmW,CAAAA,GAAY;AAAA,cAE9B5M,IAAQ4M,EAAU7W,aAAa,YAAA,GAC/B8W,IAAYD,EAAU7W,aAAa,WAAA,EAAa+W,MAAM,GAAA,GAEtDC,IAAQpI,aAAavO,SAASyW,EAAU,CAAA,CAAA,IAAI,GAAA,IAAG,GAE/ChF,IAAOzH,GAAKxN,UAAUoa,sBAAAA,GAAyBjF,IAAO6E,EAAUI,sBAAAA,GAEhE/Y,IAAQmC,SAASkF,GAAEqM,OAAO5R,aAAa,OAAA,CAAA,GACvC3D,IAAI2V,EAAKxV,OAAOsV,EAAKtV,OAAO0B,IAAM,GAClC5B,IAAI0V,EAAKzV,MAAMuV,EAAKvV,KACpBuB,IAAQmM,IAAQ,MAAMI,GAAK2K,YAC3BvW,IAAO,SAASuY,IAAQ,MAAMF,EAAU,CAAA,IAAK,OAAOA,EAAU,CAAA;AAAA,UAAAjb,GAE7DiJ,IAAIqN,UAAU9V,GAAGC,GAAAA,EAAImC,MAAMA,GAAMX,OAAOA,GAAOY,YAAY,EAAA,GAAA,CAAA,CAAA,GAAA7C,GAC3DiJ,IAAIuN,QAAAA;QAAAA;MAAAA,CAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAOPvL,WAAWiD,cAAc;AAAA,QAC1B1N,KAAI,GACJC,IAAIwY,YACJ1U,IAASpD,KAAK2E,aAAavB,UAAU,GAErC8W,IAAW5Q,SAAS,kBAAkBjK,IAAGC,GAAG,QAAA,EAAA,UAEpCpB,sBAAsB,GAAA,IAC5B,EAAA,CAAA;AAAA,IAAAqK,KAGW,IAAZsP,YAAiBA,YAAU,GAAA,KAC3B/N,WAAW7I,YAAYiZ,CAAAA,GAAAA,KAEvBlb,OAAO0N,MAAM,GAAGzO,yBAAAA,EAA2BwC,IAAI,SAACG,IAAOD,IAAAA;AAAAA,UACrDsR,IAASC,WAAW,uBAAuB7S,MAAKwY,YAAY,KAAKlX,IACtErB,GAAGpB,qBAAqBkF,GAAQxC,EAAAA;AAAAA,MAAAA,GAC5BkJ,WAAW7I,YAAYgR,CAAAA;IAAAA,CAAAA;AAAAA,QAIzBkI,IAAW7Q,SAAS,kBADRjK,KAAIpB,6BAA6B4Z,YAAY,KAAKA,YAAU,GACvBvY,GAAG,QAAA,EAAA,UAE5CpB,sBAAsB,GAAA,IAC5B,EAAA,CAAA;AAAA,SAGD4L,WAAW7I,YAAYkZ,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,cAAAA,OAAAA,WAAAA;AAAAA,aAIxBrO,KAAI9L,KAAKoG,OAAAA,KAAAA,CACoB0F,GAAEyM,MAAM6B,SAAAA,GAAYtO,GAAEyM,MAAMK,YAAAA,CAAAA,GAAtDyB,IAAAA,GAAAA,CAAAA,GAAYC,IAAAA,GAAAA,CAAAA,GAAAA,IAAAA,CACUxO,GAAE0M,IAAI4B,SAAAA,GAAYtO,GAAE0M,IAAII,YAAAA,CAAAA,GAE/C2B,IAAAA,EAAAA,CAAAA,IAAyBF,IAAa,IAA6B,MAAA,EAAA,CAAA,IAAbC,IAExDhB,IAAAA,CAAAA,GAEAkB,IAAetB,MAAMpN,GAAEyM,KAAAA,GACnB5X,IAAI,GAAGA,IAAI4Z,GAAY5Z,KAAK;AAAA,UAC/B8Z,IAAU3O,GAAE0M;AAAAA,UAAAA,CACZkC,eAAeF,GAAc1O,GAAE0M,GAAAA,GAAM;AAAA,YAAA,IAAA,CACnBgC,EAAaJ,SAAAA,GAAYI,EAAa5B,YAAAA,CAAAA;AAAAA,YACjD+B,mBAAAA,EAAAA,CAAAA,GAAAA,EAAAA,CAAAA,CAAAA;MAAAA;AAAAA,QAEG7T,KAAK9G,KAAK4a,gBAAgBJ,GAAcC,CAAAA,CAAAA,GAAAA,QAE9CA,GAAS,CAAA,GAAA,IACFA;IAAAA;AAAAA,WAGTnB;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,SAGQuB,IAAAA;AAAAA,QAAWJ,KAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAQ,IAAA,IAAA,CACbI,GAAUT,SAAAA,GAAYS,GAAUjC,YAAAA,CAAAA,GAAhDoB,IAAAA,EAAAA,CAAAA,GAAOc,IAAAA,EAAAA,CAAAA,GACRC,IAAcC,eAAeH,EAAAA,GAG7BI,IAAAA,EAAAA,OACIjB,GAAAA,MAAAA,CAAAA,EAAAA;AAAAA,YAAAA,KAHEd,MAAMuB,EAAAA,KAAYE,mBAAmBX,GAAOc,CAAAA,GAOrC,CAAA;AAAA,aACbI,IAAiB5C,gBAAgByC,GAAaN,EAAAA,GAE9ChJ,IAAAA,CAAAA,GAAW0J,IAAAA,QACPxa,IAAI,GAAGA,IAAIua,GAAgBva;AAAAA,UAC5BX,KAAKob,OAAOL,GAAaf,CAAAA,GAAAA,EAC1BlT,KAAKqU,CAAAA,GAAAA,QAAAA,IAEI,IAAIzC,KAAKyC,EAAIzN,qBAAqB,CAAA,EAAGqE,QAAAA,GAC9B,CAAA;AAAA,WAAA,WAGnBoJ,EAAIzN,qBAAqB,CAAA,EAAGsE,cAAAA,QACtB+I,GAAa,CAAA,GAAA,EAChBjU,KAAK9G,KAAKob,OAAOL,GAAaf,GAAAA,IAAO,CAAA,IAAA,EAG9BvI,OAAOA,GAEbwJ;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,UAAAA,OAAAA,SAGDJ,IAAWb,IAAAA;AAAAA,aAAOqB,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA,GACpBvP,IAAI9L,KAAKoG,OAGTkV,IAAcpC,MAAM2B,EAAAA,GACpBM,IAAAA,CAAAA,GAEIxa,IAAI,GAAGA,IAAI+M,oBAAoB/M,KAAK4a,QAAQD,GAAa,CAAA,GAAI;AAAA,UAChEpW,IAAAA,CAAAA,GAGAsW,IAAwBF,KAAexP,EAAEyM,SAAS+C,KAAexP,EAAE0M;AAEpE6C,WAASC,EAAYlB,SAAAA,MAAeJ,MAAAA,CAAUwB,IAAAA,EACzCzJ,WAAWkH,YAAYqC,CAAAA,IAAAA,IAErBtb,KAAKyb,mBAAmBH,CAAAA,GAAAA,EAE9BxU,KAAK5B,CAAAA;IAAAA;AAAAA,WAGHiW;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,sBAAAA,OAAAA,SAGWpC,IAAAA;AAAAA,QACdhH,KAAWkH,YAAYF,EAAAA,GACvB/G,IAAYhS,KAAK+E,KAAK8T,WAAW9G,EAAAA;AAAAA,WAAAA,EAAAA,UAE1BA,IAAAA,WACCC,KAAa,GAAA,MAClBhS,KAAKhB,OAAO0c,iBAAiB1J,GAAWhS,KAAKoG,MAAMgT,YAAAA,CAAAA,EAAAA;EAAAA,EAAAA,CAAAA,CAAAA,GAAAA;AAAAA,EAtRvB/U,SAAAA;AnBK9B,ImBL8BA,iBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,EAAAA,QAAAA,KAAAA;AAAAA,UAAAA,IAAAA,EAAAA,CAAAA;AAAAA,QAAAA,aAAAA,EAAAA,cAAAA,OAAAA,EAAAA,eAAAA,MAAAA,WAAAA,MAAAA,EAAAA,WAAAA,OAAAA,OAAAA,eAAAA,IAAAA,EAAAA,KAAAA,CAAAA;IAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,KAAAA,GAAAA,EAAAA,WAAAA,CAAAA,GAAAA,KAAAA,GAAAA,GAAAA,CAAAA,GAAAA;EAAAA;AAAAA,EAAAA;AnBK9B,ImBL8BA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,MAAAA,IAAAA,SAAAA;AAAAA,MAAAA,IAAAA,OAAAA,yBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,WAAAA,GAAAA;AAAAA,QAAAA,IAAAA,OAAAA,eAAAA,CAAAA;AAAAA,WAAAA,SAAAA,IAAAA,SAAAA,GAAAA,GAAAA,GAAAA,CAAAA;EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA;AAAAA,MAAAA,IAAAA,EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA,KAAAA,CAAAA;AAAAA;AnBK9B,IoBPcsX,YAAAA,SAAAA,IAAAA;AAAAA,WAAAA,EACR5c,IAAQ4I,GAAAA;AAAAA,sBAAAA,MAAAA,CAAAA;AAAAA,QAAAA,IAAAA,6BAAAA,OAAAA,EAAAA,aAAAA,OAAAA,eAAAA,CAAAA,GAAAA,KAAAA,MACb5I,IAAQ4I,CAAAA,CAAAA;AAAAA,WAAAA,EAETyM,aAAazM,EAAKyM,cAAAA,CAAAA,GAAAA,EAClBwH,cAAcjU,EAAKiU,eAAAA,CAAAA,GAAAA,EAEnBhX,OAAO+C,EAAK/C,QAAQ,QAAA,EACpBqD,OAAO,GAAA,EAEPxI,MAAAA,GAAAA;EAAAA;AAAAA,SAAAA,YAAAA,GAAAA,EAAAA,GAAAA,eAAAA,GAAAA,CAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAIFO,SAAK+E,KAAKqH,SAASvG,UAAU,MAAA,KAC1BX,OAAOa,aAAa,GAAA,KACpBT,SAASsE,SAASC,SAAS;EAAA,EAAA,GAAA,EAAA,KAAA,aAAA,OAAA,SAIxBvF,IAAAA;AAAAA,WAAAA,EAAAA,UAAAA,aAAAA,OAAAA,eAAAA,EAAAA,SAAAA,GAAAA,aAAAA,IAAAA,EAAAA,KAAAA,MACOA,EAAAA,GAAAA,GAERuX,cAAcvX,GAAQuX,eAAAA,CAAAA,GAAAA,GACtBlQ,iBAAiBrH,GAAQqH,kBAAAA,CAAAA,GAAAA,KAE5BzG,OAAO4W,YAAYxX,GAAQuX,YAAYC,aAAa,QAAA,KACpD5W,OAAO6W,YAAYzX,GAAQuX,YAAYE,aAAa,QAAA,KACpD7W,OAAO8W,YAAY1X,GAAQuX,YAAYG,aAAa,GAAA,KACpD9W,OAAO+W,sBAAsB3X,GAAQuX,YAAYI,uBAAuB,GAAA,KAExE/W,OAAOgX,iBAAiB5X,GAAQqH,eAAeuQ,gBAAAA,KAC/ChX,OAAOwG,iBAAiBpH,GAAQqH,eAAeD,gBAAAA,KAE/CxG,OAAO0O,mBAAmBtP,GAAQsP;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,WAIhCuI,SAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IADSnc,KAAK+E,MACC/E,KAAK4E,IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,oBAAAA,OAAAA,WAAAA;AAAAA,WAIpBwX,aAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IADcpc,KAAK+E,IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,WAAAA;AAAAA,QAItBiD,KAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,KAAAA,UAAAA,CAAAA;AAAAA,SACCqU,eAAAA,GACDrU,MAAAA,KACEsU,oBAAoBtc,KAAKuc,cAAAA,GAA+B,WAAdvc,KAAK4E,IAAAA,GAAAA,KAEhD4X,gBAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,kBAAAA,OAAAA,WAAAA;AAAAA,QAID1Q,KAAI9L,KAAKoG,OACT6F,KAASjM,KAAK+E,KAAKkH;AAAAA,IAAAA,GACrBwQ,gBAAgBxQ,GAAOpG,QAAAA,GAEvB6W,YAAY1c,KAAKkB,QAAO4K,GAAE2Q,eAAAA,GAE1BE,UAAU7Q,GAAE4Q,YAAU,GAAA7d,GAMtB+d,QAAAA,EAAAA,QACO3Q,IAAAA,WACGA,GAAOxL,IAAI,SAAC4L,IAAG1L,GAAAA;AAAAA,aACzBkc,SAAS/Q,GAAE6Q,UAAUhc,IAAImL,GAAE4Q,SAAAA;IAAAA,CAAAA,EAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,uBAAAA,OAAAA,SAKVI,IAAAA;AAAAA,QACbC,KAAOC,mBAAmBF,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IADa,OAAA,GAEvCG,IAAkBjd,KAAKkG,SAASgX,cAAcH,EAAAA,GAC9CI,IAAiBC,gBAAgBL,EAAAA,IAAQE,GACzCxK,IAAWzS,KAAKkG,SAAUmX,aAAaN,EAAAA,IAAQI;AAAAA,SAEhD/W,MAAMkX,QAAAA,EAAAA,QACFP,IAAAA,WACGA,GAAKtc,IAAI,SAAA5B,IAAA;AAAA,aAAK4T,IAAWpG,KAAI4Q;IAAAA,CAAAA,GAAAA,iBACvBA,GAAAA,UACPxK,EAAAA,GAAAA,KAIN8K,kBAAAA,GAAAA,KACAC,cAAAA,GAAAA,KACAC,aAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,qBAAAA,OAAAA,WAAAA;AAAAA,QAID3R,KAAI9L,KAAKoG,OACTsX,KAAW,SAAAnV,IAAA;AAAA,aAAU/E,GAAO/C,IAAI,SAAA8H,IAAA;AAAA,eAAOoV,MAAMC,IAAK9R,GAAEwR,KAAAA;MAAAA,CAAAA;IAAAA;AAAAA,IAAAA,GAEtDlR,WAAWpM,KAAK+E,KAAKqH,SAAS3L,IAAI,SAAC4L,IAAG1L,GAAAA;AAAAA,UACnC6C,IAAS6I,GAAE7I,QACXqa,IAAexR,GAAEwR,gBAAAA,CAAAA;AAAAA,aAAAA,EAAAA,MAEdxR,GAAE5K,QAAQ4K,GAAE5K,KAAKqc,QAAQ,UAAU,SAACC,KAAAA;AAAAA,eAAiB,OAARA,MAAc,UAAkB,OAARA,MAAc,SAAS;MAAA,CAAA,GAAA,OAC3Fpd,GAAAA,WACI0L,GAAE2R,WAAAA,QAELxa,GAAAA,YACIka,GAASla,CAAAA,GAAAA,cAEPqa,GAAAA,gBACEH,GAASG,CAAAA,EAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,iBAAAA,OAAAA,WAAAA;AAAAA,QAMvB/R,KAAI9L,KAAKoG;AAAAA,QACVpG,KAAKoU,WAAW6J;AAAAA,aAAAA,MAAAA,GAChBC,YAAYpS,GAAEM,SAASN,GAAEM,SAASvG,SAAS,CAAA,EAAGsY;AAAAA,IAAAA,GAG/CD,YAAY,IAAIE,MAAMtS,GAAE2Q,aAAAA,EAAe9c,KAAK,IAAA,GAAAd,GAC5CuN,SAAS3L,IAAI,SAAA8H,IAAA;AAAA,MAAAA,GACZ8J,WAAW5R,IAAI,SAACiP,IAAK4C,GAAAA;AACnB5C,QAAAA,KAAM5D,GAAEoS,UAAU5L,CAAAA,MAAAA,GAClB4L,UAAU5L,CAAAA,IAAK5C;MAAAA,CAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,WAAAA;AAAAA,QAOhB5D,KAAI9L,KAAKoG;AACVpG,SAAK+E,KAAKsZ,aAAAA,KACPjY,MAAMiY,WAAWre,KAAK+E,KAAKsZ,SAAS5d,IAAI,SAAA8H,IAAA;AAAA,aAAAA,GAC1CgH,WAAWoO,MAAMtR,GAAEvL,OAAOgL,GAAEwR,KAAAA,GAC1BjR,GAAE/H,YAAS+H,GAAE/H,UAAAA,CAAAA,IAIV+H;IAAAA,CAAAA,IAGNrM,KAAK+E,KAAKuZ,aAAAA,KACPlY,MAAMkY,WAAWte,KAAK+E,KAAKuZ,SAAS7d,IAAI,SAAA8H,IAAA;AAAA,aAAAA,GAC1CsI,WAAW8M,MAAMtR,GAAEkM,OAAOzM,GAAEwR,KAAAA,GAAAA,GAC5BxM,SAAS6M,MAAMtR,GAAEmM,KAAK1M,GAAEwR,KAAAA,GACtBjR,GAAE/H,YAAS+H,GAAE/H,UAAAA,CAAAA,IACV+H;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,iBAAAA,OAAAA,WAAAA;AAAAA,QAAAA,IAAAA,KAAAA,MAMLkS,IAAM;AAAA,QAEPve,KAAKoU,WAAW6J,SAAS;AAAA,UACrB;AAAA,UACFO,IAAa,IAAIJ,MAAMpe,KAAKoG,MAAMqW,aAAAA,EAAe9c,KAAK,CAAA;AAAA,WACrDoF,KAAKqH,SAAS3L,IAAI,SAAC4L,IAAG1L,IAAAA;AAAAA,YACtB6C,IAAS3C,GAAKkE,KAAKqH,SAASzL,EAAAA,EAAG6C;AAAAA,QAAAA,GACjC+a,CAAAA,IAAOC,IAAaA,EAAW/d,IAAI,SAAC2B,KAAGzB,IAAAA;AAAAA,iBAAMyB,MAAIoB,EAAO7C,EAAAA;QAAAA,CAAAA;MAAAA,CAAAA;IAAAA;AAAAA,QAIxD8d,IAAgBze,KAAK+E,KAAKqH,SAAS3L,IAAI,SAAA5B,IAAA;AAAA,aAAKwN,GAAEkS,CAAAA;IAAAA,CAAAA;AAAAA,WAC/Cve,KAAK+E,KAAKsZ,YAAAA,EACEvX,KAAK9G,KAAK+E,KAAKsZ,SAAS5d,IAAI,SAAA5B,IAAA;AAAA,aAAKwN,GAAEvL;IAAAA,CAAAA,CAAAA,GAE/Cd,KAAK+E,KAAKuZ,YAAAA,KACPvZ,KAAKuZ,SAAS7d,IAAI,SAAA5B,IAAA;AAAA,QACRiI,KAAAA,CAAMuF,GAAEmM,KAAKnM,GAAEkM,KAAAA,CAAAA;IAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAIrB7R,OAAAA,MAAAA,IAAAA,qBAAU+X,CAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MAIhB/P,KAAAA,CAAAA,CAEF,SAAA,EAAA,MAEO1O,KAAKkF,OAAO6W,WAAAA,OACX/b,KAAKkB,OAAAA,gBACIlB,KAAKkF,OAAO+W,oBAAAA,GAG7B,WAAA;AAAA,aACQjc,KAAKoG,MAAMkX;IAAAA,EACjBzS,KAAK7K,IAAAA,CAAAA,GAAAA,CAIP,SAAA,EAAA,MAEOA,KAAKkF,OAAO4W,WAAAA,QACV9b,KAAKkG,OAAAA,GAGd,WAAA;AAAA,UACK4F,KAAI9L,KAAKoG;AAAAA,aAAAA,GACXwW,MAAMxM,aAAasO,mBAAmB1e,KAAKkB,OAC5C4K,GAAE8Q,MAAM3Q,QAAQjM,KAAKkF,OAAO8W,SAAAA,GAEtBlQ,GAAE8Q;IAAAA,EACR/R,KAAK7K,IAAAA,CAAAA,GAAAA,CAIP,YAAA,EAAA,OAEQA,KAAKkB,OAAAA,KACP,QAAA,GAEN,WAAA;AAAA,aACQlB,KAAKoG,MAAMkY;IAAAA,EACjBzT,KAAK7K,IAAAA,CAAAA,CAAAA,GAIL2e,IAAc3e,KAAKoG,MAAMgG,SAAS3I,OAAO,SAAA5E,IAAA;AAAA,aAAqB,UAAhBwN,GAAE2R;IAAAA,CAAAA,GAChDY,IAAe5e,KAAKoG,MAAMgG,SAAS3I,OAAO,SAAA5E,IAAA;AAAA,aAAqB,WAAhBwN,GAAE2R;IAAAA,CAAAA,GAEjDa,IAAcF,EAAYle,IAAI,SAAA8H,IAAA;AAAA,UAC7BjI,KAAQ+L,GAAE/L;AAAAA,aAAAA,CAEb,cAAmB+L,GAAE/L,OAAAA,EAAAA,OAEbA,IAAAA,OACA+M,GAAKrO,OAAOsB,EAAAA,GAAAA,SACV+M,GAAK+G,WAAW6J,SAAAA,kBAGP5Q,GAAKnI,OAAO0O,kBAAAA,WACnBvG,GAAKnH,SAAStI,uBAAAA,GAE1B,WAAA;AAAA,YACKkO,KAAI9L,KAAKoG,OACTiG,KAAIP,GAAEM,SAAS9L,EAAAA,GACf2d,KAAUje,KAAKoU,WAAW6J,SAE1Ba,KAAa9e,KAAKoU,WAAW0K,cAAcnhB,uBAC3C+U,KAAY5G,GAAE4Q,aAAa,IAAIoC,KAC/B5R,KAAWwF,MAAWuL,KAAU,IAAIU,EAAY9Y,SAEhDoJ,IAAanD,GAAE8Q,MAAMtN,UAAU7O,IAAI,SAAA5B,KAAA;AAAA,iBAAKQ,MAAIqT,KAAU;QAAA,CAAA;AACtDuL,QAAAA,OAAAA,IACUhP,EAAWxO,IAAI,SAAA5B,KAAA;AAAA,iBAAKkgB,MAAI7R,KAAW5M;QAAAA,CAAAA;AAAAA,YAG7C2L,IAAS,IAAImS,MAAMtS,GAAE2Q,aAAAA,EAAe9c,KAAK,EAAA;AAC1CK,aAAKkF,OAAO0O,qBAAAA,IACXqK,MAAW5R,GAAE/L,UAAUwL,GAAEM,SAASvG,SAAS,IACpCwG,GAAEwR,eAEFxR,GAAE7I;AAAAA,YAITgP,IAAU,IAAI4L,MAAMtS,GAAE2Q,aAAAA,EAAe9c,KAAK,CAAA;AAAA,eAC3Cse,OAAAA,IACQ5R,GAAEgG,WAAW5R,IAAI,SAACnB,KAAGgT,IAAAA;AAAAA,iBAAMhT,MAAI+M,GAAE8R,eAAe7L,EAAAA;QAAAA,CAAAA,IAAAA,EAAAA,YAI9CrD,GAAAA,YACA5C,GAAEgG,YAAAA,SACLG,GAAAA,QAEDvG,GAAAA,UAEEH,GAAEwR,MAAM7K,UAAAA,WACPC,IAAAA,UACDxF,GAAAA;MAAAA,EAEVrC,KAAKwC,EAAAA,CAAAA;IAAAA,CAAAA,GAIL2R,IAAcJ,EAAane,IAAI,SAAA8H,IAAA;AAAA,UAC9BjI,KAAQ+L,GAAE/L;AAAAA,aAAAA,CAEb,eAAoB+L,GAAE/L,OAAAA,EAAAA,OAEdA,IAAAA,OACA+M,GAAKrO,OAAOsB,EAAAA,GAAAA,SACV+M,GAAKlE,SAAAA,UACJkE,GAAKuO,YAAYrI,UAAAA,YACflG,GAAKuO,YAAYpI,YAAAA,QACrBnG,GAAKuO,YAAYnI,QAAAA,UACfpG,GAAKuO,YAAYlI,UAAAA,UACjBrG,GAAKuO,YAAYvI,UAAAA,kBAGThG,GAAKnI,OAAO0O,iBAAAA,GAE/B,WAAA;AAAA,YACK9H,KAAI9L,KAAKoG,OACTiG,KAAIP,GAAEM,SAAS9L,EAAAA,GACf2e,KAAUnT,GAAEwR,MAAMhO,UAAU,CAAA,IAAKxD,GAAEwR,MAAM7K,WAC1C3G,GAAEwR,MAAMhO,UAAU,CAAA,IAAKxD,GAAEwR,MAAM7K;AAAAA,eAAAA,EAAAA,YAGrB3G,GAAE8Q,MAAMtN,WAAAA,YACRjD,GAAEgG,YAAAA,QAENhG,GAAE7I,QAAAA,UAEAyb,IAAAA,QACFjf,KAAK4b,YAAYsD,WAAWrhB,oBAAAA;MAAAA,EAEpCgN,KAAKwC,EAAAA,CAAAA;IAAAA,CAAAA,GAIL8R,IAAAA,CAAAA,CAEF,YAAA,EAAA,OAEQnf,KAAKkB,OAAAA,KACP,QAAA,GAEN,WAAA;AAAA,aACQlB,KAAKoG,MAAMiY;IAAAA,EACjBxT,KAAK7K,IAAAA,CAAAA,CAAAA;AAAAA,IAAAA,KAIU0O,GAAiBhI,OAAOmY,GAAaG,GAAaG,CAAAA;AAAAA,QAEjEC,IAAAA,CAAa,YAAY,UAAA;AAAA,SACxBC,qBAAAA,CAAAA,GAAAA,KAEA/W,aAAa,IAAI2B,IAAIyE,GACxBjL,OAAO,SAAA8E,IAAA;AAAA,aAAA,CAAS6W,EAAU1b,SAASiE,GAAK,CAAA,CAAA,KAAO0F,GAAKjH,MAAMuB,GAAK,CAAA,CAAA;IAAA,CAAA,EAC/DlH,IAAI,SAAA8H,IAAA;AAAA,UACAgM,KAAYC,aAAAA,MAAAA,QAAAA,qBAAgB7M,EAAAA,CAAAA;AAAAA,cAC7BA,GAAK,CAAA,EAAGjE,SAAS,WAAA,KAAgBiE,GAAK,CAAA,EAAGjE,SAAS,UAAA,MAAA7E,GAC/CwgB,mBAAmBvY,KAAKyN,EAAAA,GAAAA,CAEtB5M,GAAK,CAAA,GAAI4M,EAAAA;IAAAA,CAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAKd+K,cAAAA,CAAAA;AAAAA,QAEDxT,KAAI9L,KAAKoG,OACTmZ,IAAUvf,KAAKkF,OAAOgX,gBACtBsD,IAAUxf,KAAKkF,OAAOwG;AACbI,IAAAA,GAAE8Q,MAAM3Q,OAEdxL,IAAI,SAACyL,GAAO5L,GAAAA;AAAAA,UACdkD,IAAS2H,GAAK/E,MAAMgG,SAAS3L,IAAI,SAACC,IAAKC,IAAAA;AAAAA,YACtCG,KAAQJ,GAAI8C,OAAOlD,CAAAA;AAAAA,eAAAA,EAAAA,OAEfI,GAAIe,MAAAA,OACJX,IAAAA,MACDJ,GAAI2R,WAAW/R,CAAAA,GAAAA,OACd6K,GAAKnM,OAAO2B,EAAAA,GAAAA,WACR6e,IAAUA,EAAQ1e,EAAAA,IAASA,GAAAA;MAAAA,CAAAA;AAAAA,MAAAA,GAInCwe,YAAYhf,CAAAA,IAAAA,EAAAA,OACT4L,GAAAA,gBACSqT,IAAUA,EAAQrT,CAAAA,IAASA,GAAAA,MACrCJ,GAAE8Q,MAAMtN,UAAUhP,CAAAA,GAAAA,QAChBkD,GAAAA,UACEsI,GAAEoS,UAAU5d,CAAAA,EAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAOnBT,UAAUQ,iBAAiB,aAAa,SAACkI,IAAAA;AAAAA,UACzC5C,IAAI4K,GAAKjL,UACT6E,IAAI4K,UAAUxE,GAAK1Q,SAAAA,GACnB4f,IAAOlX,GAAE4O,QAAQhN,EAAE3K,OAAOmK,cAAchE,CAAAA,GACxC+Z,IAAOnX,GAAE6O,QAAQjN,EAAE5K;AAEpBmgB,UAAOnP,GAAKrK,SAASuD,aAAa9D,CAAAA,KACjC+Z,IAAQjW,aAAa9D,CAAAA,IAAAA,GACnBga,oBAAoBF,CAAAA,IAAAA,GAEpB3X,IAAI7H,QAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,uBAAAA,OAAAA,SAKQwf,IAAAA;AAAAA,QACf3T,KAAI9L,KAAKoG;AAAAA,QACT0F,GAAEoS,WAAAA;AAAAA,UAEF5d,IAAQsf,kBAAkBH,IAAM3T,GAAE8Q,MAAMtN,WAAAA,IAAW;AAAA,UACnDhP,KAAS,GAAG;AAAA,YACXuf,IAAM7f,KAAKsf,YAAYhf,CAAAA;AAAAA,aAEtBwH,IAAIqN,UACR0K,EAAIpL,OAAOzU,KAAK8H,IAAIkC,OAAO3K,GAC3BwgB,EAAIC,WAAW9f,KAAK8H,IAAIkC,OAAO1K,GAAAA,EAC9BmC,MAAMoe,EAAIE,gBAAgBjf,OAAO,GAAA,GAClC+e,EAAIrc,QACJlD,CAAAA,GAAAA,KAGIwH,IAAIuN,QAAAA;MAAAA;IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA,MAKNvJ,KAAI9L,KAAK+E;AACV+G,IAAAA,GAAEM,SAASvG,SAAS,MAAA,KACjBiE,WAAWiD,cAAc,IAAAxE,GAC5B6D,SAAS3L,IAAI,SAAC4L,IAAG1L,GAAAA;AAAAA,UACduM,IAAWxP,sBAGXsiB,IAAOC,UAAAA,IAECtf,GACX,KACAuM,GACA6D,GAAK/R,OAAO2B,CAAAA,GACZ0L,GAAE5K,MACFsP,GAAK7L,OAAOG,eAAAA;AAAAA,MAAAA,GACRyE,WAAW7I,YAAY+e,CAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,QAS3BhgB,KAAKiI;AAAAA,aAAAA,MAAAA,KACFA,OAAO;AAGVjI,SAAKkgB,iBAAAA,KACFA,cAAcvZ,QAAQ,SAAA9H,IAAA;AAAA,UACtBsL,KAAIgW,GAAEjd;AAAAA,MAAAA,GACRkH,WAAWnB,YAAYkB,EAAAA;IAAAA,CAAAA,GAAAA,KAItB+V,gBAAgBlgB,KAAKqf,mBAAmB5e,IAAI,SAAA5B,IAAA;AAAA,aAAA,EAAA,MAEzCuD,GAAE+P,UAAAA,SAAAA,QACCiO,OACFhe,GAAEgQ,MAAAA;IAAAA,CAAAA,GAAAA,WAIRpS,KAAKoG,MAAMia,iBAAAA,KACRja,MAAMia,eAAergB,KAAKoG,MAAMqW,gBAAgB,IAAA,KAIjDyD,cAAczf,IAAI,SAAA8H,IAAA;AAAA,UAClB+X,IAAcjU,GAAE+F,MAAMmO,GAAKna,MAAMia,YAAAA;AAAAA,MAAAA,GAEnCnd,UAAUN,YAAYyJ,GAAEzH,IAAAA,EAAM0b,CAAAA,GAAAA,GAC3B9X,SAASvH,YAAYoL,GAAEnJ,OAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,uBAAAA,OAAAA,WAAAA;AAK1BlD,SAAKkgB,iBAAAA,KACFA,cAAcvZ,QAAQ,SAAA9H,IAAA;AAAA,UACtBsL,KAAIgW,GAAEjd;AAAAA,MAAAA,GACRkH,WAAWnB,YAAYkB,EAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAMtBpL,OAAOsB,iBAAiB,eAAe,WAAA;AAAA,MAAAxB,GACtCyE,cAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,aAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAKD+b,mBAAmB5e,IAAI,SAAA8H,IAAA;AAAA,MAAAA,GACzB6J,MAAM3R,IAAI,SAAA8H,IAAA;AAAA,QAAAA,GACNlI,iBAAiB,SAAS,WAAA;AAAA,cAC1BC,IAAQuC,GAAKG,aAAa,kBAAA;AAAA,UAAAnE,GACzB2hB,oBAAoBlgB,CAAAA;QAAAA,CAAAA;MAAAA,CAAAA;IAAAA,CAAAA,GAAAA,KAMvBwH,IAAIjI,UAAUQ,iBAAiB,SAAS,WAAA;AAAA,UACxCC,KAAQmgB,GAAK3Y,IAAIjI,UAAUmD,aAAa,kBAAA;AAAA,MAAAnE,GACvC2hB,oBAAoBlgB,EAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,iBAAAA,OAAAA,WAAAA;AAAAA,QAAAA,KAAAA;AAAAA,SAKrB4f,cAAczf,IAAI,SAAA8H,IAAA;AAAA,UAClB+X,IAAcjU,GAAE+F,MAAMsO,GAAKta,MAAMia,YAAAA;AAAAA,oBACvBhU,GAAEzH,IAAAA,EAAM0b,GAAajU,GAAEnJ,OAAAA;IAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,SAKjCsd,oBAAoBxgB,KAAKoG,MAAMia,eAAe,CAAA;EAAA,EAAA,GAAA,EAAA,KAAA,gBAAA,OAAA,WAAA;AAAA,SAI9CG,oBAAoBxgB,KAAKoG,MAAMia,eAAe,CAAA;EAAA,EAAA,GAAA,EAAA,KAAA,gBAAA,OAAA,WAAA;AAAA,QAGvC/f,KAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAMN,KAAKoG,MAAMia,cACzBvU,KAAI9L,KAAKoG;AAAAA,WAAAA,EAAAA,OAEL9F,IAAAA,OACAwL,GAAE8Q,MAAM3Q,OAAO3L,EAAAA,GAAAA,QACdwL,GAAEM,SAAS3L,IAAI,SAAA8H,IAAA;AAAA,aAAK8D,GAAE7I,OAAOlD,EAAAA;IAAAA,CAAAA,EAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,uBAAAA,OAAAA,SAKnBA,IAAAA;AAAAA,QACfwL,KAAI9L,KAAKoG;AAAAA,KAAAA,KACL/C,SAAS/C,EAAAA,KACN,MAAGA,KAAQ,IACnBA,MAASwL,GAAE8Q,MAAM3Q,OAAOpG,WAAQvF,KAAQwL,GAAE8Q,MAAM3Q,OAAOpG,SAAS,IAChEvF,OAAUwL,GAAEuU,iBAAAA,GACbA,eAAe/f,IAAAA,KACZN,KAAKjB,QAAQ,eAAeiB,KAAK2gB,aAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gBAAAA,OAAAA,SAM1BzU,IAAO0U,GAAAA;AAAAA,QAAetgB,IAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAMN,KAAKoG,MAAMqW;AAAAA,WAAAA,EAAAA,UAAAA,aAAAA,OAAAA,eAAAA,EAAAA,SAAAA,GAAAA,gBAAAA,IAAAA,EAAAA,KAAAA,MAChCvQ,IAAO0U,GAAetgB,CAAAA,GAAAA,KACpCyE,KAAKkH,OAAO4U,OAAOvgB,GAAO,GAAG4L,EAAAA,GAAAA,KAC7BnH,KAAKqH,SAAS3L,IAAI,SAAC4L,IAAG1L,IAAAA;AAAAA,MAAAA,GACxB6C,OAAOqd,OAAOvgB,GAAO,GAAGsgB,EAAcjgB,EAAAA,CAAAA;IAAAA,CAAAA,GAAAA,KAEpC+H,OAAO1I,KAAK+E,IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,mBAAAA,OAAAA,WAAAA;AAAAA,QAGFzE,KAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAQN,KAAKoG,MAAMqW,gBAAc;AAC5Czc,SAAK+E,KAAKkH,OAAOpG,UAAU,MAAA,OAAA,EAAA,UAAA,aAAA,OAAA,eAAA,EAAA,SAAA,GAAA,mBAAA,IAAA,EAAA,KAAA,MAGTvF,EAAAA,GAAAA,KACjByE,KAAKkH,OAAO4U,OAAOvgB,IAAO,CAAA,GAAA,KAC1ByE,KAAKqH,SAAS3L,IAAI,SAAA8H,IAAA;AAAA,MAAAA,GACpB/E,OAAOqd,OAAOvgB,IAAO,CAAA;IAAA,CAAA,GAAA,KAEnBoI,OAAO1I,KAAK+E,IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,iBAAAA,OAAAA,SAGJ6b,IAAAA;AAAAA,QAAetgB,KAAAA,UAAAA,SAAAA,KAAAA,WAAAA,UAAAA,CAAAA,IAAAA,UAAAA,CAAAA,IAAM;AAAA,SAC7ByE,KAAKqH,SAAS9L,EAAAA,EAAOkD,SAASod,IAAAA,KAC9BlY,OAAO1I,KAAK+E,IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,kBAAAA,OAAAA,SAKHqH,IAAAA;AAAAA,SACTrH,KAAKqH,SAAS3L,IAAI,SAAC4L,IAAG1L,GAAAA;AACvByL,MAAAA,GAASzL,CAAAA,MAAAA,GACT6C,SAAS4I,GAASzL,CAAAA;IAAAA,CAAAA,GAAAA,KAGjB+H,OAAO1I,KAAK+E,IAAAA;EAAAA,EAAAA,CAAAA,CAAAA,GAAAA;AAAAA,EA5jBoBV,SAAAA;ApBOhC,IoBPgCA,iBAAAA,WAAAA;AAAAA,WAAAA,GAAAA,IAAAA,GAAAA;AAAAA,aAAAA,IAAAA,GAAAA,IAAAA,EAAAA,QAAAA,KAAAA;AAAAA,UAAAA,IAAAA,EAAAA,CAAAA;AAAAA,QAAAA,aAAAA,EAAAA,cAAAA,OAAAA,EAAAA,eAAAA,MAAAA,WAAAA,MAAAA,EAAAA,WAAAA,OAAAA,OAAAA,eAAAA,IAAAA,EAAAA,KAAAA,CAAAA;IAAAA;EAAAA;AAAAA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,KAAAA,GAAAA,EAAAA,WAAAA,CAAAA,GAAAA,KAAAA,GAAAA,GAAAA,CAAAA,GAAAA;EAAAA;AAAAA,EAAAA;ApBOhC,IoBPgCA,SAAAA,SAAAA,GAAAA,GAAAA,GAAAA,GAAAA;AAAAA,WAAAA,MAAAA,IAAAA,SAAAA;AAAAA,MAAAA,IAAAA,OAAAA,yBAAAA,GAAAA,CAAAA;AAAAA,MAAAA,WAAAA,GAAAA;AAAAA,QAAAA,IAAAA,OAAAA,eAAAA,CAAAA;AAAAA,WAAAA,SAAAA,IAAAA,SAAAA,GAAAA,GAAAA,GAAAA,CAAAA;EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA;AAAAA,MAAAA,IAAAA,EAAAA;AAAAA,MAAAA,WAAAA;AAAAA,WAAAA,EAAAA,KAAAA,CAAAA;AAAAA;ApBOhC,IqBTcyc,aAAAA,SAAAA,IAAAA;AAAAA,WAAAA,EACR/hB,IAAQ4I,GAAAA;AAAAA,sBAAAA,MAAAA,CAAAA;AAAAA,QAAAA,IAAAA,6BAAAA,OAAAA,EAAAA,aAAAA,OAAAA,eAAAA,CAAAA,GAAAA,KAAAA,MACb5I,IAAQ4I,CAAAA,CAAAA;AAAAA,WAAAA,EACT/C,OAAO,SAAA,EACPyB,cAAc,GAAA,EACd4B,OAAO,GAAA,EAEPxI,MAAAA,GAAAA;EAAAA;AAAAA,SAAAA,YAAAA,GAAAA,EAAAA,GAAAA,eAAAA,GAAAA,CAAAA,EAAAA,KAAAA,aAAAA,OAAAA,SAGIkI,IAAAA;AAAAA,WAAAA,EAAAA,UAAAA,aAAAA,OAAAA,eAAAA,EAAAA,SAAAA,GAAAA,aAAAA,IAAAA,EAAAA,KAAAA,MACOA,EAAAA,GAAAA,KACX4N,YAAYvV,KAAKuV,UAAU1K,KAAK7K,IAAAA,GAAAA,KAChCwV,aAAaxV,KAAKwV,WAAW3K,KAAK7K,IAAAA,GAAAA,KAElCyV,aAAa9N,GAAK8N,cAAc,KAAA,KAChCvQ,OAAOwQ,aAAa/N,GAAK+N,cAAc,GAAA,KAEvCC,YAAYhO,GAAKgO,aAAAA,OAAa,KAC9B9G,cAAclH,GAAKkH,eAAe;EAAA,EAAA,GAAA,EAAA,KAAA,QAAA,OAAA,WAAA;AAAA,QAAAhQ,KAAA;AAAA,WAAA,EAAA,UAAA,aAAA,OAAA,eAAA,EAAA,SAAA,GAAA,QAAA,IAAA,EAAA,KAAA,IAAA;AAAA,QAKnCiN,IAAI9L,KAAKoG;AAAAA,SACRhD,SACJpD,KAAKkG,SAASlG,KAAKkB,QAChBlB,KAAK8M,OAAOzN,IAAIW,KAAK6O,cAAc,IACnC7O,KAAK8M,OAAOxN,IAAIU,KAAK6O,cAAc;AAAA,QAE/BzL,IAAsBpD,KAAtBoD,QAAQuS,IAAc3V,KAAd2V,WAEVC,IAAuB9J,EAAE+J,oBAAAA,CAAAA;AAAAA,MAC7BlH,eAAAA,CAAAA,GAAAA,EACAkH,mBAAAA,CAAAA;AAAAA,QACEC,IAAW,MAAM9V,KAAKkF,OAAOwQ;AAAAA,MAE/B3J,YAAYtL,IAAI,SAAC0L,IAAOxL,GAAAA;AAAAA,UACnB+U,IAAaI,GACbC,IAAmB5J,KAAQL,EAAEe,aAAcjO,YAC3CoX,IAAWD,IAAkB,MAAM,IAAG,GACtCE,IAAYN,IAAAA,CAAaI,IAAkBA,GAC3CG,IAAWJ,KAAsBG,GACjCE,IAAgBC,mBAAmBV,GAAYtS,CAAAA,GAC/CiT,IAAcD,mBAAmBF,GAAU9S,CAAAA,GAE3CkT,IAAezV,GAAKoH,QAAQ2N,EAAqBjV,CAAAA,GAEnD4V,IAAAA,QAASC,IAAAA;AACV3V,MAAAA,GAAKoH,QAAAA,IACIqO,IAAeA,EAAaH,gBAAgBA,GAAAA,IAC9CG,IAAeA,EAAaD,cAAcF,MAAAA,IAExCA,GAAAA,IACFE;AAAAA,UAEJI,IACe,QAApBV,IACGgL,oBAAoBxK,GAAUC,GAAQ3V,GAAKiM,QAAQjM,GAAKuC,QAAQvC,GAAK8U,WAAWK,CAAAA,IAChFgL,qBAAqBzK,GAAUC,GAAQ3V,GAAKiM,QAAQjM,GAAKuC,QAAQvC,GAAK8U,WAAWK,CAAAA;AAAAA,QAEnFrH,aAAa7H,KAAK2P,CAAAA,GAAAA,EAClBZ,iBAAiB/O,KAAAA,EAAAA,eAAAA,GAAAA,aAAAA,GAAAA,OAGXqF,IAAAA,OACAL,EAAEe,YAAAA,YAAAA,GAAAA,UAAAA,GAAAA,OAGFoJ,EAAAA,CAAAA;IAAAA,CAAAA,GAAAA,KAIJhO,OAAO;EAAA,EAAA,GAAA,EAAA,KAAA,mBAAA,OAAA,WAAA;AAAA,QAIR6D,KAAI9L,KAAKoG,OAETsI,KAAAA,CAAAA,CAEF,eAAA,CAAA,GAEA,WAAA;AAAA,aAAA,EAAA,cAEgB5C,GAAE6C,cAAAA,QACR3O,KAAKhB,QAAAA,aACAgB,KAAK6O,YAAAA;IAAAA,EAElBhE,KAAK7K,IAAAA,CAAAA,CAAAA;AAAAA,SAIJsI,aAAa,IAAI2B,IAAIyE,GACxBjO,IAAI,SAAA5B,IAAA;AAAA,UACA0V,KAAYC,aAAAA,MAAAA,QAAAA,qBAAgB7M,EAAAA,CAAAA;AAAAA,aAAAA,CACxBA,GAAK,CAAA,GAAI4M,EAAAA;IAAAA,CAAAA,CAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,uBAAAA,OAAAA,SAIAqC,IAAAA;AAAAA,QACZxT,KAAuBpD,KAAvBoD,QAAQqS,IAAezV,KAAfyV,YACTlG,IAAW6G,mBAAmBQ,GAASlB,aAAYkB,GAASC,QAAQ,GAAGzT,EAAAA;AAAAA,WAAAA,iBACtDmM,EAASlQ,IAAKoW,IAAAA,QAAiBlG,EAASjQ,IAAKmW,IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,cAAAA,OAAAA,SAG1DqB,IAAKnW,IAAEoW,GAAKxO,GAAAA;AAAAA,QAClBuO,IAAAA;AAAAA,UACElW,IAAQZ,KAAKhB,OAAO2B,EAAAA;AAAAA,UACvBoW,GAAM;AAAA,kBACED,IAAM9W,KAAKgX,oBAAoBhX,KAAKoG,MAAMyP,iBAAiBlV,EAAAA,CAAAA,CAAAA,GAAAA,GAChEY,MAAM0f,SAAShK,mBAAmBrW,GAAO,EAAA;AAAA,YAC1CsW,IAAQnC,UAAU/U,KAAKgJ,GAAAA,GACvB3J,IAAIkJ,EAAE4O,QAAQD,EAAM1X,OAAO,IAC3BF,IAAIiJ,EAAE6O,QAAQF,EAAM3X,MAAM,IAC1BW,KAASF,KAAKqX,oBAAoBrX,KAAKqX,iBAAiBxR,SAAS,IAClE7F,KAAKqX,iBAAiB1W,EAAAA,IAAKX,KAAKoG,MAAM6F,OAAOtL,EAAAA,KAAM,MAClD2W,KAAuC,MAA5BtX,KAAKoG,MAAM2F,YAAYpL,EAAAA,IAAWX,KAAKoG,MAAMyG,YAAYuI,QAAQ,CAAA;AAAA,aAC3EtN,IAAIqN,UAAU9V,GAAGC,GAAAA,EAAImC,MAAMvB,GAAOY,OAAOwW,IAAU,IAAA,CAAA,GAAA,KACnDxP,IAAIuN,QAAAA;MAAAA;AAAAA,kBAECyB,IAAK,oBAAA,GAAA,KACVhP,IAAI7H,QAAAA,GAAAA,GACJsB,MAAM0f,SAASrgB;IAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,eAAAA,OAAAA,WAAAA;AAAAA,SAKhBf,UAAUQ,iBAAiB,aAAaL,KAAKuV,SAAAA,GAAAA,KAC7C1V,UAAUQ,iBAAiB,cAAcL,KAAKwV,UAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,aAAAA,OAAAA,SAG1CjN,IAAAA;AAAAA,QACHqM,KAASrM,GAAEqM,QACb2C,IAASvX,KAAKsI,WAAWqM,IAAI,aAAA,EAAerG,OAC5CkJ,IAAYxX,KAAKyX,qBACjBC,IAAa1X,KAAK2X;AAAAA,QACnBJ,EAAO7T,SAASkR,EAAAA,GAAS;AAAA,UACvBjU,IAAI4W,EAAO1C,QAAQD,EAAAA;AAAAA,WAClBgD,WAAWF,GAAYF,GAAAA,KAAU,GAAA,KACjCG,iBAAiB/C,IAAAA,KACjB6C,sBAAsB9W,GAAAA,KACtBiX,WAAWhD,IAAQjU,GAAAA,MAAS4H,EAAAA;IAAAA;AAAAA,WAE5BiN,WAAAA;EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,cAAAA,OAAAA,WAAAA;AAAAA,SAKDoC,WAAW5X,KAAK2X,gBAAe3X,KAAKyX,qBAAAA,KAAoB;EAAA,EAAA,CAAA,CAAA,GAAA;AAAA,EArJvBhM,gBAAAA;ArBSjC,IYTDyV,aAAAA,EAAAA,KACAvF,WAAAA,MACCA,WAAAA,YAEMxH,iBAAAA,SACH4D,SAAAA,KACJzC,UAAAA,OACEwL,WAAAA;AZED,IYeDK,QACL,SAAAtiB,GAAYE,GAAQuF,GAAAA;AAAAA,SAAAA,gBAAAA,MAAAA,EAAAA,GACZ8c,eAAe9c,EAAQM,MAAM7F,GAAQuF,CAAAA;AAAAA;;;;;;;;;;;;;;;;;;;;;;AUsD9C,2BAGM,QAAA,KAAA,MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QArFO,OAAI;IACb,QAAM,CAAA;IACN,UAAQ,CAAA,EACJ,QAAM,CAAA,EAAA,CAAA;IAEV,UAAQ,CAAA;IACR,UAAQ,CAAA;;QAEC,QAAQ,GAAE,IAAA;QACV,OAAO,OAAM,IAAA;QACb,SAAS,IAAG,IAAA;QACZ,UAAU,KAAI,IAAA;QACd,cAAW,CAAA,EAAA,IAAA;QACX,aAAU,CAAA,EAAA,IAAA;QACV,cAAW,CAAA,EAAA,IAAA;QACX,iBAAc,CAAA,EAAA,IAAA;QACd,SAAM,CAAA,EAAA,IAAA;QACN,mBAAmB,EAAC,IAAA;QACpB,cAAc,MAAK,IAAA;QACnB,YAAY,EAAC,IAAA;MAMpB,QAAQ;MAER;WAGK,YAAY,IAAE;oBACL,WAAW,MAAI;UACzB,OAAK;eACA,GAAE,GAAI,IAAI;;;;QASV,eAAe,YAAW,CAAE,OAAO,sBAAsB,UAAU,MAAM,aAAa,OAAO,sBAAsB,KAAK,CAAA;QAGxH,kBAAkB,YAAY,WAAS,MAAM,gBAAgB,KAAK,CAAA;QAGlE,cAAc,YAAW,MAAO,MAAM,OAAM,CAAA;QAGnD,cAAc,YAAa,aAAY,MAAM,OAAO,OAAO,CAAA;AAMjE,UAAO,MAAA;AACL,YAAK,IAAO;MAAM;;QAChB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;;;AAKJ,YAAS,MAAA;AACP,YAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;AAMC,iBAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/BnB;AAAG,oBAAY,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDrB,IAAO,cAAQ;",
  "names": ["styleInject", "css", "ref", "insertAt", "document", "head", "getElementsByTagName", "style", "createElement", "type", "firstChild", "insertBefore", "appendChild", "styleSheet", "cssText", "createTextNode", "$", "expr", "con", "querySelector", "getOffset", "element", "rect", "getBoundingClientRect", "top", "documentElement", "scrollTop", "body", "left", "scrollLeft", "isHidden", "el", "offsetParent", "isElementInViewport", "bottom", "window", "innerHeight", "clientHeight", "right", "innerWidth", "clientWidth", "getElementContentWidth", "styles", "getComputedStyle", "padding", "parseFloat", "paddingLeft", "paddingRight", "fire", "target", "properties", "evt", "createEvent", "initEvent", "j", "dispatchEvent", "getTopOffset", "m", "titleHeight", "margins", "paddings", "getLeftOffset", "getExtraHeight", "legendHeight", "getExtraWidth", "floatTwo", "d", "toFixed", "fillArray", "array", "count", "start", "length", "fillerArray", "Array", "Math", "abs", "fill", "concat", "getStringWidth", "string", "charWidth", "getPositionByAngle", "angle", "radius", "sin", "ANGLE_RATIO", "cos", "isValidNumber", "candidate", "nonNegative", "Number", "isNaN", "isFinite", "round", "deepClone", "cloned", "value", "key", "Date", "getTime", "isArray", "getBarHeightAndYAttr", "yTop", "zeroLine", "height", "y", "equilizeNoOfElements", "array1", "array2", "extraCount", "t", "truncateString", "txt", "len", "slice", "shortenLargeNumber", "label", "number", "p", "floor", "log10", "l", "shortened", "pow", "getSplineCurvePointsStr", "xList", "yList", "points", "i", "push", "line", "pointA", "pointB", "lengthX", "lengthY", "sqrt", "atan2", "controlPoint", "current", "previous", "next", "reverse", "o", "PI", "command", "reduce", "acc", "point", "a", "cps", "cpe", "limitColor", "r", "lightenDarkenColor", "color", "amt", "col", "getColor", "usePound", "num", "parseInt", "b", "g", "toString", "isValidColor", "RGB_RE", "test", "createSVG", "tag", "createElementNS", "val", "parentNode", "keys", "map", "prop", "setAttribute", "renderVerticalGradient", "svgDefElem", "gradientId", "setGradientStop", "gradElem", "offset", "opacity", "makeSVGContainer", "parent", "className", "width", "makeSVGDefs", "svgContainer", "makeSVGGroup", "transform", "args", "inside", "makePath", "pathStr", "makeArcPathStr", "startPosition", "endPosition", "center", "clockWise", "largeArc", "arcStartX", "x", "arcStartY", "arcEndX", "arcEndY", "makeCircleStr", "midArc", "makeArcStrokePathStr", "makeStrokeCircleStr", "makeGradient", "lighter", "gradientDef", "opacities", "percentageBar", "depth", "PERCENTAGE_BAR_DEFAULT_DEPTH", "heatSquare", "size", "data", "legendBar", "LABEL_MAX_CHARS", "text", "FONT_SIZE", "FONT_FILL", "group", "legendDot", "makeText", "content", "options", "fontSize", "dy", "textAnchor", "makeVertLine", "y1", "y2", "stroke", "BASE_LINE_COLOR", "LABEL_MARGIN", "makeHoriLine", "x1", "x2", "lineType", "shortenNumbers", "yLine", "pos", "mode", "AXIS_TICK_LENGTH", "xLine", "yMarker", "labelPos", "labelSvg", "yRegion", "region", "datasetBar", "index", "meta", "minHeight", "datasetDot", "dot", "getPaths", "pointsStr", "join", "spline", "path", "heatline", "gradient_id", "svgDefs", "paths", "regionFill", "gradient_id_region", "translate", "unit", "oldCoord", "newCoord", "duration", "old", "STD_EASING", "translateVertLine", "newX", "oldX", "MARKER_LINE_ANIM_DUR", "translateHoriLine", "newY", "oldY", "animateRegion", "rectGroup", "newY1", "newY2", "oldY2", "newHeight", "childNodes", "stroke-dasharray", "getAttribute", "animateBar", "bar", "nodeName", "UNIT_ANIM_DUR", "split", "animateDot", "cx", "cy", "animatePath", "newXList", "newYList", "pathComponents", "animPath", "PATH_ANIM_DUR", "regStartPt", "regEndPt", "animRegion", "animatePathStr", "oldPath", "animateSVGElement", "props", "dur", "easingType", "oldValues", "animElement", "cloneNode", "newElement", "attributeName", "animateElement", "currentValue", "animAttr", "EASING", "webkitTransform", "msTransform", "mozTransform", "oTransform", "animateSVG", "elements", "newElements", "animElements", "replaceChild", "animSvg", "runSMILAnimation", "svgElement", "elementsToAnimate", "animSvgElement", "removeChild", "REPLACE_ALL_NEW_DUR", "downloadFile", "filename", "blob", "Blob", "url", "URL", "createObjectURL", "href", "download", "click", "revokeObjectURL", "prepareForExport", "svg", "clone", "classList", "add", "styleEl", "create", "CSSTEXT", "container", "innerHTML", "treatAsUtc", "date", "result", "setMinutes", "getMinutes", "getTimezoneOffset", "getYyyyMmDd", "dd", "getDate", "mm", "getMonth", "getFullYear", "getWeeksBetween", "startDate", "endDate", "weekStartDate", "setDayToSunday", "ceil", "getDaysBetween", "NO_OF_DAYS_IN_WEEK", "millisecondsPerDay", "SEC_IN_DAY", "NO_OF_MILLIS", "areInSameMonth", "getMonthName", "short", "monthName", "MONTH_NAMES", "getLastDateInMonth", "month", "year", "newDate", "day", "getDay", "addDays", "numberOfDays", "setDate", "getComponent", "name", "constants", "getData", "Object", "componentConfigs", "filter", "e", "includes", "k", "config", "assign", "ChartComponent", "normalize", "mantissa", "exponent", "sig", "exp", "getChartRangeIntervals", "max", "min", "upperBound", "lowerBound", "range", "noOfParts", "partSize", "intervals", "getChartIntervals", "maxValue", "minValue", "normalMaxValue", "normalMinValue", "calcChartIntervals", "values", "getPositiveFirstIntervals", "absMinValue", "intervalSize", "unshift", "withMinimum", "pseudoMaxValue", "pseudoMinValue", "getZeroIndex", "yPts", "interval", "getIntervalSize", "indexOf", "orderedArray", "getValueRange", "scale", "yAxis", "scaleMultiplier", "getClosestInArray", "goal", "arr", "closest", "prev", "curr", "calcDistribution", "distributionSize", "dataMaxValue", "distributionStep", "distribution", "checkpoint", "getMaxCheckpoint", "dataPrep", "labels", "datasetLength", "datasets", "zeroArray", "vals", "chartType", "AXIS_DATASET_CHART_TYPES", "yRegions", "end", "zeroDataPrep", "realData", "zeroData", "yMarkers", "getShortenedLabels", "chartWidth", "isSeries", "allowedSpace", "allowedLetters", "DEFAULT_CHAR_WIDTH", "seriesMultiple", "maxLabelLength", "getChartByType", "AxisChart", "chartTypes", "error", "BASE_MEASURES", "INIT_CHART_UPDATE_TIMEOUT", "CHART_POST_ANIMATE_TIMEOUT", "AXIS_DATASET_CHART_TYPES", "AXIS_LEGEND_BAR_SIZE", "BAR_CHART_SPACE_RATIO", "MIN_BAR_PERCENT_HEIGHT", "LINE_CHART_DOT_SIZE", "DOT_OVERLAY_SIZE_INCR", "PERCENTAGE_BAR_DEFAULT_HEIGHT", "PERCENTAGE_BAR_DEFAULT_DEPTH", "HEATMAP_DISTRIBUTION_SIZE", "HEATMAP_SQUARE_SIZE", "HEATMAP_GUTTER_SIZE", "DEFAULT_CHAR_WIDTH", "TOOLTIP_POINTER_TRIANGLE_HEIGHT", "DEFAULT_CHART_COLORS", "HEATMAP_COLORS_GREEN", "DEFAULT_COLORS", "ANGLE_RATIO", "Math", "PI", "FULL_ANGLE", "t", "SvgTip", "parent", "colors", "titleName", "titleValue", "listValues", "titleValueFirst", "x", "y", "top", "left", "setup", "makeTooltip", "fill", "calcPosition", "container", "$", "create", "this", "hideTip", "title", "querySelector", "dataPointList", "addEventListener", "index", "setAttribute", "innerHTML", "map", "set", "i", "color", "_this2", "value", "formatted", "li", "appendChild", "width", "offsetWidth", "offsetHeight", "maxLeft", "pointer", "style", "pointerOffset", "name", "valueFirst", "refresh", "opacity", "PRESET_COLOR_MAP", "getColor", "test", "exec", "Number", "toString", "reduce", "c", "ch", "AXIS_TICK_LENGTH", "LABEL_MARGIN", "LABEL_MAX_CHARS", "FONT_SIZE", "BASE_LINE_COLOR", "FONT_FILL", "makeOverlay", "unit", "transformValue", "nodeName", "getAttribute", "childNodes", "overlay", "cloneNode", "radius", "parseInt", "updateOverlay", "attributes", "values", "filter", "includes", "attr", "specified", "nodeValue", "UNIT_ANIM_DUR", "PATH_ANIM_DUR", "MARKER_LINE_ANIM_DUR", "REPLACE_ALL_NEW_DUR", "STD_EASING", "EASING", "CSSTEXT", "BaseChart", "options", "deepClone", "document", "HTMLElement", "Error", "rawChartArgs", "type", "realData", "prepareData", "data", "prepareFirstData", "validateColors", "config", "isNavigable", "animate", "truncateLegends", "measures", "JSON", "parse", "stringify", "BASE_MEASURES", "m", "setMeasures", "length", "titleHeight", "showLegend", "legendHeight", "argHeight", "height", "baseHeight", "state", "initTimeout", "INIT_CHART_UPDATE_TIMEOUT", "overlays", "configure", "validColors", "concat", "forEach", "string", "isValidColor", "push", "warn", "getExtraHeight", "boundDrawFn", "_this", "draw", "ResizeObserver", "resizeObserver", "observe", "disconnect", "removeEventListener", "makeContainer", "updateWidth", "args", "independentWidth", "styles", "tip", "bindTooltip", "onlyWidthChange", "init", "isHidden", "calc", "makeChartArea", "setupComponents", "components", "e", "drawArea", "render", "update", "renderLegend", "setupNavigation", "baseWidth", "getElementContentWidth", "getExtraWidth", "svg", "removeChild", "makeSVGContainer", "svgDefs", "makeSVGDefs", "titleEL", "makeText", "margins", "titleFontSize", "getTopOffset", "makeSVGGroup", "getLeftOffset", "paddings", "bottom", "legendArea", "updateTipOffset", "offset", "Map", "error", "o", "parentNode", "elementsToAnimate", "make", "updateNav", "CHART_POST_ANIMATE_TIMEOUT", "bindUnits", "bindOverlay", "keyActions", "onEnterKey", "bind", "onLeftArrow", "onUpArrow", "onRightArrow", "onDownArrow", "isElementInViewport", "_this4", "window", "event", "keyCode", "chartSvg", "prepareForExport", "AggregationChart", "formatTooltipY", "tooltipOptions", "maxSlices", "maxLegendPoints", "s", "sliceTotals", "allTotals", "labels", "label", "total", "datasets", "d", "totals", "sort", "a", "b", "slice", "sumOfRemaining", "round", "grandTotal", "center", "textContent", "legendTotals", "count", "barWidth", "divisor", "floor", "_this3", "truncateString", "dot", "legendDot", "NO_OF_YEAR_MONTHS", "NO_OF_DAYS_IN_WEEK", "NO_OF_MILLIS", "SEC_IN_DAY", "MONTH_NAMES", "DAY_NAMES_SHORT", "ChartComponent", "layerClass", "layerTransform", "constants", "getData", "makeElements", "animateElements", "store", "layer", "oldData", "element", "componentConfigs", "sliceStrings", "makePath", "strokeWidth", "transition", "newData", "animatePathStr", "xPositions", "percentageBar", "widths", "barHeight", "barDepth", "positions", "position", "yLine", "mode", "pos", "shortenNumbers", "newPos", "newLabels", "oldPos", "oldLabels", "equilizeNoOfElements", "line", "translateHoriLine", "xLine", "calcLabels", "translateVertLine", "yMarker", "_this5", "labelPos", "lineType", "newOptions", "yRegion", "r", "startPos", "endPos", "_this6", "newStarts", "oldStarts", "rectGroup", "animateRegion", "colWidth", "rowHeight", "squareSize", "xTranslate", "serializedSubDomains", "cols", "week", "weekNo", "getMonthName", "toUpperCase", "day", "yyyyMmDd", "dataValue", "square", "heatSquare", "unitType", "units", "yPositions", "j", "datasetBar", "offsets", "zeroLine", "barsWidth", "minHeight", "newXPos", "newYPos", "newOffsets", "oldXPos", "oldYPos", "oldOffsets", "bar", "animateBar", "paths", "hideLine", "getPaths", "heatline", "regionFill", "spline", "hideDots", "datasetDot", "valuesOverPoints", "Object", "newValues", "oldValues", "keys", "animatePath", "animateDot", "PercentageChart", "barOptions", "depth", "right", "component", "getComponent", "xPos", "bars", "get", "target", "indexOf", "gOff", "getOffset", "pOff", "formattedLabels", "fraction", "setValues", "toFixed", "showTip", "PieChart", "mouseMove", "mouseLeave", "hoverRadio", "startAngle", "clockWise", "prevSlicesProperties", "slicesProperties", "curAngle", "originDiffAngle", "largeArc", "diffAngle", "endAngle", "startPosition", "getPositionByAngle", "endPosition", "prevProperty", "curStart", "curEnd", "curPath", "makeCircleStr", "makeArcPathStr", "property", "angle", "path", "flag", "calTranslateByAngle", "lightenDarkenColor", "g_off", "pageX", "pageY", "formatted_labels", "percent", "slices", "prevIndex", "curActiveSliceIndex", "prevAcitve", "curActiveSlice", "hoverSlice", "COL_WIDTH", "ROW_HEIGHT", "Heatmap", "countLabel", "validStarts", "startSubDomain", "startSubDomainIndex", "discreteDomains", "spacing", "getWeeksBetween", "start", "end", "noOfWeeks", "Date", "setFullYear", "getFullYear", "dataPoints", "points", "date", "timestampSec", "getYyyyMmDd", "clone", "firstWeekStart", "distribution", "calcDistribution", "domainConfigs", "getDomains", "lessCol", "dayName", "dayText", "daySquares", "comp", "daySquare", "dateParts", "split", "month", "getBoundingClientRect", "lessText", "moreText", "getMonth", "startMonth", "startYear", "noOfMonths", "startOfMonth", "endDate", "areInSameMonth", "getLastDateInMonth", "getDomainConfig", "startDate", "year", "startOfWeek", "setDayToSunday", "domainConfig", "noOfMonthWeeks", "col", "getCol", "empty", "currentDate", "addDays", "currentDateWithinData", "getSubDomainConfig", "getMaxCheckpoint", "AxisChart", "lineOptions", "axisOptions", "xAxisMode", "yAxisMode", "xIsSeries", "shortenYAxisNumbers", "formatTooltipX", "dataPrep", "zeroDataPrep", "calcXPositions", "calcYAxisParameters", "getAllYValues", "makeDataByIndex", "datasetLength", "unitWidth", "xOffset", "xAxis", "floatTwo", "dataValues", "yPts", "calcChartIntervals", "scaleMultiplier", "getValueRange", "intervalHeight", "getIntervalSize", "getZeroIndex", "yAxis", "calcDatasetPoints", "calcYExtremes", "calcYRegions", "scaleAll", "scale", "val", "cumulativeYs", "replace", "char", "chartType", "stacked", "yExtremes", "cumulativeYPos", "Array", "yMarkers", "yRegions", "key", "cumulative", "allValueLists", "getShortenedLabels", "barDatasets", "lineDatasets", "barsConfigs", "spaceRatio", "p", "lineConfigs", "minLine", "dotSize", "markerConfigs", "optionals", "dataUnitComponents", "dataByIndex", "formatX", "formatY", "relX", "relY", "mapTooltipXPosition", "getClosestInArray", "dbi", "yExtreme", "formattedLabel", "rect", "legendBar", "overlayGuides", "g", "undefined", "currentIndex", "currentUnit", "_this7", "setCurrentDataPoint", "_this9", "_this10", "getDataPoint", "datasetValues", "splice", "DonutChart", "makeStrokeCircleStr", "makeArcStrokePathStr", "stroke", "chartTypes", "Chart", "getChartByType"]
}
