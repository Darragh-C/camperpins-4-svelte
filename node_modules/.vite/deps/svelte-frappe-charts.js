import {
  Chart
} from "./chunk-AR4EMDYO.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  binding_callbacks,
  bubble,
  children,
  claim_element,
  detach_dev,
  dispatch_dev,
  element,
  init,
  insert_hydration_dev,
  listen_dev,
  noop,
  onDestroy,
  onMount,
  safe_not_equal,
  validate_slots
} from "./chunk-CKECMU6L.js";
import "./chunk-7FP5O474.js";

// node_modules/svelte-frappe-charts/src/components/base.svelte
var file = "node_modules/svelte-frappe-charts/src/components/base.svelte";
function create_fragment(ctx) {
  let div;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {});
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(div, file, 89, 0, 2072);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      ctx[18](div);
      if (!mounted) {
        dispose = listen_dev(
          div,
          "data-select",
          /*data_select_handler*/
          ctx[17],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      ctx[18](null);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Base", slots, []);
  let { data = {
    labels: [],
    datasets: [{ values: [] }],
    yMarkers: {},
    yRegions: []
  } } = $$props;
  let { title = "" } = $$props;
  let { type = "line" } = $$props;
  let { height = 300 } = $$props;
  let { animate = true } = $$props;
  let { axisOptions = {} } = $$props;
  let { barOptions = {} } = $$props;
  let { lineOptions = {} } = $$props;
  let { tooltipOptions = {} } = $$props;
  let { colors = [] } = $$props;
  let { valuesOverPoints = 0 } = $$props;
  let { isNavigable = false } = $$props;
  let { maxSlices = 3 } = $$props;
  let chart = null;
  let chartRef;
  function ifChartThen(fn) {
    return function ifChart(...args) {
      if (chart) {
        return fn(...args);
      }
    };
  }
  const addDataPoint = ifChartThen((label, valueFromEachDataset, index) => chart.addDataPoint(label, valueFromEachDataset, index));
  const removeDataPoint = ifChartThen((index) => chart.removeDataPoint(index));
  const exportChart = ifChartThen(() => chart.export());
  const updateChart = ifChartThen((newData) => chart.update(newData));
  onMount(() => {
    chart = new Chart(
      chartRef,
      {
        data,
        title,
        type,
        height,
        animate,
        colors,
        axisOptions,
        barOptions,
        lineOptions,
        tooltipOptions,
        valuesOverPoints,
        isNavigable,
        maxSlices
      }
    );
  });
  onDestroy(() => {
    chart = null;
  });
  const writable_props = [
    "data",
    "title",
    "type",
    "height",
    "animate",
    "axisOptions",
    "barOptions",
    "lineOptions",
    "tooltipOptions",
    "colors",
    "valuesOverPoints",
    "isNavigable",
    "maxSlices"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Base> was created with unknown prop '${key}'`);
  });
  function data_select_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      chartRef = $$value;
      $$invalidate(0, chartRef);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2)
      $$invalidate(1, data = $$props2.data);
    if ("title" in $$props2)
      $$invalidate(2, title = $$props2.title);
    if ("type" in $$props2)
      $$invalidate(3, type = $$props2.type);
    if ("height" in $$props2)
      $$invalidate(4, height = $$props2.height);
    if ("animate" in $$props2)
      $$invalidate(5, animate = $$props2.animate);
    if ("axisOptions" in $$props2)
      $$invalidate(6, axisOptions = $$props2.axisOptions);
    if ("barOptions" in $$props2)
      $$invalidate(7, barOptions = $$props2.barOptions);
    if ("lineOptions" in $$props2)
      $$invalidate(8, lineOptions = $$props2.lineOptions);
    if ("tooltipOptions" in $$props2)
      $$invalidate(9, tooltipOptions = $$props2.tooltipOptions);
    if ("colors" in $$props2)
      $$invalidate(10, colors = $$props2.colors);
    if ("valuesOverPoints" in $$props2)
      $$invalidate(11, valuesOverPoints = $$props2.valuesOverPoints);
    if ("isNavigable" in $$props2)
      $$invalidate(12, isNavigable = $$props2.isNavigable);
    if ("maxSlices" in $$props2)
      $$invalidate(13, maxSlices = $$props2.maxSlices);
  };
  $$self.$capture_state = () => ({
    onMount,
    onDestroy,
    Chart,
    data,
    title,
    type,
    height,
    animate,
    axisOptions,
    barOptions,
    lineOptions,
    tooltipOptions,
    colors,
    valuesOverPoints,
    isNavigable,
    maxSlices,
    chart,
    chartRef,
    ifChartThen,
    addDataPoint,
    removeDataPoint,
    exportChart,
    updateChart
  });
  $$self.$inject_state = ($$props2) => {
    if ("data" in $$props2)
      $$invalidate(1, data = $$props2.data);
    if ("title" in $$props2)
      $$invalidate(2, title = $$props2.title);
    if ("type" in $$props2)
      $$invalidate(3, type = $$props2.type);
    if ("height" in $$props2)
      $$invalidate(4, height = $$props2.height);
    if ("animate" in $$props2)
      $$invalidate(5, animate = $$props2.animate);
    if ("axisOptions" in $$props2)
      $$invalidate(6, axisOptions = $$props2.axisOptions);
    if ("barOptions" in $$props2)
      $$invalidate(7, barOptions = $$props2.barOptions);
    if ("lineOptions" in $$props2)
      $$invalidate(8, lineOptions = $$props2.lineOptions);
    if ("tooltipOptions" in $$props2)
      $$invalidate(9, tooltipOptions = $$props2.tooltipOptions);
    if ("colors" in $$props2)
      $$invalidate(10, colors = $$props2.colors);
    if ("valuesOverPoints" in $$props2)
      $$invalidate(11, valuesOverPoints = $$props2.valuesOverPoints);
    if ("isNavigable" in $$props2)
      $$invalidate(12, isNavigable = $$props2.isNavigable);
    if ("maxSlices" in $$props2)
      $$invalidate(13, maxSlices = $$props2.maxSlices);
    if ("chart" in $$props2)
      chart = $$props2.chart;
    if ("chartRef" in $$props2)
      $$invalidate(0, chartRef = $$props2.chartRef);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*data*/
    2) {
      $:
        updateChart(data);
    }
  };
  return [
    chartRef,
    data,
    title,
    type,
    height,
    animate,
    axisOptions,
    barOptions,
    lineOptions,
    tooltipOptions,
    colors,
    valuesOverPoints,
    isNavigable,
    maxSlices,
    addDataPoint,
    removeDataPoint,
    exportChart,
    data_select_handler,
    div_binding
  ];
}
var Base = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      data: 1,
      title: 2,
      type: 3,
      height: 4,
      animate: 5,
      axisOptions: 6,
      barOptions: 7,
      lineOptions: 8,
      tooltipOptions: 9,
      colors: 10,
      valuesOverPoints: 11,
      isNavigable: 12,
      maxSlices: 13,
      addDataPoint: 14,
      removeDataPoint: 15,
      exportChart: 16
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Base",
      options,
      id: create_fragment.name
    });
  }
  get data() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set data(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get title() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set title(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get type() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set type(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get height() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set height(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get animate() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animate(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get axisOptions() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set axisOptions(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get barOptions() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set barOptions(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get lineOptions() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set lineOptions(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get tooltipOptions() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set tooltipOptions(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get colors() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set colors(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get valuesOverPoints() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set valuesOverPoints(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get isNavigable() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set isNavigable(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get maxSlices() {
    throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set maxSlices(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get addDataPoint() {
    return this.$$.ctx[14];
  }
  set addDataPoint(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get removeDataPoint() {
    return this.$$.ctx[15];
  }
  set removeDataPoint(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get exportChart() {
    return this.$$.ctx[16];
  }
  set exportChart(value) {
    throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var base_default = Base;

// node_modules/svelte-frappe-charts/src/index.js
var src_default = base_default;
export {
  src_default as default
};
//# sourceMappingURL=svelte-frappe-charts.js.map
